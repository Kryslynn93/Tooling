- category: Low-level Tooling
  tools:
    - source:
        - IMPLEMENTATIONS.md
        - https://openapi.tools/
        - openapi3 tags
      repository: https://github.com/tufin/oasdiff
      v3: true
      repositoryMetadata:
        base64Readme: >-
          
        readmeEtag: '"6e1d946bbc64fad5b7793f0c886922c082dc6fd04b68c756d29c96ae5ccd35ae"'
        readmeLastModified: Mon, 25 Apr 2022 08:34:43 GMT
        description: A diff tool for OpenAPI Specification 3
        created: '2021-02-10T10:28:36Z'
        updated: '2022-04-14T03:46:32Z'
        language: Go
        archived: false
        stars: 84
        watchers: 84
        forks: 8
        owner: Tufin
        logo: https://avatars.githubusercontent.com/u/5352131?v=4
        license: Apache-2.0
        repoEtag: '"6628556cb500311ca5f51f5826155f563293815fa3c531920d353e871998f7d7"'
        repoLastModified: Thu, 14 Apr 2022 03:46:32 GMT
      foundInMaster: true
      name: oasdiff
      category:
        - Low-level Tooling
        - All
      language: Go
      source_description:
        - Diff tool for OpenAPI 3.x specs, written as a Golang module
        - >-
          Golang module for deep comparison of two OpenAPI specifications.
          Available also as a command-line.
      v2: false
      v3_1: true
      homepage: https://github.com/tufin/oasdiff
      id: bc6193e93faf07fb5675ef9672cc836a
      swagger: 'No'
      version30: 'Yes'
      version31: 'Yes'
      moreDetails: true
      owner: Tufin
      stars: 84
      watchers: 84
      forks: 8
      created: '2021-02-10T10:28:36Z'
      lastUpdated: '2022-04-14T03:46:32Z'
      archived: 'No'
    - source:
        - IMPLEMENTATIONS.md
        - https://openapi.tools/
        - openapi3 tags
      name: swagger-parser
      homepage: https://github.com/swagger-api/swagger-parser
      language: Java
      source_description:
        - Swagger 1.0, 1.1, 1.2, 2.0 to OpenAPI Specification converter
        - Swagger Parser reads OpenAPI definitions into current Java POJOs.
      category:
        - Low-level Tooling
        - Parsers
        - All
      repository: https://github.com/swagger-api/swagger-parser
      v2: true
      v3: true
      repositoryMetadata:
        base64Readme: >-
          
        readmeEtag: '"893e0a7f358342c960a2d8329a2d4f6d57161ad2006abc6286d80dce3023ef93"'
        readmeLastModified: Wed, 27 Apr 2022 16:49:25 GMT
        description: Swagger Spec to Java POJOs
        created: '2014-04-21T16:00:22Z'
        updated: '2022-04-25T08:33:55Z'
        language: Java
        archived: false
        stars: 568
        watchers: 568
        forks: 455
        owner: swagger-api
        logo: https://avatars.githubusercontent.com/u/7658037?v=4
        license: Apache-2.0
        repoEtag: '"8230b2eabe4563bba93dcf97ef7e8f45f856324d8abc5fa5d36e19f4effb9a4f"'
        repoLastModified: Mon, 25 Apr 2022 08:33:55 GMT
      foundInMaster: true
      id: 45f46a8f7ac698cfe3926303bf3dff9d
      swagger: 'Yes'
      version30: 'Yes'
      version31: 'No'
      moreDetails: true
      owner: swagger-api
      stars: 568
      watchers: 568
      forks: 455
      created: '2014-04-21T16:00:22Z'
      lastUpdated: '2022-04-25T08:33:55Z'
      archived: 'No'
    - source: IMPLEMENTATIONS.md
      name: swagger-models
      homepage: >-
        https://github.com/swagger-api/swagger-core/tree/master/modules/swagger-models
      language: Java
      source_description: OpenAPI 3.0 Java Pojos
      category:
        - Low-level Tooling
        - Code Generators
        - All
      foundInMaster: true
      repository: >-
        https://github.com/swagger-api/swagger-core/tree/master/modules/swagger-models
      repositoryMetadata:
        base64Readme: >-
          
        readmeEtag: '"98bc89d482d68119986f3131f16310ce12e8e2884a0aedfe502915818b5b9c60"'
        readmeLastModified: Mon, 04 Apr 2022 16:09:24 GMT
        description: >-
          Examples and server integrations for generating the Swagger API
          Specification, which enables easy access to your REST API
        created: '2011-07-05T23:44:11Z'
        updated: '2022-04-29T13:28:08Z'
        language: Java
        archived: false
        stars: 6972
        watchers: 6972
        forks: 2107
        owner: swagger-api
        logo: https://avatars.githubusercontent.com/u/7658037?v=4
        license: Apache-2.0
        repoEtag: '"719a0d4c2107223a733e1ed4b1e77a186957f81d27bb6ba07d90340a30d6c7f2"'
        repoLastModified: Fri, 29 Apr 2022 13:28:08 GMT
      id: 266d60df2d48ad8a47539de3c1071f3a
      swagger: 'No'
      version30: 'No'
      version31: 'No'
      moreDetails: true
      owner: swagger-api
      stars: 6972
      watchers: 6972
      forks: 2107
      created: '2011-07-05T23:44:11Z'
      lastUpdated: '2022-04-29T13:28:08Z'
      archived: 'No'
    - source:
        - IMPLEMENTATIONS.md
        - openapi3 tags
      name: springdoc-openapi
      homepage: https://github.com/springdoc/springdoc-openapi
      language: Java
      source_description: >-
        Library that produces OpenAPI 3.x specification documentation for
        spring-boot applications.
      category:
        - Low-level Tooling
        - All
      repository: https://github.com/springdoc/springdoc-openapi
      v3: true
      repositoryMetadata:
        base64Readme: >-
          
        readmeEtag: '"567c213789624f5b47acba7ae7cc316693c20b0529cc44dad5278d7312f34b59"'
        readmeLastModified: Sun, 24 Apr 2022 18:50:15 GMT
        description: Library for OpenAPI 3 with spring-boot
        created: '2019-07-11T23:08:20Z'
        updated: '2022-04-29T06:47:42Z'
        language: Java
        archived: false
        stars: 1830
        watchers: 1830
        forks: 277
        owner: springdoc
        logo: https://avatars.githubusercontent.com/u/52804136?v=4
        license: Apache-2.0
        repoEtag: '"a65d4d58d4bcd2de0375241c85560ca939f05601915f3ada3fc34ee3b44b4d8a"'
        repoLastModified: Fri, 29 Apr 2022 06:47:42 GMT
      foundInMaster: true
      id: 901410cec129651fcf7374c79f824f27
      swagger: 'No'
      version30: 'Yes'
      version31: 'No'
      moreDetails: true
      owner: springdoc
      stars: 1830
      watchers: 1830
      forks: 277
      created: '2019-07-11T23:08:20Z'
      lastUpdated: '2022-04-29T06:47:42Z'
      archived: 'No'
    - source:
        - IMPLEMENTATIONS.md
        - https://openapi.tools/
        - openapi3 tags
      name: KaiZen OpenAPI Parser
      repository: https://github.com/reprezen/kaizen-openapi-parser
      owner: RepreZen
      category:
        - Low-level Tooling
        - Parsers
        - All
      language: Java
      source_description: >-
        High-performance Parser, Validator, and Java Object Model for OpenAPI
        3.x
      v3: true
      repositoryMetadata:
        base64Readme: >-
          
        readmeEtag: '"b726f629bf836bd2ac47731213481aa1e9ac7f3820062aa0a498bb475c79540a"'
        readmeLastModified: Wed, 17 Jul 2019 13:54:46 GMT
        description: >-
          High-performance Parser, Validator, and Java Object Model for OpenAPI
          3.x
        created: '2017-03-28T02:00:01Z'
        updated: '2022-04-27T04:58:15Z'
        language: Java
        archived: false
        stars: 119
        watchers: 119
        forks: 33
        owner: RepreZen
        logo: https://avatars.githubusercontent.com/u/15205934?v=4
        repoEtag: '"d0e952752ea8bc776dd94cddb7690c551d2036cccac0cd8f78de233fe7699605"'
        repoLastModified: Wed, 27 Apr 2022 04:58:15 GMT
      foundInMaster: true
      homepage: https://github.com/RepreZen/KaiZen-OpenAPI-Parser
      id: f542543d6021da9cbce2c66599690853
      swagger: 'No'
      version30: 'Yes'
      version31: 'No'
      moreDetails: true
      stars: 119
      watchers: 119
      forks: 33
      created: '2017-03-28T02:00:01Z'
      lastUpdated: '2022-04-27T04:58:15Z'
      archived: 'No'
    - source:
        - IMPLEMENTATIONS.md
        - https://openapi.tools/
      name:
        - openapi3-ts
        - OpenAPI-TS
      homepage: https://github.com/metadevpro/openapi3-ts
      language: TypeScript
      source_description: TS Model & utils for OpenAPI 3.0.x contracts
      category:
        - Low-level Tooling
        - Parsers
        - All
      repository: https://github.com/metadevpro/openapi3-ts
      v3: true
      repositoryMetadata:
        base64Readme: >-
          IyBPcGVuQXBpMy1UUwoKVHlwZVNjcmlwdCBsaWJyYXJ5IHRvIGhlbHAgYnVpbGRpbmcgT3BlbkFQSSAzLnggY29tcGxpYW50IEFQSSBjb250cmFjdHMuCgpbIVtCdWlsZCBTdGF0dXNdKGh0dHBzOi8vdHJhdmlzLWNpLm9yZy9tZXRhZGV2cHJvL29wZW5hcGkzLXRzLnN2Zz9icmFuY2g9bWFzdGVyKV0oaHR0cHM6Ly90cmF2aXMtY2kub3JnL21ldGFkZXZwcm8vb3BlbmFwaTMtdHMpClshW0NvdmVyYWdlIFN0YXR1c10oaHR0cHM6Ly9jb3ZlcmFsbHMuaW8vcmVwb3MvZ2l0aHViL21ldGFkZXZwcm8vb3BlbmFwaTMtdHMvYmFkZ2Uuc3ZnP2JyYW5jaD1tYXN0ZXIpXShodHRwczovL2NvdmVyYWxscy5pby9naXRodWIvbWV0YWRldnByby9vcGVuYXBpMy10cz9icmFuY2g9bWFzdGVyKQpbIVtLbm93biBWdWxuZXJhYmlsaXRpZXNdKGh0dHBzOi8vc255ay5pby90ZXN0L2dpdGh1Yi9tZXRhZGV2cHJvL29wZW5hcGkzLXRzL2JhZGdlLnN2Zz90YXJnZXRGaWxlPXBhY2thZ2UuanNvbildKGh0dHBzOi8vc255ay5pby90ZXN0L2dpdGh1Yi9tZXRhZGV2cHJvL29wZW5hcGkzLXRzP3RhcmdldEZpbGU9cGFja2FnZS5qc29uKQpbIVtucG0gdmVyc2lvbl0oaHR0cHM6Ly9iYWRnZS5mdXJ5LmlvL2pzL29wZW5hcGkzLXRzLnN2ZyldKGh0dHA6Ly9iYWRnZS5mdXJ5LmlvL2pzL29wZW5hcGkzLXRzKQoKWyFbTlBNXShodHRwczovL25vZGVpLmNvL25wbS9vcGVuYXBpMy10cy5wbmc/ZG93bmxvYWRzPXRydWUmZG93bmxvYWRSYW5rPXRydWUmc3RhcnM9dHJ1ZSldKGh0dHBzOi8vbm9kZWkuY28vbnBtL29wZW5hcGkzLXRzLykKCiMjIEluY2x1ZGVzCgoqIGAvc3JjL21vZGVsYCBUUyB0eXBlZCBpbnRlcmZhY2VzIGZvciBoZWxwaW5nIGJ1aWxkaW5nIGEgY29udHJhY3QuCiogYC9zcmMvZHNsYCBGbHVlbnQgRFNMIGZvciBidWlsZGluZyBhIGNvbnRyYWN0LgoKIyMgSW5zdGFsbAoKSW5zdGFsbCBwYWNrYWdlIHZpYSAqKm5wbSoqOgoKYGBgYmFzaApucG0gaSAtLXNhdmUgb3BlbmFwaTMtdHMKYGBgCgojIyBWZXJzaW9ucyBhbmQgQ2hhbmdlbG9nCgpTZWUgW2NoYW5nZWxvZ10oQ2hhbmdlbG9nLm1kKS4KCiMjIFJlZmVyZW5jZXMKCiogT3BlbkFQSSBzcGVjIDMuMS4wLiBbaHR0cHM6Ly9naXRodWIuY29tL09BSS9PcGVuQVBJLVNwZWNpZmljYXRpb24vYmxvYi9tYXN0ZXIvdmVyc2lvbnMvMy4xLjAubWRdKGh0dHBzOi8vZ2l0aHViLmNvbS9PQUkvT3BlbkFQSS1TcGVjaWZpY2F0aW9uL2Jsb2IvbWFzdGVyL3ZlcnNpb25zLzMuMS4wLm1kKQoKIyMgTGljZW5zZQoKTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLgoKIyMgQ3JlZGl0cwoKKipDb250YWN0OioqIFBlZHJvIEouIE1vbGluYSB8IGdpdGh1YjogW3BqbW9saW5hXShodHRwczovL2dpdGh1Yi5jb20vcGptb2xpbmEpIHwgdHdpdHRlcjogW3Btb2xpbmFtXShodHRwczovL3R3aXR0ZXIuY29tL3Btb2xpbmFtKQoKKGMpIDIwMTctMjAyMi4gW1BlZHJvIEouIE1vbGluYV0oaHR0cDovL3BqbW9saW5hLmNvbSkgYXQgTWV0YWRldiBTLkwuIFtodHRwczovL21ldGFkZXYucHJvXShodHRwczovL21ldGFkZXYucHJvKSAmIGNvbnRyaWJ1dG9ycy4K
        readmeEtag: '"499bb41664454e09a1cfab64d047f500fab7f33b191461ab419f25703b19cb1c"'
        readmeLastModified: Thu, 21 Apr 2022 07:20:23 GMT
        description: TS Model & utils for creating and exposing OpenAPI 3.x contracts.
        created: '2017-03-06T18:47:56Z'
        updated: '2022-04-24T11:05:31Z'
        language: TypeScript
        archived: false
        stars: 270
        watchers: 270
        forks: 47
        owner: metadevpro
        logo: https://avatars.githubusercontent.com/u/24300914?v=4
        license: MIT
        repoEtag: '"a62bd90627b9616c75bdd78422501f6a4d1c5c172da79ddd04164a77c65b1812"'
        repoLastModified: Sun, 24 Apr 2022 11:05:31 GMT
      foundInMaster: true
      id: 390339b2a28f2e5660519a2422c29196
      swagger: 'No'
      version30: 'Yes'
      version31: 'No'
      moreDetails: true
      owner: metadevpro
      stars: 270
      watchers: 270
      forks: 47
      created: '2017-03-06T18:47:56Z'
      lastUpdated: '2022-04-24T11:05:31Z'
      archived: 'No'
    - source:
        - IMPLEMENTATIONS.md
        - https://openapi.tools/
      name: swagger2openapi
      category:
        - Low-level Tooling
        - Converters
        - All
      language: JavaScript
      link: https://mermade.org.uk/openapi-converter
      repository: https://github.com/mermade/swagger2openapi
      source_description:
        - An OpenAPI / Swagger 2.0 to OpenAPI 3.0.x converter and validator
        - >-
          Upgrade files from OpenAPI v2.0 to v3.0, bundling into one mega file
          or respecting $refs. Part of oas-kit.
      v2: true
      v3: true
      repositoryMetadata:
        base64Readme: >-
          IyBPQVMtS2l0CgpUaGlzIGlzIHRoZSBtb25vLXJlcG8gZm9yIHRoZSBmb2xsb3dpbmcgcmVsYXRlZCBwcm9qZWN0cwoKKiBbc3dhZ2dlcjJvcGVuYXBpXShwYWNrYWdlcy9zd2FnZ2VyMm9wZW5hcGkvUkVBRE1FLm1kKQoqIFtvYXMtdmFsaWRhdG9yXShwYWNrYWdlcy9vYXMtdmFsaWRhdG9yL1JFQURNRS5tZCkKKiBbb2FzLWxpbnRlcl0ocGFja2FnZXMvb2FzLWxpbnRlci9SRUFETUUubWQpCiogW29hcy1yZXNvbHZlcl0ocGFja2FnZXMvb2FzLXJlc29sdmVyL1JFQURNRS5tZCkKKiBbb2FzLXNjaGVtYS13YWxrZXJdKHBhY2thZ2VzL29hcy1zY2hlbWEtd2Fsa2VyL1JFQURNRS5tZCkKKiBbb2FzLWtpdC1jb21tb25dKHBhY2thZ2VzL29hcy1raXQtY29tbW9uL1JFQURNRS5tZCkKKiBbcmVmdG9vbHNdKHBhY2thZ2VzL3JlZnRvb2xzL1JFQURNRS5tZCkKCiMjIERvY3VtZW50YXRpb24KCiogW01haW4gc2l0ZV0oaHR0cHM6Ly9tZXJtYWRlLmdpdGh1Yi5pby9vYXMta2l0KQoqIFtDSEFOR0VMT0ddKGh0dHBzOi8vZ2l0aHViLmNvbS9NZXJtYWRlL29hcy1raXQvYmxvYi9tYXN0ZXIvQ0hBTkdFTE9HLm1kI2NoYW5nZS1sb2cpCgojIyBPbmxpbmUgY29udmVydGVyL3ZhbGlkYXRvcgoKKiBbT3BlbkFQSS13ZWJjb252ZXJ0ZXJdKGh0dHBzOi8vbWVybWFkZS5vcmcudWsvb3BlbmFwaS1jb252ZXJ0ZXIpCgojIyBTdXBwb3J0ZWQgTm9kZS5qcyB2ZXJzaW9ucwoKQW55IExUUyB2ZXJzaW9uLiBJdCBpcyAqKm5vdCoqIHJlY29tbWVuZGVkIHRvIHVzZSBOb2RlLmpzIDEyLjE3LngsMTIuMTgueCBvciAxMi4xOS54IGR1ZSB0byBhbiBbaHR0cDIgYnVnXShodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvaXNzdWVzLzI4MDAxKS4KCiMjIERldmVsb3BtZW50CgoqIGNsb25lIHRoZSByZXBvc2l0b3J5CiogYG5wbSBpYCBpbiB0aGUgdG9wIGxldmVsIGRpcmVjdG9yeQoqIGBucHggbGVybmEgYm9vdHN0cmFwYAoKUGxlYXNlIHRyeSBhbmQga2VlcCBjb21taXRzIHJlbGF0ZWQgdG8gYSBzaW5nbGUgcGFja2FnZSBvciBwaWVjZSBvZiBmdW5jdGlvbmFsaXR5LiBQbGVhc2UgcmV2aWV3IHRoZQpbQ09OVFJJQlVUSU5HLm1kXShDT05UUklCVVRJTkcubWQpIGZvciBhZGRpdGlvbmFsIGRldGFpbHMuCgojIyBTdXBwb3J0aW5nIGRldmVsb3BtZW50CgoqIFtBUElzLmd1cnUgb3Blbi1jb2xsZWN0aXZlXShodHRwczovL29wZW5jb2xsZWN0aXZlLmNvbS9vcGVuYXBpLWRpcmVjdG9yeSkKKiBbTGlub2RlIFZQUyByZWZlcnJhbCBsaW5rXShodHRwczovL3d3dy5saW5vZGUuY29tLz9yPTU3MzRiZTQ2N2NjNTAxYjIzMjY3Y2Y2NmQ0NTFiYzMzOTA0MmRkZmEpCg==
        readmeEtag: '"2204f5a47e36a0f28553f57b55877f2baf4cfd11734d07f0910c878360eb99b6"'
        readmeLastModified: Wed, 07 Jul 2021 12:13:38 GMT
        description: >-
          Convert Swagger 2.0 definitions to OpenAPI 3.0 and
          resolve/validate/lint
        created: '2016-10-20T13:17:42Z'
        updated: '2022-04-21T02:22:25Z'
        language: JavaScript
        archived: false
        stars: 598
        watchers: 598
        forks: 107
        owner: Mermade
        logo: https://avatars.githubusercontent.com/u/15950345?v=4
        license: BSD-3-Clause
        repoEtag: '"3de6c4e4a845a05559726850a966eb738a97aab9be43351bdd9a8df3faf663a1"'
        repoLastModified: Thu, 21 Apr 2022 02:22:25 GMT
      foundInMaster: true
      homepage: https://github.com/mermade/swagger2openapi
      id: 48c5505c3c024f64480d123af42fdd97
      swagger: 'Yes'
      version30: 'Yes'
      version31: 'No'
      moreDetails: true
      owner: Mermade
      stars: 598
      watchers: 598
      forks: 107
      created: '2016-10-20T13:17:42Z'
      lastUpdated: '2022-04-21T02:22:25Z'
      archived: 'No'
    - source: IMPLEMENTATIONS.md
      name: Microsoft.OpenApi.net
      homepage: https://github.com/microsoft/openapi.net/
      language: C#
      source_description: C# based parser with definition validation and migration support from V2
      category:
        - Low-level Tooling
        - Parsers
        - All
      foundInMaster: true
      repository: https://github.com/microsoft/openapi.net/
      repositoryMetadata:
        base64Readme: >-
          IVtDYXRlZ29yeSBvdmVydmlldyBzY3JlZW5zaG90XShkb2NzL2ltYWdlcy9vYWluZXQucG5nICJNaWNyb3NvZnQgKyBPcGVuQVBJID0gTG92ZSIpDQoNCiMgT3BlbkFQSS5ORVQgDQoNCnxQYWNrYWdlfE51Z2V0fA0KfC0tfC0tfA0KfE1vZGVscyBhbmQgV3JpdGVyc3xbIVtudWdldF0oaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9udWdldC92L01pY3Jvc29mdC5PcGVuQXBpLnN2ZyldKGh0dHBzOi8vd3d3Lm51Z2V0Lm9yZy9wYWNrYWdlcy9NaWNyb3NvZnQuT3BlbkFwaS8pIHwNCnxSZWFkZXJzIHwgWyFbbnVnZXRdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vbnVnZXQvdi9NaWNyb3NvZnQuT3BlbkFwaS5SZWFkZXJzLnN2ZyldKGh0dHBzOi8vd3d3Lm51Z2V0Lm9yZy9wYWNrYWdlcy9NaWNyb3NvZnQuT3BlbkFwaS5SZWFkZXJzLykgfA0KDQoNClRoZSAqKk9wZW5BUEkuTkVUKiogU0RLIGNvbnRhaW5zIGEgdXNlZnVsIG9iamVjdCBtb2RlbCBmb3IgT3BlbkFQSSBkb2N1bWVudHMgaW4gLk5FVCBhbG9uZyB3aXRoIGNvbW1vbiBzZXJpYWxpemVycyB0byBleHRyYWN0IHJhdyBPcGVuQVBJIEpTT04gYW5kIFlBTUwgZG9jdW1lbnRzIGZyb20gdGhlIG1vZGVsLg0KDQoqKlNlZSBtb3JlIGluZm9ybWF0aW9uIG9uIHRoZSBPcGVuQVBJIHNwZWNpZmljYXRpb24gYW5kIGl0cyBoaXN0b3J5IGhlcmU6IDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9wZW5hcGlzLm9yZyI+T3BlbkFQSSBJbml0aWF0aXZlPC9hPioqDQoNClByb2plY3QgT2JqZWN0aXZlcyANCg0KLSBQcm92aWRlIGEgc2luZ2xlIHNoYXJlZCBvYmplY3QgbW9kZWwgaW4gLk5FVCBmb3IgT3BlbkFQSSBkZXNjcmlwdGlvbnMuDQotIEluY2x1ZGUgdGhlIG1vc3QgcHJpbWl0aXZlIFJlYWRlciBmb3IgaW5nZXN0aW5nIE9wZW5BUEkgSlNPTiBhbmQgWUFNTCBkb2N1bWVudHMgaW4gYm90aCBWMiBhbmQgVjMgZm9ybWF0cy4NCi0gUHJvdmlkZSBPcGVuQVBJIGRlc2NyaXB0aW9uIHdyaXRlcnMgZm9yIGJvdGggVjIgYW5kIFYzIHNwZWNpZmljYXRpb24gZm9ybWF0cy4NCi0gRW5hYmxlIGRldmVsb3BlcnMgdG8gY3JlYXRlIFJlYWRlcnMgdGhhdCB0cmFuc2xhdGUgZGlmZmVyZW50IGRhdGEgZm9ybWF0cyBpbnRvIE9wZW5BUEkgZGVzY3JpcHRpb25zLiANCg0KIyBJbnN0YWxsYXRpb24NCg0KLSBJbnN0YWxsIGNvcmUgTnVnZXQgcGFja2FnZSBgTWljcm9zb2Z0Lk9wZW5BcGlgDQotIEluc3RhbGwgcmVhZGVycyBOdWdldCBwYWNrYWdlIGBNaWNyb3NvZnQuT3BlbkFwaS5SZWFkZXJzYA0KDQojIFByb2Nlc3NvcnMNClRoZSBPcGVuQVBJLk5FVCBwcm9qZWN0IGhvbGRzIHRoZSBiYXNlIG9iamVjdCBtb2RlbCBmb3IgcmVwcmVzZW50aW5nIE9wZW5BUEkgZG9jdW1lbnRzIGFzIC5ORVQgb2JqZWN0cy4gU29tZSBkZXZlbG9wZXJzIGhhdmUgZm91bmQgdGhlIG5lZWQgdG8gd3JpdGUgcHJvY2Vzc29ycyB0aGF0IGNvbnZlcnQgb3RoZXIgZGF0YSBmb3JtYXRzIGludG8gdGhpcyBPcGVuQVBJLk5FVCBvYmplY3QgbW9kZWwuIFdlJ2QgbGlrZSB0byBjdXJhdGUgdGhhdCBsaXN0IG9mIHByb2Nlc3NvcnMgaW4gdGhpcyBzZWN0aW9uIG9mIHRoZSByZWFkbWUuIA0KDQpUaGUgYmFzZSBKU09OIGFuZCBZQU1MIHByb2Nlc3NvcnMgYXJlIGJ1aWx0IGludG8gdGhpcyBwcm9qZWN0LiBCZWxvdyBpcyB0aGUgbGlzdCBvZiB0aGUgb3RoZXIgc3VwcG9ydGVkIHByb2Nlc3NvciBwcm9qZWN0cy4NCg0KLSBbKipDIyBDb21tZW50IC8gQW5ub3RhdGlvbiBQcm9jZXNzb3IqKl0oaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9PcGVuQVBJLk5FVC5DU2hhcnBBbm5vdGF0aW9ucykgOiBDb252ZXJ0cyBzdGFuZGFyZCAuTkVUIGFubm90YXRpb25zICggLy8vIGNvbW1lbnRzICkgZW1pdHRlZCBmcm9tIHlvdXIgYnVpbGQgKE1TQnVpbGQuZXhlKSBpbnRvIE9wZW5BUEkuTkVUIGRvY3VtZW50IG9iamVjdC4gDQoNCi0gWyoqT0RhdGEgQ1NETCBQcm9jZXNzb3IqKl0oaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9PcGVuQVBJLk5FVC5PRGF0YSkgOiBDb252ZXJ0cyB0aGUgWE1MIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBFbnRpdHkgRGF0YSBNb2RlbCAoRURNKSBkZXNjcmliaW5nIGFuIE9EYXRhIFNlcnZpY2UgaW50byBPcGVuQVBJLk5FVCBkb2N1bWVudCBvYmplY3QuIA0KDQojIEV4YW1wbGUgVXNhZ2UNCg0KQ3JlYXRpbmcgYW4gT3BlbkFQSSBEb2N1bWVudA0KDQpgYGBDIw0KdmFyIGRvY3VtZW50ID0gbmV3IE9wZW5BcGlEb2N1bWVudA0Kew0KICAgIEluZm8gPSBuZXcgT3BlbkFwaUluZm8NCiAgICB7DQogICAgICAgIFZlcnNpb24gPSAiMS4wLjAiLA0KICAgICAgICBUaXRsZSA9ICJTd2FnZ2VyIFBldHN0b3JlIChTaW1wbGUpIiwNCiAgICB9LA0KICAgIFNlcnZlcnMgPSBuZXcgTGlzdDxPcGVuQXBpU2VydmVyPg0KICAgIHsNCiAgICAgICAgbmV3IE9wZW5BcGlTZXJ2ZXIgeyBVcmwgPSAiaHR0cDovL3BldHN0b3JlLnN3YWdnZXIuaW8vYXBpIiB9DQogICAgfSwNCiAgICBQYXRocyA9IG5ldyBPcGVuQXBpUGF0aHMNCiAgICB7DQogICAgICAgIFsiL3BldHMiXSA9IG5ldyBPcGVuQXBpUGF0aEl0ZW0NCiAgICAgICAgew0KICAgICAgICAgICAgT3BlcmF0aW9ucyA9IG5ldyBEaWN0aW9uYXJ5PE9wZXJhdGlvblR5cGUsIE9wZW5BcGlPcGVyYXRpb24+DQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgW09wZXJhdGlvblR5cGUuR2V0XSA9IG5ldyBPcGVuQXBpT3BlcmF0aW9uDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBEZXNjcmlwdGlvbiA9ICJSZXR1cm5zIGFsbCBwZXRzIGZyb20gdGhlIHN5c3RlbSB0aGF0IHRoZSB1c2VyIGhhcyBhY2Nlc3MgdG8iLA0KICAgICAgICAgICAgICAgICAgICBSZXNwb25zZXMgPSBuZXcgT3BlbkFwaVJlc3BvbnNlcw0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBbIjIwMCJdID0gbmV3IE9wZW5BcGlSZXNwb25zZQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlc2NyaXB0aW9uID0gIk9LIg0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KfTsNCmBgYA0KDQpSZWFkaW5nIGFuZCB3cml0aW5nIGEgT3BlbkFQSSBkZXNjcmlwdGlvbg0KDQpgYGBDIw0KdmFyIGh0dHBDbGllbnQgPSBuZXcgSHR0cENsaWVudA0Kew0KICAgIEJhc2VBZGRyZXNzID0gbmV3IFVyaSgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL09BSS9PcGVuQVBJLVNwZWNpZmljYXRpb24vIikNCn07DQoNCnZhciBzdHJlYW0gPSBhd2FpdCBodHRwQ2xpZW50LkdldFN0cmVhbUFzeW5jKCJtYXN0ZXIvZXhhbXBsZXMvdjMuMC9wZXRzdG9yZS55YW1sIik7DQoNCi8vIFJlYWQgVjMgYXMgWUFNTA0KdmFyIG9wZW5BcGlEb2N1bWVudCA9IG5ldyBPcGVuQXBpU3RyZWFtUmVhZGVyKCkuUmVhZChzdHJlYW0sIG91dCB2YXIgZGlhZ25vc3RpYyk7DQoNCi8vIFdyaXRlIFYyIGFzIEpTT04NCnZhciBvdXRwdXRTdHJpbmcgPSBvcGVuQXBpRG9jdW1lbnQuU2VyaWFsaXplKE9wZW5BcGlTcGVjVmVyc2lvbi5PcGVuQXBpMl8wLCBPcGVuQXBpRm9ybWF0Lkpzb24pOw0KDQpgYGANCg0KIyBCdWlsZCBTdGF0dXMNCg0KfCoqbWFzdGVyKip8DQp8LS18DQp8WyFbQnVpbGQgc3RhdHVzXShodHRwczovL2NpLmFwcHZleW9yLmNvbS9hcGkvcHJvamVjdHMvc3RhdHVzLzlsNmhseTN2amV1MHRtdHgvYnJhbmNoL21hc3Rlcj9zdmc9dHJ1ZSldKGh0dHBzOi8vY2kuYXBwdmV5b3IuY29tL3Byb2plY3QvTWljcm9zb2Z0T3BlbkFQSU5FVEFkbWluL29wZW5hcGktbmV0LTU0ZTdpL2JyYW5jaC9tYXN0ZXIpfA0KDQojIENvbnRyaWJ1dGluZw0KDQpUaGlzIHByb2plY3Qgd2VsY29tZXMgY29udHJpYnV0aW9ucyBhbmQgc3VnZ2VzdGlvbnMuICBNb3N0IGNvbnRyaWJ1dGlvbnMgcmVxdWlyZSB5b3UgdG8gYWdyZWUgdG8gYQ0KQ29udHJpYnV0b3IgTGljZW5zZSBBZ3JlZW1lbnQgKENMQSkgZGVjbGFyaW5nIHRoYXQgeW91IGhhdmUgdGhlIHJpZ2h0IHRvLCBhbmQgYWN0dWFsbHkgZG8sIGdyYW50IHVzDQp0aGUgcmlnaHRzIHRvIHVzZSB5b3VyIGNvbnRyaWJ1dGlvbi4gRm9yIGRldGFpbHMsIHZpc2l0IGh0dHBzOi8vY2xhLm1pY3Jvc29mdC5jb20uDQoNCldoZW4geW91IHN1Ym1pdCBhIHB1bGwgcmVxdWVzdCwgYSBDTEEtYm90IHdpbGwgYXV0b21hdGljYWxseSBkZXRlcm1pbmUgd2hldGhlciB5b3UgbmVlZCB0byBwcm92aWRlDQphIENMQSBhbmQgZGVjb3JhdGUgdGhlIFBSIGFwcHJvcHJpYXRlbHkgKGUuZy4sIGxhYmVsLCBjb21tZW50KS4gU2ltcGx5IGZvbGxvdyB0aGUgaW5zdHJ1Y3Rpb25zDQpwcm92aWRlZCBieSB0aGUgYm90LiBZb3Ugd2lsbCBvbmx5IG5lZWQgdG8gZG8gdGhpcyBvbmNlIGFjcm9zcyBhbGwgcmVwb3MgdXNpbmcgb3VyIENMQS4NCg0KVGhpcyBwcm9qZWN0IGhhcyBhZG9wdGVkIHRoZSBbTWljcm9zb2Z0IE9wZW4gU291cmNlIENvZGUgb2YgQ29uZHVjdF0oaHR0cHM6Ly9vcGVuc291cmNlLm1pY3Jvc29mdC5jb20vY29kZW9mY29uZHVjdC8pLg0KRm9yIG1vcmUgaW5mb3JtYXRpb24gc2VlIHRoZSBbQ29kZSBvZiBDb25kdWN0IEZBUV0oaHR0cHM6Ly9vcGVuc291cmNlLm1pY3Jvc29mdC5jb20vY29kZW9mY29uZHVjdC9mYXEvKSBvcg0KY29udGFjdCBbb3BlbmNvZGVAbWljcm9zb2Z0LmNvbV0obWFpbHRvOm9wZW5jb2RlQG1pY3Jvc29mdC5jb20pIHdpdGggYW55IGFkZGl0aW9uYWwgcXVlc3Rpb25zIG9yIGNvbW1lbnRzLg0KDQpUbyBwcm92aWRlIGZlZWRiYWNrIGFuZCBhc2sgcXVlc3Rpb25zIHlvdSBjYW4gdXNlIFN0YWNrIE92ZXJmbG93IHdpdGggdGhlIFtPcGVuQVBJLk5FVF0oaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvdGFnZ2VkL29wZW5hcGkubmV0KSB0YWcgb3IgdXNlIHRoZSBPcGVuQVBJLk5FVCBTbGFjayBjaGFubmVsIHdoaWNoIHlvdSBjYW4gam9pbiBieSByZWdpc3RlcmluZyBmb3IgdGhlIEhUVFAgQVBJcyB0ZWFtIGF0IGh0dHA6Ly9zbGFjay5odHRwYXBpcy5jb20uDQo=
        readmeEtag: '"b7bde59273ed6cbe369b619531bdf02db228fb99eeac268ff8fb6155b389f9b6"'
        readmeLastModified: Tue, 19 Apr 2022 23:46:22 GMT
        description: >-
          The OpenAPI.NET SDK contains a useful object model for OpenAPI
          documents in .NET along with common serializers to extract raw OpenAPI
          JSON and YAML documents from the model.
        created: '2017-07-14T00:24:14Z'
        updated: '2022-04-29T05:14:02Z'
        language: C#
        archived: false
        stars: 960
        watchers: 960
        forks: 158
        owner: microsoft
        logo: https://avatars.githubusercontent.com/u/6154722?v=4
        license: MIT
        repoEtag: '"c4019337a54cfa5e1cd48985351e388572718a94a2bf493b308b99866c97cf07"'
        repoLastModified: Fri, 29 Apr 2022 05:14:02 GMT
      id: f3215034d64cfcbcc28a4bdb0205a075
      swagger: 'No'
      version30: 'No'
      version31: 'No'
      moreDetails: true
      owner: microsoft
      stars: 960
      watchers: 960
      forks: 158
      created: '2017-07-14T00:24:14Z'
      lastUpdated: '2022-04-29T05:14:02Z'
      archived: 'No'
    - source:
        - IMPLEMENTATIONS.md
        - https://openapi.tools/
      name:
        - odata-openapi
        - OData OpenAPI
      homepage: https://github.com/oasis-tcs/odata-openapi
      language: XSLT
      source_description:
        - OData 4.0 to OpenAPI 3.0.0 converter
        - OData 4.0, 3.0, and 2.0 to OpenAPI v3.1, v3.0, and v2.0 converter
      category:
        - Low-level Tooling
        - Converters
        - All
      repository: https://github.com/oasis-tcs/odata-openapi
      v2: true
      v3: true
      repositoryMetadata:
        base64Readme: >-
          PGRpdj4KPGgyPlJFQURNRTwvaDI+Cgo8cD5NZW1iZXJzIG9mIHRoZSA8YSBocmVmPSJodHRwczovL3d3dy5vYXNpcy1vcGVuLm9yZy9jb21taXR0ZWVzL29kYXRhLyI+T0FTSVMgT3BlbiBEYXRhIFByb3RvY29sIChPRGF0YSkgVGVjaG5pY2FsIENvbW1pdHRlZTwvYT4gY3JlYXRlIGFuZCBtYW5hZ2UgdGVjaG5pY2FsIGNvbnRlbnQgaW4gdGhpcyBUQyBHaXRIdWIgcmVwb3NpdG9yeSAoIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9vYXNpcy10Y3Mvb2RhdGEtb3BlbmFwaSI+aHR0cHM6Ly9naXRodWIuY29tL29hc2lzLXRjcy9vZGF0YS1vcGVuYXBpPC9hPiApIGFzIHBhcnQgb2YgdGhlIFRDJ3MgY2hhcnRlcmVkIHdvcmsgKDxpPmkuZS48L2k+LCB0aGUgcHJvZ3JhbSBvZiB3b3JrIGFuZCBkZWxpdmVyYWJsZXMgZGVzY3JpYmVkIGluIGl0cyA8YSBocmVmPSJodHRwczovL3d3dy5vYXNpcy1vcGVuLm9yZy9jb21taXR0ZWVzL29kYXRhL2NoYXJ0ZXIucGhwIj5jaGFydGVyPC9hPikuPC9wPgoKPHA+T0FTSVMgVEMgR2l0SHViIHJlcG9zaXRvcmllcywgYXMgZGVzY3JpYmVkIGluIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9hc2lzLW9wZW4ub3JnL3Jlc291cmNlcy90Y2FkbWluL2dpdGh1Yi1yZXBvc2l0b3JpZXMtZm9yLW9hc2lzLXRjLW1lbWJlcnMtY2hhcnRlcmVkLXdvcmsiPkdpdEh1YiBSZXBvc2l0b3JpZXMgZm9yIE9BU0lTIFRDIE1lbWJlcnMnIENoYXJ0ZXJlZCBXb3JrPC9hPiwgYXJlIGdvdmVybmVkIGJ5IHRoZSBPQVNJUyA8YSBocmVmPSJodHRwczovL3d3dy5vYXNpcy1vcGVuLm9yZy9wb2xpY2llcy1ndWlkZWxpbmVzL3RjLXByb2Nlc3MiPlRDIFByb2Nlc3M8L2E+LCA8YSBocmVmPSJodHRwczovL3d3dy5vYXNpcy1vcGVuLm9yZy9wb2xpY2llcy1ndWlkZWxpbmVzL2lwciI+SVBSIFBvbGljeTwvYT4sIGFuZCBvdGhlciBwb2xpY2llcywgc2ltaWxhciB0byBUQyBXaWtpcywgVEMgSklSQSBpc3N1ZXMgdHJhY2tpbmcgaW5zdGFuY2VzLCBUQyBTVk4vU3VidmVyc2lvbiByZXBvc2l0b3JpZXMsIGV0Yy4gIFdoaWxlIHRoZXkgbWFrZSB1c2Ugb2YgcHVibGljIEdpdEh1YiByZXBvc2l0b3JpZXMsIHRoZXNlIFRDIEdpdEh1YiByZXBvc2l0b3JpZXMgYXJlIGRpc3RpbmN0IGZyb20gPGEgaHJlZj0iaHR0cHM6Ly93d3cub2FzaXMtb3Blbi5vcmcvcmVzb3VyY2VzL29wZW4tcmVwb3NpdG9yaWVzIj5PQVNJUyBPcGVuIFJlcG9zaXRvcmllczwvYT4sIHdoaWNoIGFyZSB1c2VkIGZvciBkZXZlbG9wbWVudCBvZiBvcGVuIHNvdXJjZSA8YSBocmVmPSJodHRwczovL3d3dy5vYXNpcy1vcGVuLm9yZy9yZXNvdXJjZXMvb3Blbi1yZXBvc2l0b3JpZXMvbGljZW5zZXMiPmxpY2Vuc2VkPC9hPiBjb250ZW50LjwvcD4KPC9kaXY+Cgo8ZGl2Pgo8aDM+RGVzY3JpcHRpb248L2gzPgoKPHA+VGhlIHB1cnBvc2Ugb2YgdGhpcyByZXBvc2l0b3J5IGlzIHRvIHN1cHBvcnQgZGV2ZWxvcG1lbnQgb2YgdG9vbHMgZm9yIHByb2R1Y2luZyA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vT0FJL09wZW5BUEktU3BlY2lmaWNhdGlvbiI+T3BlbkFQSTwvYT4gZGVzY3JpcHRpb25zIGZvciBPRGF0YSBzZXJ2aWNlcy48L3A+CjxwPlBsYW5uZWQgd29yayBpdGVtcyBpbmNsdWRlOgo8dWw+CjxsaT5jb252ZXJ0IE9EYXRhIENTREwgSlNPTiBvciBPRGF0YSBDU0RMIFhNTCB0byBPcGVuQVBJIEpTT048L2xpPgo8bGk+ZXhhbXBsZSBYTUwgZmlsZXM8L2xpPgo8bGk+ZXhhbXBsZSBvcGVuYXBpLmpzb24gZmlsZXM8L2xpPgo8bGk+ZXhhbXBsZSBmaWxlcyBmb3IgdGhlIGxpdmUgb2RhdGEub3JnIHNlcnZpY2VzPC9saT4KPC91bD48L3A+Cgo8L2Rpdj4KCjxkaXY+CjxoMz5Db250cmlidXRpb25zPC9oMz4KPHA+QXMgc3RhdGVkIGluIHRoaXMgcmVwb3NpdG9yeSdzIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9vYXNpcy10Y3Mvb2RhdGEtb3BlbmFwaS9ibG9iL21hc3Rlci9DT05UUklCVVRJTkcubWQiPkNPTlRSSUJVVElORyBmaWxlPC9hPiwgY29udHJpYnV0b3JzIHRvIHRoaXMgcmVwb3NpdG9yeSBhcmUgZXhwZWN0ZWQgdG8gYmUgTWVtYmVycyBvZiB0aGUgT0FTSVMgT0RhdGEgVEMsIGZvciBhbnkgc3Vic3RhbnRpdmUgY2hhbmdlIHJlcXVlc3RzLiAgQW55b25lIHdpc2hpbmcgdG8gY29udHJpYnV0ZSB0byB0aGlzIEdpdEh1YiBwcm9qZWN0IGFuZCA8YSBocmVmPSJodHRwczovL3d3dy5vYXNpcy1vcGVuLm9yZy9qb2luL3BhcnRpY2lwYXRpb24taW5zdHJ1Y3Rpb25zIj5wYXJ0aWNpcGF0ZTwvYT4gaW4gdGhlIFRDJ3MgdGVjaG5pY2FsIGFjdGl2aXR5IGlzIGludml0ZWQgdG8gam9pbiBhcyBhbiBPQVNJUyBUQyBNZW1iZXIuICBQdWJsaWMgZmVlZGJhY2sgaXMgYWxzbyBhY2NlcHRlZCwgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9hc2lzLW9wZW4ub3JnL3BvbGljaWVzLWd1aWRlbGluZXMvaXByI2FwcGVuZGl4YSI+T0FTSVMgRmVlZGJhY2sgTGljZW5zZTwvYT4uPC9wPgo8L2Rpdj4KCjxkaXY+CjxoMz5MaWNlbnNpbmc8L2gzPgo8cD5QbGVhc2Ugc2VlIHRoZSA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vb2FzaXMtdGNzL29kYXRhLW9wZW5hcGkvYmxvYi9tYXN0ZXIvTElDRU5TRS5tZCI+TElDRU5TRTwvYT4gZmlsZSBmb3IgZGVzY3JpcHRpb24gb2YgdGhlIGxpY2Vuc2UgdGVybXMgYW5kIE9BU0lTIHBvbGljaWVzIGFwcGxpY2FibGUgdG8gdGhlIFRDJ3Mgd29yayBpbiB0aGlzIEdpdEh1YiBwcm9qZWN0LiBDb250ZW50IGluIHRoaXMgcmVwb3NpdG9yeSBpcyBpbnRlbmRlZCB0byBiZSBwYXJ0IG9mIHRoZSBPRGF0YSBUQydzIHBlcm1hbmVudCByZWNvcmQgb2YgYWN0aXZpdHksIHZpc2libGUgYW5kIGZyZWVseSBhdmFpbGFibGUgZm9yIGFsbCB0byB1c2UsIHN1YmplY3QgdG8gYXBwbGljYWJsZSBPQVNJUyBwb2xpY2llcywgYXMgcHJlc2VudGVkIGluIHRoZSByZXBvc2l0b3J5IDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9vYXNpcy10Y3Mvb2RhdGEtb3BlbmFwaS9ibG9iL21hc3Rlci9MSUNFTlNFLm1kIj5MSUNFTlNFPC9hPiBmaWxlLjwvcD4KPC9kaXY+CgoKPGgzPkZ1cnRoZXIgRGVzY3JpcHRpb24gb2YgdGhpcyBSZXBvc2l0b3J5PC9oMz4KClRoZSBPRGF0YSBUQyBoYXMgcHVibGlzaGVkIHRoZSBbT0RhdGEgdG8gT3BlbkFQSSBNYXBwaW5nIFZlcnNpb24gMS4wXShodHRwOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy9vZGF0YS9vZGF0YS1vcGVuYXBpL3YxLjAvb2RhdGEtb3BlbmFwaS12MS4wLmh0bWwpLCBhIHJlY29tbWVuZGF0aW9uIG9uIGhvdyB0byBjcmVhdGUgT3BlbkFQSSBkZXNjcmlwdGlvbnMgZm9yIE9EYXRhIHNlcnZpY2VzLiBUaGlzIHByb2plY3QgY29udGFpbnMgdHdvIHByb29mLW9mLWNvbmNlcHQgaW1wbGVtZW50YXRpb25zIG9mIHRoYXQgbWFwcGluZywgW29uZSB1c2luZyBKYXZhU2NyaXB0XShsaWIpLCBhbmQgW29uZSB1c2luZyBYU0xUXSh0b29scykuCgpUaGUgW2BleGFtcGxlc2AgZm9sZGVyXShleGFtcGxlcykgY29udGFpbnMgW09wZW5BUEkgMy4wLjJdKGh0dHBzOi8vZ2l0aHViLmNvbS9PQUkvT3BlbkFQSS1TcGVjaWZpY2F0aW9uKSBkZXNjcmlwdGlvbnMgdGhhdCBoYXZlIGJlZW4gY3JlYXRlZCBmcm9tIHRoZSBYTUwgYCRtZXRhZGF0YWAgZG9jdW1lbnRzIG9mIGxpdmUgYW5kIGV4YW1wbGUgT0RhdGEgc2VydmljZXMgd2l0aCB0aGVzZSBwcm9vZi1vZi1jb25jZXB0IGltcGxlbWVudGF0aW9ucy4gCgpUaGUgZW50aXR5LXJlbGF0aW9uc2hpcCBkaWFncmFtcyB2aXN1YWxpemluZyB0aGUgcmVzb3VyY2UgbW9kZWxzIG9mIGVhY2ggc2VydmljZSBhcmUgZ2VuZXJhdGVkIG9uLXRoZS1mbHkgd2l0aCBbeVVNTF0oaHR0cDovL3l1bWwubWUvKS4KCk9wZW5BUEkgZGVzY3JpcHRpb25zIGZvciBsaXZlIGV4YW1wbGUgT0RhdGEgc2VydmljZXMgYXQgW3d3dy5vZGF0YS5vcmddKGh0dHA6Ly93d3cub2RhdGEub3JnLykKIC0gW1RyaXBQaW4gKHJlYWQvd3JpdGUpXShodHRwOi8vcGV0c3RvcmUuc3dhZ2dlci5pby8/dXJsPWh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9vYXNpcy10Y3Mvb2RhdGEtb3BlbmFwaS9tYXN0ZXIvZXhhbXBsZXMvVHJpcFBpbi5vcGVuYXBpMy5qc29uKQogLSBbU2ltcGxlIHJlYWQvd3JpdGUgc2VydmljZV0oaHR0cDovL3BldHN0b3JlLnN3YWdnZXIuaW8vP3VybD1odHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vb2FzaXMtdGNzL29kYXRhLW9wZW5hcGkvbWFzdGVyL2V4YW1wbGVzL2V4YW1wbGUub3BlbmFwaTMuanNvbikKIC0gW05vcnRod2luZCAocmVhZCldKGh0dHA6Ly9wZXRzdG9yZS5zd2FnZ2VyLmlvLz91cmw9aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL29hc2lzLXRjcy9vZGF0YS1vcGVuYXBpL21hc3Rlci9leGFtcGxlcy9Ob3J0aHdpbmQub3BlbmFwaTMuanNvbikKCk9wZW5BUEkgZGVzY3JpcHRpb25zIGZvciBPRGF0YSBzZXJ2aWNlcyB0aGF0IHJlZmVyZW5jZSBlYWNoIG90aGVyIChjcm9zcy1zZXJ2aWNlIHJlZmVyZW5jZXMpCiAtIFtQZW9wbGVdKGh0dHA6Ly9wZXRzdG9yZS5zd2FnZ2VyLmlvLz91cmw9aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL29hc2lzLXRjcy9vZGF0YS1vcGVuYXBpL21hc3Rlci9leGFtcGxlcy9QZW9wbGUub3BlbmFwaTMuanNvbikKIC0gW1Byb2R1Y3RzXShodHRwOi8vcGV0c3RvcmUuc3dhZ2dlci5pby8/dXJsPWh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9vYXNpcy10Y3Mvb2RhdGEtb3BlbmFwaS9tYXN0ZXIvZXhhbXBsZXMvUHJvZHVjdHMub3BlbmFwaTMuanNvbikKCjxkaXY+CjxoMz5Db250YWN0PC9oMz4KPHA+UGxlYXNlIHNlbmQgcXVlc3Rpb25zIG9yIGNvbW1lbnRzIGFib3V0IDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9hc2lzLW9wZW4ub3JnL3Jlc291cmNlcy90Y2FkbWluL2dpdGh1Yi1yZXBvc2l0b3JpZXMtZm9yLW9hc2lzLXRjLW1lbWJlcnMtY2hhcnRlcmVkLXdvcmsiPk9BU0lTIFRDIEdpdEh1YiByZXBvc2l0b3JpZXM8L2E+IHRvIHRoZSBPQVNJUyA8YSBocmVmPSJtYWlsdG86dGMtYWRtaW5Ab2FzaXMtb3Blbi5vcmciPlRDIEFkbWluaXN0cmF0b3I8L2E+LiAgRm9yIHF1ZXN0aW9ucyBhYm91dCBjb250ZW50IGluIHRoaXMgcmVwb3NpdG9yeSwgcGxlYXNlIGNvbnRhY3QgdGhlIFRDIENoYWlyIG9yIENvLUNoYWlycyBhcyBsaXN0ZWQgb24gdGhlIHRoZSBPRGF0YSBUQydzIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9hc2lzLW9wZW4ub3JnL2NvbW1pdHRlZXMvb2RhdGEvIj5ob21lIHBhZ2U8L2E+LjwvcD4KPC9kaXY+Cg==
        readmeEtag: '"4688bebb62d8eac0d103d205eba4240046456df2c542b2c463db0700539af0db"'
        readmeLastModified: Mon, 11 Apr 2022 07:17:27 GMT
        description: >-
          OASIS OData TC: Tools for producing API descriptions for OData
          services that adhere to the OpenAPI Specification
        created: '2016-11-17T21:11:22Z'
        updated: '2022-04-13T09:09:28Z'
        language: XSLT
        archived: false
        stars: 135
        watchers: 135
        forks: 59
        owner: oasis-tcs
        logo: https://avatars.githubusercontent.com/u/20116735?v=4
        license: NOASSERTION
        repoEtag: '"f50941e39f8085571f1608b9df2abe800fba17648a9d29bd670c0468d4a06c70"'
        repoLastModified: Wed, 13 Apr 2022 09:09:28 GMT
      foundInMaster: true
      v3_1: true
      id: 9039f84e8e8b63849cbf15578564033e
      swagger: 'Yes'
      version30: 'Yes'
      version31: 'Yes'
      moreDetails: true
      owner: oasis-tcs
      stars: 135
      watchers: 135
      forks: 59
      created: '2016-11-17T21:11:22Z'
      lastUpdated: '2022-04-13T09:09:28Z'
      archived: 'No'
    - source:
        - IMPLEMENTATIONS.md
        - https://openapi.tools/
      name: openapi3_parser
      homepage: https://github.com/kevindew/openapi3_parser
      language: Ruby
      source_description:
        - >-
          A Ruby implementation of parser and validator for the OpenAPI 3
          Specification
        - >-
          A Ruby implementation of parser and validator for the OpenAPI 3
          Specification.
      category:
        - Low-level Tooling
        - Parsers
        - All
      repository: https://github.com/kevindew/openapi3_parser
      v2: false
      v3: true
      repositoryMetadata:
        base64Readme: >-
          IyBPcGVuQVBJIDMgUGFyc2VyCgpbIVtCdWlsZCBTdGF0dXNdKGh0dHBzOi8vdHJhdmlzLWNpLm9yZy9rZXZpbmRldy9vcGVuYXBpM19wYXJzZXIuc3ZnP2JyYW5jaD1tYWluKV0oaHR0cHM6Ly90cmF2aXMtY2kub3JnL2tldmluZGV3L29wZW5hcGkzX3BhcnNlcikKClRoaXMgYSBSdWJ5IGJhc2VkIHBhcnNlci92YWxpZGF0b3IgZm9yIFtPcGVuQVBJIDNdW29wZW5hcGktM10uIEl0IGlzIHVzZWQgdG8KY29udmVydCBhbiBPcGVuQVBJIGZpbGUgKGNhbiBiZSBhIGxvY2FsIGZpbGUsIGEgVVJMLCBhIHN0cmluZyBvciBldmVuIGEgUnVieQpoYXNoKSBpbnRvIGFuIG9iamVjdCBncmFwaCB3aXRoIGEgc2ltcGxlIEFQSSB0aGF0IGZvbGxvd3MgdGhlIFtPcGVuQVBJCnNwZWNpZmljYXRpb25dW29wZW5hcGktMy1zcGVjXS4KCkJhc2ljIGV4YW1wbGU6CgpgYGBydWJ5CnJlcXVpcmUgIm9wZW5hcGkzX3BhcnNlciIKCmRvY3VtZW50ID0gT3BlbmFwaTNQYXJzZXIubG9hZF91cmwoImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9PQUkvT3BlbkFQSS1TcGVjaWZpY2F0aW9uL21hc3Rlci9leGFtcGxlcy92My4wL3BldHN0b3JlLnlhbWwiKQoKZG9jdW1lbnQucGF0aHNbIi9wZXRzIl0uZ2V0LnN1bW1hcnkKIyA9PiAiTGlzdCBhbGwgcGV0cyIKYGBgCgpJdCBhaW1zIHRvIHN1cHBvcnQgMTAwJSBvZiB0aGUgT3BlbkFQSSAzLjAgc3BlY2lmaWNhdGlvbiwgd2l0aCBrZXkgZmVhdHVyZXMKYmVpbmc6CgotIFN1cHBvcnRzIGxvYWRpbmcgYSBzcGVjaWZpY2F0aW9uIGJ5IHBhdGggdG8gYSBmaWxlLCBVUkwsIFJ1YnkgZmlsZSBvYmplY3RzLAogIGFuZCBzdHJpbmdzIGluIFlBTUwgYW5kIEpTT04gZm9ybWF0cywgaXQgZXZlbiBzdXBwb3J0cyBsb2FkaW5nIHZpYSBhIFJ1YnkgaGFzaDsKLSBTdXBwb3J0IGZvciBsb2FkaW5nIHJlZmVyZW5jZXMgZnJvbSBleHRlcm5hbCBmaWxlcyBpbmNsdWRpbmcgVVJMczsKLSBIYW5kbGVzIHJlY3Vyc2l2ZSByZWZlcmVuY2VzOwotIEFsbCBvZiBPcGVuQVBJIHNwZWNpZmljYXRpb24gbWFwcGVkIHRvIFJ1Ynkgb2JqZWN0cywgcHJvdmlkaW5nIGEgbmF0dXJhbAogIFJ1YnkgaW50ZXJmYWNlIHRoYXQgbWFwcyBjbGVhcmx5IHRvIHRoZSBzcGVjaWZpY2F0aW9uOwotIE9wZW5BUEkgZmlsZXMgdmFsaWRhdGVkIHdpdGggYSBzaW1wbGUgQVBJIHRvIHF1aWNrbHkgYW5kIHNpbXBseSBzZWUgYWxsCiAgcHJvYmxlbXMgd2l0aCBhIGZpbGUKLSBCdWlsdC1pbiBNYXJrZG93biB0byBIVE1MIGNvbnZlcnNpb247Ci0gRG9jdW1lbnRhdGlvbiBmb3IgdGhlIEFQSSB0byBuYXZpZ2F0ZSB0aGUgT3BlbkFQSSBub2RlcyBpcyBhdmFpbGFibGUgb24KICBbcnVieWRvYy5pbmZvXVtkb2NzXS4KCkkndmUgd3JvdGUgYSBibG9nIHBvc3QgcmVmbGVjdGluZyBvbiB0aGUgZGVjaXNpb25zIGludm9sdmVkIGluIGJ1aWxkaW5nIHRoaXMKcGFyc2VyIGluIFtIb3cgdG8gd3JpdGUgYW4gT3BlbkFQSSAzIHBhcnNlcl1bYmxvZ10uCgpbb3BlbmFwaS0zXTogaHR0cHM6Ly9naXRodWIuY29tL09BSS9PcGVuQVBJLVNwZWNpZmljYXRpb24KW29wZW5hcGktMy1zcGVjXTogaHR0cHM6Ly9naXRodWIuY29tL09BSS9PcGVuQVBJLVNwZWNpZmljYXRpb24vYmxvYi9tYXN0ZXIvdmVyc2lvbnMvMy4wLjIubWQjc3BlY2lmaWNhdGlvbgpbZG9jc106IGh0dHA6Ly93d3cucnVieWRvYy5pbmZvL2dpdGh1Yi9rZXZpbmRldy9vcGVuYXBpM19wYXJzZXIvT3BlbmFwaTNQYXJzZXIvTm9kZS9PcGVuYXBpCltibG9nXTogaHR0cHM6Ly9rZXZpbmRldy5tZS9wb3N0LzE4ODYxMTQyMzIzMS9ob3ctdG8td3JpdGUtYW4tb3BlbmFwaS0zLXBhcnNlcgoKIyMgVXNhZ2UKCiMjIyBMb2FkaW5nIGEgc3BlY2lmaWNhdGlvbgoKYGBgcnVieQojIGJ5IFVSTApPcGVuYXBpM1BhcnNlci5sb2FkX3VybCgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2tldmluZGV3L29wZW5hcGkzX3BhcnNlci9tYWluL3NwZWMvc3VwcG9ydC9leGFtcGxlcy9wZXRzdG9yZS1leHBhbmRlZC55YW1sIikKCiMgYnkgcGF0aCB0byBmaWxlCk9wZW5hcGkzUGFyc2VyLmxvYWRfZmlsZSgic3BlYy9zdXBwb3J0L2V4YW1wbGVzL3ViZXIueWFtbCIpCgojIGJ5IEZpbGUKT3BlbmFwaTNQYXJzZXIubG9hZChGaWxlLm9wZW4oInNwZWMvc3VwcG9ydC9leGFtcGxlcy91YmVyLnlhbWwiKSkKCiMgYnkgU3RyaW5nCk9wZW5hcGkzUGFyc2VyLmxvYWQoJ3sgIm9wZW5hcGkiOiAiMy4wLjAiLCAiaW5mbyI6IHsgInRpdGxlIjogIkFQSSIsICJ2ZXJzaW9uIjogIjEuMC4wIiB9LCAicGF0aHMiOiB7fSAgfScpCgojIGJ5IEhhc2gKT3BlbmFwaTNQYXJzZXIubG9hZChvcGVuYXBpOiAiMy4wLjAiLCBpbmZvOiB7IHRpdGxlOiAiQVBJIiwgdmVyc2lvbjogIjEuMC4wIiB9LCBwYXRoczoge30pCgpgYGAKCiMjIyBWYWxpZGF0aW5nCgpgYGBydWJ5CmRvY3VtZW50ID0gT3BlbmFwaTNQYXJzZXIubG9hZChvcGVuYXBpOiAiMy4wLjAiLCBpbmZvOiB7fSwgcGF0aHM6IHt9KQpkb2N1bWVudC52YWxpZD8KIyA9PiBmYWxzZQpkb2N1bWVudC5lcnJvcnMKI8KgPT4gT3BlbmFwaTNQYXJzZXI6OlZhbGlkYXRpb246OkVycm9yQ29sbGVjdGlvbihlcnJvcnM6IHsiIy9pbmZvIj0+WyJNaXNzaW5nIHJlcXVpcmVkIGZpZWxkczogdGl0bGUgYW5kIHZlcnNpb24iXX0pCmBgYAoKIyMjIFRyYXZlcnNpbmcKCmBgYHJ1YnkKZG9jdW1lbnQgPSBPcGVuYXBpM1BhcnNlci5sb2FkX3VybCgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2tldmluZGV3L29wZW5hcGkzX3BhcnNlci9tYWluL3NwZWMvc3VwcG9ydC9leGFtcGxlcy9wZXRzdG9yZS1leHBhbmRlZC55YW1sIikKCiMgYnkgb2JqZWN0cwoKZG9jdW1lbnQuaW5mby50ZXJtc19vZl9zZXJ2aWNlCiMgPT4gImh0dHA6Ly9zd2FnZ2VyLmlvL3Rlcm1zLyIKCmRvY3VtZW50LnBhdGhzLmtleXMKIyA9PiBbIi9wZXRzIiwgIi9wZXRzL3tpZH0iXQoKZG9jdW1lbnQucGF0aHNbIi9wZXRzIl0uZ2V0LnBhcmFtZXRlcnMubWFwKCY6bmFtZSkKIyA9PiBbInRhZ3MiLCAibGltaXQiXQoKIyBieSBoYXNoIHN5bnRheAoKZG9jdW1lbnRbImluZm8iXVsidGVybXNPZlNlcnZpY2UiXQo9PiAiaHR0cDovL3N3YWdnZXIuaW8vdGVybXMvIgoKZG9jdW1lbnRbInBhdGhzIl0ua2V5cwojID0+IFsiL3BldHMiLCAiL3BldHMve2lkfSJdCgpkb2N1bWVudFsicGF0aHMiXVsiL3BldHMiXVsiZ2V0Il1bInBhcmFtZXRlcnMiXS5tYXAoJjpuYW1lKQojID0+IFsidGFncyIsICJsaW1pdCJdCgojIGJ5IGEgcGF0aCB0byBhIG5vZGUKZG9jdW1lbnQubm9kZV9hdCgiIy9wYXRocy8lMkZwZXRzL2dldC9vcGVyYXRpb25JZCIpCj0+ICJmaW5kUGV0cyIKCmRvY3VtZW50Lm5vZGVfYXQoIiMvY29tcG9uZW50cy9zY2hlbWFzL1BldC9hbGxPZi8wL3JlcXVpcmVkLzAiKQo9PiAibmFtZSIKCiMgb3IgY29tYmluaW5nCgpkb2N1bWVudC5jb21wb25lbnRzLnNjaGVtYXNbIlBldCJdLm5vZGVfYXQoIiMuLi9OZXdQZXQiKQo9PiBPcGVuYXBpM1BhcnNlcjo6Tm9kZTo6U2NoZW1hKCMvY29tcG9uZW50cy9zY2hlbWFzL05ld1BldCkKYGBgCgpZb3UgY2FuIGxlYXJuIG1vcmUgYWJvdXQgdGhlIEFQSSBvbiBbcnVieWRvYy5pbmZvXVtkb2NzXQoKIyMgSW5zdGFsbGF0aW9uCgpZb3UgY2FuIGluc3RhbGwgdGhpcyBnZW0gaW50byB5b3VyIGJ1bmRsZXIgYXBwbGljYXRpb24gYnkgYWRkaW5nIHRoaXMgbGluZSB0bwp5b3VyIEdlbWZpbGU6CgpgYGAKZ2VtICJvcGVuYXBpM19wYXJzZXIiLCAifj4gMC45LjAiCmBgYAoKYW5kIHRoZW4gcnVubmluZyBgJCBidW5kbGUgaW5zdGFsbGAKCk9yIGluc3RhbGwgdGhlIGdlbSBvbnRvIHlvdXIgbWFjaGluZSB2aWEgYCQgZ2VtIGluc3RhbGwgb3BlbmFwaTNfcGFyc2VyYAoKIyMgU3RhdHVzCgpUaGlzIGlzIGN1cnJlbnRseSBhIHdvcmsgaW4gcHJvZ3Jlc3MgYW5kIHdpbGwgcmVtYWluIHNvIHVudGlsIGl0IHJlYWNoZXMgMS4wLgoKU2VlIFtUT0RPXShUT0RPLm1kKSBmb3IgZGV0YWlscyBvZiB0aGUgZmVhdHVyZXMgc3RpbGwgdG8gaW1wbGVtZW50LgoKIyMgTGljZW5jZQoKW01JVCBMaWNlbnNlXShMSUNFTkNFKQo=
        readmeEtag: '"dd9f9975ac0af5e29d1c5676b1b13cc1850ee64255170754291a0a7912e785ad"'
        readmeLastModified: Mon, 21 Mar 2022 01:53:24 GMT
        description: Open API 3 Parser/Validator for Ruby
        created: '2017-10-19T23:33:52Z'
        updated: '2022-04-19T11:38:26Z'
        language: Ruby
        archived: false
        stars: 68
        watchers: 68
        forks: 11
        owner: kevindew
        logo: https://avatars.githubusercontent.com/u/282717?v=4
        license: MIT
        repoEtag: '"42c4c00d3369f7d9e7db20151c9b33d1c75a511ef171cf2572e77b6ab92411a6"'
        repoLastModified: Tue, 19 Apr 2022 11:38:26 GMT
      foundInMaster: true
      id: 609fe191ac5d7b1b89c772e47fd2deb8
      swagger: 'No'
      version30: 'Yes'
      version31: 'No'
      moreDetails: true
      owner: kevindew
      stars: 68
      watchers: 68
      forks: 11
      created: '2017-10-19T23:33:52Z'
      lastUpdated: '2022-04-19T11:38:26Z'
      archived: 'No'
- category: All
  tools:
    - source:
        - IMPLEMENTATIONS.md
        - https://openapi.tools/
        - openapi3 tags
      repository: https://github.com/tufin/oasdiff
      v3: true
      repositoryMetadata:
        base64Readme: >-
          
        readmeEtag: '"6e1d946bbc64fad5b7793f0c886922c082dc6fd04b68c756d29c96ae5ccd35ae"'
        readmeLastModified: Mon, 25 Apr 2022 08:34:43 GMT
        description: A diff tool for OpenAPI Specification 3
        created: '2021-02-10T10:28:36Z'
        updated: '2022-04-14T03:46:32Z'
        language: Go
        archived: false
        stars: 84
        watchers: 84
        forks: 8
        owner: Tufin
        logo: https://avatars.githubusercontent.com/u/5352131?v=4
        license: Apache-2.0
        repoEtag: '"6628556cb500311ca5f51f5826155f563293815fa3c531920d353e871998f7d7"'
        repoLastModified: Thu, 14 Apr 2022 03:46:32 GMT
      foundInMaster: true
      name: oasdiff
      category:
        - Low-level Tooling
        - All
      language: Go
      source_description:
        - Diff tool for OpenAPI 3.x specs, written as a Golang module
        - >-
          Golang module for deep comparison of two OpenAPI specifications.
          Available also as a command-line.
      v2: false
      v3_1: true
      homepage: https://github.com/tufin/oasdiff
      id: bc6193e93faf07fb5675ef9672cc836a
      swagger: 'No'
      version30: 'Yes'
      version31: 'Yes'
      moreDetails: true
      owner: Tufin
      stars: 84
      watchers: 84
      forks: 8
      created: '2021-02-10T10:28:36Z'
      lastUpdated: '2022-04-14T03:46:32Z'
      archived: 'No'
    - source:
        - IMPLEMENTATIONS.md
        - https://openapi.tools/
        - openapi3 tags
      name: swagger-parser
      homepage: https://github.com/swagger-api/swagger-parser
      language: Java
      source_description:
        - Swagger 1.0, 1.1, 1.2, 2.0 to OpenAPI Specification converter
        - Swagger Parser reads OpenAPI definitions into current Java POJOs.
      category:
        - Low-level Tooling
        - Parsers
        - All
      repository: https://github.com/swagger-api/swagger-parser
      v2: true
      v3: true
      repositoryMetadata:
        base64Readme: >-
          
        readmeEtag: '"893e0a7f358342c960a2d8329a2d4f6d57161ad2006abc6286d80dce3023ef93"'
        readmeLastModified: Wed, 27 Apr 2022 16:49:25 GMT
        description: Swagger Spec to Java POJOs
        created: '2014-04-21T16:00:22Z'
        updated: '2022-04-25T08:33:55Z'
        language: Java
        archived: false
        stars: 568
        watchers: 568
        forks: 455
        owner: swagger-api
        logo: https://avatars.githubusercontent.com/u/7658037?v=4
        license: Apache-2.0
        repoEtag: '"8230b2eabe4563bba93dcf97ef7e8f45f856324d8abc5fa5d36e19f4effb9a4f"'
        repoLastModified: Mon, 25 Apr 2022 08:33:55 GMT
      foundInMaster: true
      id: 45f46a8f7ac698cfe3926303bf3dff9d
      swagger: 'Yes'
      version30: 'Yes'
      version31: 'No'
      moreDetails: true
      owner: swagger-api
      stars: 568
      watchers: 568
      forks: 455
      created: '2014-04-21T16:00:22Z'
      lastUpdated: '2022-04-25T08:33:55Z'
      archived: 'No'
    - source: IMPLEMENTATIONS.md
      name: swagger-models
      homepage: >-
        https://github.com/swagger-api/swagger-core/tree/master/modules/swagger-models
      language: Java
      source_description: OpenAPI 3.0 Java Pojos
      category:
        - Low-level Tooling
        - Code Generators
        - All
      foundInMaster: true
      repository: >-
        https://github.com/swagger-api/swagger-core/tree/master/modules/swagger-models
      repositoryMetadata:
        base64Readme: >-
          
        readmeEtag: '"98bc89d482d68119986f3131f16310ce12e8e2884a0aedfe502915818b5b9c60"'
        readmeLastModified: Mon, 04 Apr 2022 16:09:24 GMT
        description: >-
          Examples and server integrations for generating the Swagger API
          Specification, which enables easy access to your REST API
        created: '2011-07-05T23:44:11Z'
        updated: '2022-04-29T13:28:08Z'
        language: Java
        archived: false
        stars: 6972
        watchers: 6972
        forks: 2107
        owner: swagger-api
        logo: https://avatars.githubusercontent.com/u/7658037?v=4
        license: Apache-2.0
        repoEtag: '"719a0d4c2107223a733e1ed4b1e77a186957f81d27bb6ba07d90340a30d6c7f2"'
        repoLastModified: Fri, 29 Apr 2022 13:28:08 GMT
      id: 266d60df2d48ad8a47539de3c1071f3a
      swagger: 'No'
      version30: 'No'
      version31: 'No'
      moreDetails: true
      owner: swagger-api
      stars: 6972
      watchers: 6972
      forks: 2107
      created: '2011-07-05T23:44:11Z'
      lastUpdated: '2022-04-29T13:28:08Z'
      archived: 'No'
    - source:
        - IMPLEMENTATIONS.md
        - openapi3 tags
      name: springdoc-openapi
      homepage: https://github.com/springdoc/springdoc-openapi
      language: Java
      source_description: >-
        Library that produces OpenAPI 3.x specification documentation for
        spring-boot applications.
      category:
        - Low-level Tooling
        - All
      repository: https://github.com/springdoc/springdoc-openapi
      v3: true
      repositoryMetadata:
        base64Readme: >-
          IVtPY3RvY2F0XShodHRwczovL3NwcmluZ2RvYy5vcmcvaW1hZ2VzL3NwcmluZ2RvYy1vcGVuYXBpLnBuZykKWyFbQnVpbGQgU3RhdHVzXShodHRwOi8vMTI5LjE1OS4yNTQuMTE1Ojg2ODYvYnVpbGRTdGF0dXMvaWNvbj9qb2I9c3ByaW5nZG9jLW9wZW5hcGktSUMpXShodHRwOi8vMTI5LjE1OS4yNTQuMTE1Ojg2ODYvdmlldy9zcHJpbmdkb2Mtb3BlbmFwaS9qb2Ivc3ByaW5nZG9jLW9wZW5hcGktSUMvKQpbIVtRdWFsaXR5IEdhdGVdKGh0dHBzOi8vc29uYXJjbG91ZC5pby9hcGkvcHJvamVjdF9iYWRnZXMvbWVhc3VyZT9wcm9qZWN0PXNwcmluZ2RvY19zcHJpbmdkb2Mtb3BlbmFwaSZtZXRyaWM9YWxlcnRfc3RhdHVzKV0oaHR0cHM6Ly9zb25hcmNsb3VkLmlvL2Rhc2hib2FyZD9pZD1zcHJpbmdkb2Nfc3ByaW5nZG9jLW9wZW5hcGkpClshW0tub3duIFZ1bG5lcmFiaWxpdGllc10oaHR0cHM6Ly9zbnlrLmlvL3Rlc3QvZ2l0aHViL3NwcmluZ2RvYy9zcHJpbmdkb2Mtb3BlbmFwaS5naXQvYmFkZ2Uuc3ZnKV0oaHR0cHM6Ly9zbnlrLmlvL3Rlc3QvZ2l0aHViL3NwcmluZ2RvYy9zcHJpbmdkb2Mtb3BlbmFwaS5naXQpClshW1N0YWNrIEV4Y2hhbmdlIHF1ZXN0aW9uc10oaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9zdGFja2V4Y2hhbmdlL3N0YWNrb3ZlcmZsb3cvdC9zcHJpbmdkb2MpXShodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy90YWdnZWQvc3ByaW5nZG9jP3RhYj1Wb3RlcykKCiMgVGFibGUgb2YgQ29udGVudHMKLSBbRnVsbCBkb2N1bWVudGF0aW9uXSgjZnVsbC1kb2N1bWVudGF0aW9uKQotIFsqKkludHJvZHVjdGlvbioqXSgjaW50cm9kdWN0aW9uKQotIFsqKkdldHRpbmcgU3RhcnRlZCoqXSgjZ2V0dGluZy1zdGFydGVkKQogIC0gW0xpYnJhcnkgZm9yIHNwcmluZ2RvYy1vcGVuYXBpIGludGVncmF0aW9uIHdpdGggc3ByaW5nLWJvb3QgYW5kIHN3YWdnZXItdWldKCNsaWJyYXJ5LWZvci1zcHJpbmdkb2Mtb3BlbmFwaS1pbnRlZ3JhdGlvbi13aXRoLXNwcmluZy1ib290LWFuZC1zd2FnZ2VyLXVpKQogIC0gW1NwcmluZy1ib290IHdpdGggT3BlbkFQSSBEZW1vIGFwcGxpY2F0aW9ucy5dKCNzcHJpbmctYm9vdC13aXRoLW9wZW5hcGktZGVtby1hcHBsaWNhdGlvbnMpCiAgICAtIFtTb3VyY2UgQ29kZSBmb3IgRGVtbyBBcHBsaWNhdGlvbnMuXSgjc291cmNlLWNvZGUtZm9yLWRlbW8tYXBwbGljYXRpb25zKQogICAgLSBbRGVtbyBTcHJpbmcgQm9vdCAyIFdlYiBNVkMgd2l0aCBPcGVuQVBJIDMuXSgjZGVtby1zcHJpbmctYm9vdC0yLXdlYi1tdmMtd2l0aC1vcGVuYXBpLTMpCiAgICAtIFtEZW1vIFNwcmluZyBCb290IDIgV2ViRmx1eCB3aXRoIE9wZW5BUEkgMy5dKCNkZW1vLXNwcmluZy1ib290LTItd2ViZmx1eC13aXRoLW9wZW5hcGktMykKICAgIC0gW0RlbW8gU3ByaW5nIEJvb3QgMSBXZWIgTVZDIHdpdGggT3BlbkFQSSAzLl0oI2RlbW8tc3ByaW5nLWJvb3QtMS13ZWItbXZjLXdpdGgtb3BlbmFwaS0zKQogICAgLSBbRGVtbyBTcHJpbmcgQm9vdCAyIFdlYkZsdXggd2l0aCBGdW5jdGlvbmFsIGVuZHBvaW50cyBPcGVuQVBJIDMuXSgjZGVtby1zcHJpbmctYm9vdC0yLXdlYmZsdXgtd2l0aC1mdW5jdGlvbmFsLWVuZHBvaW50cy1vcGVuYXBpLTMpCiAgICAtIFtEZW1vIFNwcmluZyBCb290IDIgYW5kIFNwcmluZyBIYXRlb2FzIHdpdGggT3BlbkFQSSAzLl0oI2RlbW8tc3ByaW5nLWJvb3QtMi1hbmQtc3ByaW5nLWhhdGVvYXMtd2l0aC1vcGVuYXBpLTMpCiAgLSBbSW50ZWdyYXRpb24gb2YgdGhlIGxpYnJhcnkgaW4gYSBTcHJpbmcgQm9vdCAyLngueCBwcm9qZWN0IHdpdGhvdXQgdGhlIHN3YWdnZXItdWk6XSgjaW50ZWdyYXRpb24tb2YtdGhlLWxpYnJhcnktaW4tYS1zcHJpbmctYm9vdC0yeHgtcHJvamVjdC13aXRob3V0LXRoZS1zd2FnZ2VyLXVpKQogIC0gW0Vycm9yIEhhbmRsaW5nIGZvciBSRVNUIHVzaW5nIEBDb250cm9sbGVyQWR2aWNlXSgjZXJyb3ItaGFuZGxpbmctZm9yLXJlc3QtdXNpbmctY29udHJvbGxlcmFkdmljZSkKICAtIFtBZGRpbmcgQVBJIEluZm9ybWF0aW9uIGFuZCBTZWN1cml0eSBkb2N1bWVudGF0aW9uXSgjYWRkaW5nLWFwaS1pbmZvcm1hdGlvbi1hbmQtc2VjdXJpdHktZG9jdW1lbnRhdGlvbikKICAtIFtzcHJpbmctd2ViZmx1eCBzdXBwb3J0IHdpdGggQW5ub3RhdGVkIENvbnRyb2xsZXJzXSgjc3ByaW5nLXdlYmZsdXgtc3VwcG9ydC13aXRoLWFubm90YXRlZC1jb250cm9sbGVycykKLSBbQWNrbm93bGVkZ2VtZW50c10oI2Fja25vd2xlZGdlbWVudHMpCiAgLSBbQ29udHJpYnV0b3JzXSgjY29udHJpYnV0b3JzKQogIC0gW0FkZGl0aW9uYWwgU3VwcG9ydF0oI2FkZGl0aW9uYWwtc3VwcG9ydCkKCiMgW0Z1bGwgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9zcHJpbmdkb2Mub3JnKQoKIyAqKkludHJvZHVjdGlvbioqCgpUaGUgc3ByaW5nZG9jLW9wZW5hcGkgSmF2YSBsaWJyYXJ5IGhlbHBzIGF1dG9tYXRpbmcgdGhlIGdlbmVyYXRpb24gb2YgQVBJIGRvY3VtZW50YXRpb24gdXNpbmcgU3ByaW5nIEJvb3QgcHJvamVjdHMuCnNwcmluZ2RvYy1vcGVuYXBpIHdvcmtzIGJ5IGV4YW1pbmluZyBhbiBhcHBsaWNhdGlvbiBhdCBydW50aW1lIHRvIGluZmVyIEFQSSBzZW1hbnRpY3MgYmFzZWQgb24gU3ByaW5nIGNvbmZpZ3VyYXRpb25zLCBjbGFzcyBzdHJ1Y3R1cmUgYW5kIHZhcmlvdXMgYW5ub3RhdGlvbnMuCgpUaGUgbGlicmFyeSBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlcyBkb2N1bWVudGF0aW9uIGluIEpTT04vWUFNTCBhbmQgSFRNTCBmb3JtYXR0ZWQgcGFnZXMuIFRoZSBnZW5lcmF0ZWQgZG9jdW1lbnRhdGlvbiBjYW4gYmUgY29tcGxlbWVudGVkIHVzaW5nIGBzd2FnZ2VyLWFwaWAgYW5ub3RhdGlvbnMuCgpUaGlzIGxpYnJhcnkgc3VwcG9ydHM6CiogIE9wZW5BUEkgMwoqICBTcHJpbmctYm9vdCAodjEgYW5kIHYyKQoqICBKU1ItMzAzLCBzcGVjaWZpY2FsbHkgZm9yIEBOb3ROdWxsLCBATWluLCBATWF4LCBhbmQgQFNpemUuCiogIFN3YWdnZXItdWkKKiAgT2F1dGggMgoKVGhlIGZvbGxvd2luZyB2aWRlbyBpbnRyb2R1Y2VzIHRoZSBMaWJyYXJ5OgoKKiBbaHR0cHM6Ly95b3V0dS5iZS91dFJ4eVBmRmxEd10oaHR0cHM6Ly95b3V0dS5iZS91dFJ4eVBmRmxEdykKClRoaXMgaXMgYSBjb21tdW5pdHktYmFzZWQgcHJvamVjdCwgbm90IG1haW50YWluZWQgYnkgdGhlIFNwcmluZyBGcmFtZXdvcmsgQ29udHJpYnV0b3JzIChQaXZvdGFsKQoKIyAqKkdldHRpbmcgU3RhcnRlZCoqCgojIyBMaWJyYXJ5IGZvciBzcHJpbmdkb2Mtb3BlbmFwaSBpbnRlZ3JhdGlvbiB3aXRoIHNwcmluZy1ib290IGFuZCBzd2FnZ2VyLXVpIAoqICAgQXV0b21hdGljYWxseSBkZXBsb3lzIHN3YWdnZXItdWkgdG8gYSBTcHJpbmcgQm9vdCAyLnggYXBwbGljYXRpb24KKiAgIERvY3VtZW50YXRpb24gd2lsbCBiZSBhdmFpbGFibGUgaW4gSFRNTCBmb3JtYXQsIHVzaW5nIHRoZSBvZmZpY2lhbCBbc3dhZ2dlci11aSBqYXJzXShodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci11aS5naXQpLgoqICAgVGhlIFN3YWdnZXIgVUkgcGFnZSBzaG91bGQgdGhlbiBiZSBhdmFpbGFibGUgYXQgaHR0cDovL3NlcnZlcjpwb3J0L2NvbnRleHQtcGF0aC9zd2FnZ2VyLXVpLmh0bWwgYW5kIHRoZSBPcGVuQVBJIGRlc2NyaXB0aW9uIHdpbGwgYmUgYXZhaWxhYmxlIGF0IHRoZSBmb2xsb3dpbmcgdXJsIGZvciBqc29uIGZvcm1hdDogaHR0cDovL3NlcnZlcjpwb3J0L2NvbnRleHQtcGF0aC92My9hcGktZG9jcwogICAgKiBgc2VydmVyYDogVGhlIHNlcnZlciBuYW1lIG9yIElQCiAgICAqIGBwb3J0YDogVGhlIHNlcnZlciBwb3J0CiAgICAqIGBjb250ZXh0LXBhdGhgOiBUaGUgY29udGV4dCBwYXRoIG9mIHRoZSBhcHBsaWNhdGlvbgoqICAgRG9jdW1lbnRhdGlvbiBjYW4gYmUgYXZhaWxhYmxlIGluIHlhbWwgZm9ybWF0IGFzIHdlbGwsIG9uIHRoZSBmb2xsb3dpbmcgcGF0aDogL3YzL2FwaS1kb2NzLnlhbWwKKiAgIEFkZCB0aGUgYHNwcmluZ2RvYy1vcGVuYXBpLXVpYCBsaWJyYXJ5IHRvIHRoZSBsaXN0IG9mIHlvdXIgcHJvamVjdCBkZXBlbmRlbmNpZXMgKE5vIGFkZGl0aW9uYWwgY29uZmlndXJhdGlvbiBpcyBuZWVkZWQpOgoKYGBgeG1sCiAgIDxkZXBlbmRlbmN5PgogICAgICA8Z3JvdXBJZD5vcmcuc3ByaW5nZG9jPC9ncm91cElkPgogICAgICA8YXJ0aWZhY3RJZD5zcHJpbmdkb2Mtb3BlbmFwaS11aTwvYXJ0aWZhY3RJZD4KICAgICAgPHZlcnNpb24+bGFzdC1yZWxlYXNlLXZlcnNpb248L3ZlcnNpb24+CiAgIDwvZGVwZW5kZW5jeT4KYGBgCiogICBUaGlzIHN0ZXAgaXMgb3B0aW9uYWw6IEZvciBjdXN0b20gcGF0aCBvZiB0aGUgc3dhZ2dlciBkb2N1bWVudGF0aW9uIGluIEhUTUwgZm9ybWF0LCBhZGQgYSBjdXN0b20gc3ByaW5nZG9jIHByb3BlcnR5LCBpbiB5b3VyIHNwcmluZy1ib290IGNvbmZpZ3VyYXRpb24gZmlsZToKCmBgYHByb3BlcnRpZXMKIyBzd2FnZ2VyLXVpIGN1c3RvbSBwYXRoCnNwcmluZ2RvYy5zd2FnZ2VyLXVpLnBhdGg9L3N3YWdnZXItdWkuaHRtbApgYGAKCiMjIFNwcmluZy1ib290IHdpdGggT3BlbkFQSSBEZW1vIGFwcGxpY2F0aW9ucy4KCiMjIyBbU291cmNlIENvZGUgZm9yIERlbW8gQXBwbGljYXRpb25zXShodHRwczovL2dpdGh1Yi5jb20vc3ByaW5nZG9jL3NwcmluZ2RvYy1vcGVuYXBpLWRlbW9zLmdpdCkuCiMjIyBbRGVtbyBTcHJpbmcgQm9vdCAyIFdlYiBNVkMgd2l0aCBPcGVuQVBJIDNdKGh0dHA6Ly8xNTguMTAxLjE5MS43MDo4MDgxLykuCiMjIyBbRGVtbyBTcHJpbmcgQm9vdCAyIFdlYkZsdXggd2l0aCBPcGVuQVBJIDNdKGh0dHA6Ly8xNTguMTAxLjE5MS43MDo4MDgyLykuCiMjIyBbRGVtbyBTcHJpbmcgQm9vdCAxIFdlYiBNVkMgd2l0aCBPcGVuQVBJIDNdKGh0dHA6Ly8xNTguMTAxLjE5MS43MDo4MDgzLykuCiMjIyBbRGVtbyBTcHJpbmcgQm9vdCAyIFdlYkZsdXggd2l0aCBGdW5jdGlvbmFsIGVuZHBvaW50cyBPcGVuQVBJIDNdKGh0dHA6Ly8xNTguMTAxLjE5MS43MDo4MDg0LykuCiMjIyBbRGVtbyBTcHJpbmcgQm9vdCAyIGFuZCBTcHJpbmcgSGF0ZW9hcyB3aXRoIE9wZW5BUEkgM10oaHR0cDovLzE1OC4xMDEuMTkxLjcwOjgwODUvKS4KCiFbQnJhbmNoaW5nXShodHRwczovL3NwcmluZ2RvYy5vcmcvaW1hZ2VzL3BldHMucG5nKQoKIyMgSW50ZWdyYXRpb24gb2YgdGhlIGxpYnJhcnkgaW4gYSBTcHJpbmcgQm9vdCAyLngueCBwcm9qZWN0IHdpdGhvdXQgdGhlIHN3YWdnZXItdWk6CiogICBEb2N1bWVudGF0aW9uIHdpbGwgYmUgYXZhaWxhYmxlIGF0IHRoZSBmb2xsb3dpbmcgdXJsIGZvciBqc29uIGZvcm1hdDogaHR0cDovL3NlcnZlcjpwb3J0L2NvbnRleHQtcGF0aC92My9hcGktZG9jcwogICAgKiBgc2VydmVyYDogVGhlIHNlcnZlciBuYW1lIG9yIElQCiAgICAqIGBwb3J0YDogVGhlIHNlcnZlciBwb3J0CiAgICAqIGBjb250ZXh0LXBhdGhgOiBUaGUgY29udGV4dCBwYXRoIG9mIHRoZSBhcHBsaWNhdGlvbgoqICAgRG9jdW1lbnRhdGlvbiB3aWxsIGJlIGF2YWlsYWJsZSBpbiB5YW1sIGZvcm1hdCBhcyB3ZWxsLCBvbiB0aGUgZm9sbG93aW5nIHBhdGggOiBgL3YzL2FwaS1kb2NzLnlhbWxgCiogICBBZGQgdGhlIGxpYnJhcnkgdG8gdGhlIGxpc3Qgb2YgeW91ciBwcm9qZWN0IGRlcGVuZGVuY2llcy4gKE5vIGFkZGl0aW9uYWwgY29uZmlndXJhdGlvbiBpcyBuZWVkZWQpCgpgYGB4bWwKICAgPGRlcGVuZGVuY3k+CiAgICAgIDxncm91cElkPm9yZy5zcHJpbmdkb2M8L2dyb3VwSWQ+CiAgICAgIDxhcnRpZmFjdElkPnNwcmluZ2RvYy1vcGVuYXBpLXdlYm12Yy1jb3JlPC9hcnRpZmFjdElkPgogICAgICA8dmVyc2lvbj5sYXN0LXJlbGVhc2UtdmVyc2lvbjwvdmVyc2lvbj4KICAgPC9kZXBlbmRlbmN5PgpgYGAKKiBUaGlzIHN0ZXAgaXMgb3B0aW9uYWw6IEZvciBjdXN0b20gcGF0aCBvZiB0aGUgT3BlbkFQSSBkb2N1bWVudGF0aW9uIGluIEpzb24gZm9ybWF0LCBhZGQgYSBjdXN0b20gc3ByaW5nZG9jIHByb3BlcnR5LCBpbiB5b3VyIHNwcmluZy1ib290IGNvbmZpZ3VyYXRpb24gZmlsZToKCmBgYHByb3BlcnRpZXMKIyAvYXBpLWRvY3MgZW5kcG9pbnQgY3VzdG9tIHBhdGgKc3ByaW5nZG9jLmFwaS1kb2NzLnBhdGg9L2FwaS1kb2NzCmBgYAoKKiBUaGlzIHN0ZXAgaXMgb3B0aW9uYWw6IElmIHlvdSB3YW50IHRvIGRpc2FibGUgYHNwcmluZ2RvYy1vcGVuYXBpYCBlbmRwb2ludHMsIGFkZCBhIGN1c3RvbSBzcHJpbmdkb2MgcHJvcGVydHksIGluIHlvdXIgYHNwcmluZy1ib290YCBjb25maWd1cmF0aW9uIGZpbGU6CgpgYGBwcm9wZXJ0aWVzCiMgZGlzYWJsZSBhcGktZG9jcwpzcHJpbmdkb2MuYXBpLWRvY3MuZW5hYmxlZD1mYWxzZQpgYGAKIAojIyBFcnJvciBIYW5kbGluZyBmb3IgUkVTVCB1c2luZyBAQ29udHJvbGxlckFkdmljZQpUbyBnZW5lcmF0ZSBkb2N1bWVudGF0aW9uIGF1dG9tYXRpY2FsbHksIG1ha2Ugc3VyZSBhbGwgdGhlIG1ldGhvZHMgZGVjbGFyZSB0aGUgSFRUUCBDb2RlIHJlc3BvbnNlcyB1c2luZyB0aGUgYW5ub3RhdGlvbjogQFJlc3BvbnNlU3RhdHVzLgoKIyMgQWRkaW5nIEFQSSBJbmZvcm1hdGlvbiBhbmQgU2VjdXJpdHkgZG9jdW1lbnRhdGlvbgogIFRoZSBsaWJyYXJ5IHVzZXMgc3ByaW5nLWJvb3QgYXBwbGljYXRpb24gYXV0by1jb25maWd1cmVkIHBhY2thZ2VzIHRvIHNjYW4gZm9yIHRoZSBmb2xsb3dpbmcgYW5ub3RhdGlvbnMgaW4gc3ByaW5nIGJlYW5zOiBPcGVuQVBJRGVmaW5pdGlvbiBhbmQgSW5mby4KICBUaGVzZSBhbm5vdGF0aW9ucyBkZWNsYXJlLCBBUEkgSW5mb3JtYXRpb246IFRpdGxlLCB2ZXJzaW9uLCBsaWNlbmNlLCBzZWN1cml0eSwgc2VydmVycywgdGFncywgc2VjdXJpdHkgYW5kIGV4dGVybmFsRG9jcy4KICBGb3IgYmV0dGVyIHBlcmZvcm1hbmNlIG9mIGRvY3VtZW50YXRpb24gZ2VuZXJhdGlvbiwgZGVjbGFyZSBgQE9wZW5BUElEZWZpbml0aW9uYCBhbmQgYEBTZWN1cml0eVNjaGVtZWAgYW5ub3RhdGlvbnMgd2l0aGluIGEgU3ByaW5nIG1hbmFnZWQgYmVhbi4gIAogIAojIyBzcHJpbmctd2ViZmx1eCBzdXBwb3J0IHdpdGggQW5ub3RhdGVkIENvbnRyb2xsZXJzCiogICBEb2N1bWVudGF0aW9uIGNhbiBiZSBhdmFpbGFibGUgaW4geWFtbCBmb3JtYXQgYXMgd2VsbCwgb24gdGhlIGZvbGxvd2luZyBwYXRoIDogL3YzL2FwaS1kb2NzLnlhbWwKKiAgIEFkZCB0aGUgbGlicmFyeSB0byB0aGUgbGlzdCBvZiB5b3VyIHByb2plY3QgZGVwZW5kZW5jaWVzICggTm8gYWRkaXRpb25hbCBjb25maWd1cmF0aW9uIGlzIG5lZWRlZCkKCmBgYHhtbAogICA8ZGVwZW5kZW5jeT4KICAgICAgPGdyb3VwSWQ+b3JnLnNwcmluZ2RvYzwvZ3JvdXBJZD4KICAgICAgPGFydGlmYWN0SWQ+c3ByaW5nZG9jLW9wZW5hcGktd2ViZmx1eC11aTwvYXJ0aWZhY3RJZD4KICAgICAgPHZlcnNpb24+bGFzdC1yZWxlYXNlLXZlcnNpb248L3ZlcnNpb24+CiAgIDwvZGVwZW5kZW5jeT4KYGBgCiogICBUaGlzIHN0ZXAgaXMgb3B0aW9uYWw6IEZvciBjdXN0b20gcGF0aCBvZiB0aGUgc3dhZ2dlciBkb2N1bWVudGF0aW9uIGluIEhUTUwgZm9ybWF0LCBhZGQgYSBjdXN0b20gc3ByaW5nZG9jIHByb3BlcnR5LCBpbiB5b3VyIHNwcmluZy1ib290IGNvbmZpZ3VyYXRpb24gZmlsZToKCmBgYHByb3BlcnRpZXMKIyBzd2FnZ2VyLXVpIGN1c3RvbSBwYXRoCnNwcmluZ2RvYy5zd2FnZ2VyLXVpLnBhdGg9L3N3YWdnZXItdWkuaHRtbApgYGAKClRoZSBgc3ByaW5nZG9jLW9wZW5hcGlgIGxpYnJhcmllcyBhcmUgaG9zdGVkIG9uIG1hdmVuIGNlbnRyYWwgcmVwb3NpdG9yeS4gClRoZSBhcnRpZmFjdHMgY2FuIGJlIHZpZXdlZCBhY2Nlc3NlZCBhdCB0aGUgZm9sbG93aW5nIGxvY2F0aW9uczoKClJlbGVhc2VzOgoqIFtodHRwczovL3MwMS5vc3Muc29uYXR5cGUub3JnL2NvbnRlbnQvZ3JvdXBzL3B1YmxpYy9vcmcvc3ByaW5nZG9jL10oaHR0cHM6Ly9zMDEub3NzLnNvbmF0eXBlLm9yZy9jb250ZW50L2dyb3Vwcy9wdWJsaWMvb3JnL3NwcmluZ2RvYy8pLgoKU25hcHNob3RzOgoqIFtodHRwczovL3MwMS5vc3Muc29uYXR5cGUub3JnL2NvbnRlbnQvcmVwb3NpdG9yaWVzL3NuYXBzaG90cy9vcmcvc3ByaW5nZG9jL10oaHR0cHM6Ly9zMDEub3NzLnNvbmF0eXBlLm9yZy9jb250ZW50L3JlcG9zaXRvcmllcy9zbmFwc2hvdHMvb3JnL3NwcmluZ2RvYy8pLgoKIyBBY2tub3dsZWRnZW1lbnRzCgojIyBDb250cmlidXRvcnMKc3ByaW5nZG9jLW9wZW5hcGkgaXMgcmVsZXZhbnQgYW5kIHVwZGF0ZWQgcmVndWxhcmx5IGR1ZSB0byB0aGUgdmFsdWFibGUgY29udHJpYnV0aW9ucyBmcm9tIGl0cyBbY29udHJpYnV0b3JzXShodHRwczovL2dpdGh1Yi5jb20vc3ByaW5nZG9jL3NwcmluZ2RvYy1vcGVuYXBpL2dyYXBocy9jb250cmlidXRvcnMpLgoKPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3NwcmluZ2RvYy9zcHJpbmdkb2Mtb3BlbmFwaS9ncmFwaHMvY29udHJpYnV0b3JzIj4KICA8aW1nIHNyYz0iaHR0cHM6Ly9jb250cmliLnJvY2tzL2ltYWdlP3JlcG89c3ByaW5nZG9jL3NwcmluZ2RvYy1vcGVuYXBpIiB3aWR0aD0iNTAlIi8+CjwvYT4KClRoYW5rcyB5b3UgYWxsIGZvciB5b3VyIHN1cHBvcnQhCgojIyBBZGRpdGlvbmFsIFN1cHBvcnQKKiBbU3ByaW5nIFRlYW1dKGh0dHBzOi8vc3ByaW5nLmlvL3RlYW0pIC0gVGhhbmtzIGZvciB0aGVpciBzdXBwb3J0IGJ5IHNoYXJpbmcgYWxsIHJlbGV2YW50IHJlc291cmNlcyBhcm91bmQgU3ByaW5nIHByb2plY3RzLgoqIFtKZXRCcmFpbnNdKGh0dHBzOi8vd3d3LmpldGJyYWlucy5jb20vP2Zyb209c3ByaW5nZG9jLW9wZW5hcGkpIC0gVGhhbmtzIGEgbG90IGZvciBzdXBwb3J0aW5nIHNwcmluZ2RvYy1vcGVuYXBpIHByb2plY3QuCgohW0plbkJyYWlucyBsb2dvXShodHRwczovL3NwcmluZ2RvYy5vcmcvaW1hZ2VzL2pldGJyYWlucy5zdmcpCg==
        readmeEtag: '"567c213789624f5b47acba7ae7cc316693c20b0529cc44dad5278d7312f34b59"'
        readmeLastModified: Sun, 24 Apr 2022 18:50:15 GMT
        description: Library for OpenAPI 3 with spring-boot
        created: '2019-07-11T23:08:20Z'
        updated: '2022-04-29T06:47:42Z'
        language: Java
        archived: false
        stars: 1830
        watchers: 1830
        forks: 277
        owner: springdoc
        logo: https://avatars.githubusercontent.com/u/52804136?v=4
        license: Apache-2.0
        repoEtag: '"a65d4d58d4bcd2de0375241c85560ca939f05601915f3ada3fc34ee3b44b4d8a"'
        repoLastModified: Fri, 29 Apr 2022 06:47:42 GMT
      foundInMaster: true
      id: 901410cec129651fcf7374c79f824f27
      swagger: 'No'
      version30: 'Yes'
      version31: 'No'
      moreDetails: true
      owner: springdoc
      stars: 1830
      watchers: 1830
      forks: 277
      created: '2019-07-11T23:08:20Z'
      lastUpdated: '2022-04-29T06:47:42Z'
      archived: 'No'
    - source:
        - IMPLEMENTATIONS.md
        - https://openapi.tools/
        - openapi3 tags
      name: KaiZen OpenAPI Parser
      repository: https://github.com/reprezen/kaizen-openapi-parser
      owner: RepreZen
      category:
        - Low-level Tooling
        - Parsers
        - All
      language: Java
      source_description: >-
        High-performance Parser, Validator, and Java Object Model for OpenAPI
        3.x
      v3: true
      repositoryMetadata:
        base64Readme: >-
          
        readmeEtag: '"b726f629bf836bd2ac47731213481aa1e9ac7f3820062aa0a498bb475c79540a"'
        readmeLastModified: Wed, 17 Jul 2019 13:54:46 GMT
        description: >-
          High-performance Parser, Validator, and Java Object Model for OpenAPI
          3.x
        created: '2017-03-28T02:00:01Z'
        updated: '2022-04-27T04:58:15Z'
        language: Java
        archived: false
        stars: 119
        watchers: 119
        forks: 33
        owner: RepreZen
        logo: https://avatars.githubusercontent.com/u/15205934?v=4
        repoEtag: '"d0e952752ea8bc776dd94cddb7690c551d2036cccac0cd8f78de233fe7699605"'
        repoLastModified: Wed, 27 Apr 2022 04:58:15 GMT
      foundInMaster: true
      homepage: https://github.com/RepreZen/KaiZen-OpenAPI-Parser
      id: f542543d6021da9cbce2c66599690853
      swagger: 'No'
      version30: 'Yes'
      version31: 'No'
      moreDetails: true
      stars: 119
      watchers: 119
      forks: 33
      created: '2017-03-28T02:00:01Z'
      lastUpdated: '2022-04-27T04:58:15Z'
      archived: 'No'
    - source:
        - IMPLEMENTATIONS.md
        - https://openapi.tools/
      name:
        - openapi3-ts
        - OpenAPI-TS
      homepage: https://github.com/metadevpro/openapi3-ts
      language: TypeScript
      source_description: TS Model & utils for OpenAPI 3.0.x contracts
      category:
        - Low-level Tooling
        - Parsers
        - All
      repository: https://github.com/metadevpro/openapi3-ts
      v3: true
      repositoryMetadata:
        base64Readme: >-
          IyBPcGVuQXBpMy1UUwoKVHlwZVNjcmlwdCBsaWJyYXJ5IHRvIGhlbHAgYnVpbGRpbmcgT3BlbkFQSSAzLnggY29tcGxpYW50IEFQSSBjb250cmFjdHMuCgpbIVtCdWlsZCBTdGF0dXNdKGh0dHBzOi8vdHJhdmlzLWNpLm9yZy9tZXRhZGV2cHJvL29wZW5hcGkzLXRzLnN2Zz9icmFuY2g9bWFzdGVyKV0oaHR0cHM6Ly90cmF2aXMtY2kub3JnL21ldGFkZXZwcm8vb3BlbmFwaTMtdHMpClshW0NvdmVyYWdlIFN0YXR1c10oaHR0cHM6Ly9jb3ZlcmFsbHMuaW8vcmVwb3MvZ2l0aHViL21ldGFkZXZwcm8vb3BlbmFwaTMtdHMvYmFkZ2Uuc3ZnP2JyYW5jaD1tYXN0ZXIpXShodHRwczovL2NvdmVyYWxscy5pby9naXRodWIvbWV0YWRldnByby9vcGVuYXBpMy10cz9icmFuY2g9bWFzdGVyKQpbIVtLbm93biBWdWxuZXJhYmlsaXRpZXNdKGh0dHBzOi8vc255ay5pby90ZXN0L2dpdGh1Yi9tZXRhZGV2cHJvL29wZW5hcGkzLXRzL2JhZGdlLnN2Zz90YXJnZXRGaWxlPXBhY2thZ2UuanNvbildKGh0dHBzOi8vc255ay5pby90ZXN0L2dpdGh1Yi9tZXRhZGV2cHJvL29wZW5hcGkzLXRzP3RhcmdldEZpbGU9cGFja2FnZS5qc29uKQpbIVtucG0gdmVyc2lvbl0oaHR0cHM6Ly9iYWRnZS5mdXJ5LmlvL2pzL29wZW5hcGkzLXRzLnN2ZyldKGh0dHA6Ly9iYWRnZS5mdXJ5LmlvL2pzL29wZW5hcGkzLXRzKQoKWyFbTlBNXShodHRwczovL25vZGVpLmNvL25wbS9vcGVuYXBpMy10cy5wbmc/ZG93bmxvYWRzPXRydWUmZG93bmxvYWRSYW5rPXRydWUmc3RhcnM9dHJ1ZSldKGh0dHBzOi8vbm9kZWkuY28vbnBtL29wZW5hcGkzLXRzLykKCiMjIEluY2x1ZGVzCgoqIGAvc3JjL21vZGVsYCBUUyB0eXBlZCBpbnRlcmZhY2VzIGZvciBoZWxwaW5nIGJ1aWxkaW5nIGEgY29udHJhY3QuCiogYC9zcmMvZHNsYCBGbHVlbnQgRFNMIGZvciBidWlsZGluZyBhIGNvbnRyYWN0LgoKIyMgSW5zdGFsbAoKSW5zdGFsbCBwYWNrYWdlIHZpYSAqKm5wbSoqOgoKYGBgYmFzaApucG0gaSAtLXNhdmUgb3BlbmFwaTMtdHMKYGBgCgojIyBWZXJzaW9ucyBhbmQgQ2hhbmdlbG9nCgpTZWUgW2NoYW5nZWxvZ10oQ2hhbmdlbG9nLm1kKS4KCiMjIFJlZmVyZW5jZXMKCiogT3BlbkFQSSBzcGVjIDMuMS4wLiBbaHR0cHM6Ly9naXRodWIuY29tL09BSS9PcGVuQVBJLVNwZWNpZmljYXRpb24vYmxvYi9tYXN0ZXIvdmVyc2lvbnMvMy4xLjAubWRdKGh0dHBzOi8vZ2l0aHViLmNvbS9PQUkvT3BlbkFQSS1TcGVjaWZpY2F0aW9uL2Jsb2IvbWFzdGVyL3ZlcnNpb25zLzMuMS4wLm1kKQoKIyMgTGljZW5zZQoKTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLgoKIyMgQ3JlZGl0cwoKKipDb250YWN0OioqIFBlZHJvIEouIE1vbGluYSB8IGdpdGh1YjogW3BqbW9saW5hXShodHRwczovL2dpdGh1Yi5jb20vcGptb2xpbmEpIHwgdHdpdHRlcjogW3Btb2xpbmFtXShodHRwczovL3R3aXR0ZXIuY29tL3Btb2xpbmFtKQoKKGMpIDIwMTctMjAyMi4gW1BlZHJvIEouIE1vbGluYV0oaHR0cDovL3BqbW9saW5hLmNvbSkgYXQgTWV0YWRldiBTLkwuIFtodHRwczovL21ldGFkZXYucHJvXShodHRwczovL21ldGFkZXYucHJvKSAmIGNvbnRyaWJ1dG9ycy4K
        readmeEtag: '"499bb41664454e09a1cfab64d047f500fab7f33b191461ab419f25703b19cb1c"'
        readmeLastModified: Thu, 21 Apr 2022 07:20:23 GMT
        description: TS Model & utils for creating and exposing OpenAPI 3.x contracts.
        created: '2017-03-06T18:47:56Z'
        updated: '2022-04-24T11:05:31Z'
        language: TypeScript
        archived: false
        stars: 270
        watchers: 270
        forks: 47
        owner: metadevpro
        logo: https://avatars.githubusercontent.com/u/24300914?v=4
        license: MIT
        repoEtag: '"a62bd90627b9616c75bdd78422501f6a4d1c5c172da79ddd04164a77c65b1812"'
        repoLastModified: Sun, 24 Apr 2022 11:05:31 GMT
      foundInMaster: true
      id: 390339b2a28f2e5660519a2422c29196
      swagger: 'No'
      version30: 'Yes'
      version31: 'No'
      moreDetails: true
      owner: metadevpro
      stars: 270
      watchers: 270
      forks: 47
      created: '2017-03-06T18:47:56Z'
      lastUpdated: '2022-04-24T11:05:31Z'
      archived: 'No'
    - source:
        - IMPLEMENTATIONS.md
        - https://openapi.tools/
      name: swagger2openapi
      category:
        - Low-level Tooling
        - Converters
        - All
      language: JavaScript
      link: https://mermade.org.uk/openapi-converter
      repository: https://github.com/mermade/swagger2openapi
      source_description:
        - An OpenAPI / Swagger 2.0 to OpenAPI 3.0.x converter and validator
        - >-
          Upgrade files from OpenAPI v2.0 to v3.0, bundling into one mega file
          or respecting $refs. Part of oas-kit.
      v2: true
      v3: true
      repositoryMetadata:
        base64Readme: >-
          IyBPQVMtS2l0CgpUaGlzIGlzIHRoZSBtb25vLXJlcG8gZm9yIHRoZSBmb2xsb3dpbmcgcmVsYXRlZCBwcm9qZWN0cwoKKiBbc3dhZ2dlcjJvcGVuYXBpXShwYWNrYWdlcy9zd2FnZ2VyMm9wZW5hcGkvUkVBRE1FLm1kKQoqIFtvYXMtdmFsaWRhdG9yXShwYWNrYWdlcy9vYXMtdmFsaWRhdG9yL1JFQURNRS5tZCkKKiBbb2FzLWxpbnRlcl0ocGFja2FnZXMvb2FzLWxpbnRlci9SRUFETUUubWQpCiogW29hcy1yZXNvbHZlcl0ocGFja2FnZXMvb2FzLXJlc29sdmVyL1JFQURNRS5tZCkKKiBbb2FzLXNjaGVtYS13YWxrZXJdKHBhY2thZ2VzL29hcy1zY2hlbWEtd2Fsa2VyL1JFQURNRS5tZCkKKiBbb2FzLWtpdC1jb21tb25dKHBhY2thZ2VzL29hcy1raXQtY29tbW9uL1JFQURNRS5tZCkKKiBbcmVmdG9vbHNdKHBhY2thZ2VzL3JlZnRvb2xzL1JFQURNRS5tZCkKCiMjIERvY3VtZW50YXRpb24KCiogW01haW4gc2l0ZV0oaHR0cHM6Ly9tZXJtYWRlLmdpdGh1Yi5pby9vYXMta2l0KQoqIFtDSEFOR0VMT0ddKGh0dHBzOi8vZ2l0aHViLmNvbS9NZXJtYWRlL29hcy1raXQvYmxvYi9tYXN0ZXIvQ0hBTkdFTE9HLm1kI2NoYW5nZS1sb2cpCgojIyBPbmxpbmUgY29udmVydGVyL3ZhbGlkYXRvcgoKKiBbT3BlbkFQSS13ZWJjb252ZXJ0ZXJdKGh0dHBzOi8vbWVybWFkZS5vcmcudWsvb3BlbmFwaS1jb252ZXJ0ZXIpCgojIyBTdXBwb3J0ZWQgTm9kZS5qcyB2ZXJzaW9ucwoKQW55IExUUyB2ZXJzaW9uLiBJdCBpcyAqKm5vdCoqIHJlY29tbWVuZGVkIHRvIHVzZSBOb2RlLmpzIDEyLjE3LngsMTIuMTgueCBvciAxMi4xOS54IGR1ZSB0byBhbiBbaHR0cDIgYnVnXShodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvaXNzdWVzLzI4MDAxKS4KCiMjIERldmVsb3BtZW50CgoqIGNsb25lIHRoZSByZXBvc2l0b3J5CiogYG5wbSBpYCBpbiB0aGUgdG9wIGxldmVsIGRpcmVjdG9yeQoqIGBucHggbGVybmEgYm9vdHN0cmFwYAoKUGxlYXNlIHRyeSBhbmQga2VlcCBjb21taXRzIHJlbGF0ZWQgdG8gYSBzaW5nbGUgcGFja2FnZSBvciBwaWVjZSBvZiBmdW5jdGlvbmFsaXR5LiBQbGVhc2UgcmV2aWV3IHRoZQpbQ09OVFJJQlVUSU5HLm1kXShDT05UUklCVVRJTkcubWQpIGZvciBhZGRpdGlvbmFsIGRldGFpbHMuCgojIyBTdXBwb3J0aW5nIGRldmVsb3BtZW50CgoqIFtBUElzLmd1cnUgb3Blbi1jb2xsZWN0aXZlXShodHRwczovL29wZW5jb2xsZWN0aXZlLmNvbS9vcGVuYXBpLWRpcmVjdG9yeSkKKiBbTGlub2RlIFZQUyByZWZlcnJhbCBsaW5rXShodHRwczovL3d3dy5saW5vZGUuY29tLz9yPTU3MzRiZTQ2N2NjNTAxYjIzMjY3Y2Y2NmQ0NTFiYzMzOTA0MmRkZmEpCg==
        readmeEtag: '"2204f5a47e36a0f28553f57b55877f2baf4cfd11734d07f0910c878360eb99b6"'
        readmeLastModified: Wed, 07 Jul 2021 12:13:38 GMT
        description: >-
          Convert Swagger 2.0 definitions to OpenAPI 3.0 and
          resolve/validate/lint
        created: '2016-10-20T13:17:42Z'
        updated: '2022-04-21T02:22:25Z'
        language: JavaScript
        archived: false
        stars: 598
        watchers: 598
        forks: 107
        owner: Mermade
        logo: https://avatars.githubusercontent.com/u/15950345?v=4
        license: BSD-3-Clause
        repoEtag: '"3de6c4e4a845a05559726850a966eb738a97aab9be43351bdd9a8df3faf663a1"'
        repoLastModified: Thu, 21 Apr 2022 02:22:25 GMT
      foundInMaster: true
      homepage: https://github.com/mermade/swagger2openapi
      id: 48c5505c3c024f64480d123af42fdd97
      swagger: 'Yes'
      version30: 'Yes'
      version31: 'No'
      moreDetails: true
      owner: Mermade
      stars: 598
      watchers: 598
      forks: 107
      created: '2016-10-20T13:17:42Z'
      lastUpdated: '2022-04-21T02:22:25Z'
      archived: 'No'
    - source: IMPLEMENTATIONS.md
      name: Microsoft.OpenApi.net
      homepage: https://github.com/microsoft/openapi.net/
      language: C#
      source_description: C# based parser with definition validation and migration support from V2
      category:
        - Low-level Tooling
        - Parsers
        - All
      foundInMaster: true
      repository: https://github.com/microsoft/openapi.net/
      repositoryMetadata:
        base64Readme: >-
          IVtDYXRlZ29yeSBvdmVydmlldyBzY3JlZW5zaG90XShkb2NzL2ltYWdlcy9vYWluZXQucG5nICJNaWNyb3NvZnQgKyBPcGVuQVBJID0gTG92ZSIpDQoNCiMgT3BlbkFQSS5ORVQgDQoNCnxQYWNrYWdlfE51Z2V0fA0KfC0tfC0tfA0KfE1vZGVscyBhbmQgV3JpdGVyc3xbIVtudWdldF0oaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9udWdldC92L01pY3Jvc29mdC5PcGVuQXBpLnN2ZyldKGh0dHBzOi8vd3d3Lm51Z2V0Lm9yZy9wYWNrYWdlcy9NaWNyb3NvZnQuT3BlbkFwaS8pIHwNCnxSZWFkZXJzIHwgWyFbbnVnZXRdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vbnVnZXQvdi9NaWNyb3NvZnQuT3BlbkFwaS5SZWFkZXJzLnN2ZyldKGh0dHBzOi8vd3d3Lm51Z2V0Lm9yZy9wYWNrYWdlcy9NaWNyb3NvZnQuT3BlbkFwaS5SZWFkZXJzLykgfA0KDQoNClRoZSAqKk9wZW5BUEkuTkVUKiogU0RLIGNvbnRhaW5zIGEgdXNlZnVsIG9iamVjdCBtb2RlbCBmb3IgT3BlbkFQSSBkb2N1bWVudHMgaW4gLk5FVCBhbG9uZyB3aXRoIGNvbW1vbiBzZXJpYWxpemVycyB0byBleHRyYWN0IHJhdyBPcGVuQVBJIEpTT04gYW5kIFlBTUwgZG9jdW1lbnRzIGZyb20gdGhlIG1vZGVsLg0KDQoqKlNlZSBtb3JlIGluZm9ybWF0aW9uIG9uIHRoZSBPcGVuQVBJIHNwZWNpZmljYXRpb24gYW5kIGl0cyBoaXN0b3J5IGhlcmU6IDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9wZW5hcGlzLm9yZyI+T3BlbkFQSSBJbml0aWF0aXZlPC9hPioqDQoNClByb2plY3QgT2JqZWN0aXZlcyANCg0KLSBQcm92aWRlIGEgc2luZ2xlIHNoYXJlZCBvYmplY3QgbW9kZWwgaW4gLk5FVCBmb3IgT3BlbkFQSSBkZXNjcmlwdGlvbnMuDQotIEluY2x1ZGUgdGhlIG1vc3QgcHJpbWl0aXZlIFJlYWRlciBmb3IgaW5nZXN0aW5nIE9wZW5BUEkgSlNPTiBhbmQgWUFNTCBkb2N1bWVudHMgaW4gYm90aCBWMiBhbmQgVjMgZm9ybWF0cy4NCi0gUHJvdmlkZSBPcGVuQVBJIGRlc2NyaXB0aW9uIHdyaXRlcnMgZm9yIGJvdGggVjIgYW5kIFYzIHNwZWNpZmljYXRpb24gZm9ybWF0cy4NCi0gRW5hYmxlIGRldmVsb3BlcnMgdG8gY3JlYXRlIFJlYWRlcnMgdGhhdCB0cmFuc2xhdGUgZGlmZmVyZW50IGRhdGEgZm9ybWF0cyBpbnRvIE9wZW5BUEkgZGVzY3JpcHRpb25zLiANCg0KIyBJbnN0YWxsYXRpb24NCg0KLSBJbnN0YWxsIGNvcmUgTnVnZXQgcGFja2FnZSBgTWljcm9zb2Z0Lk9wZW5BcGlgDQotIEluc3RhbGwgcmVhZGVycyBOdWdldCBwYWNrYWdlIGBNaWNyb3NvZnQuT3BlbkFwaS5SZWFkZXJzYA0KDQojIFByb2Nlc3NvcnMNClRoZSBPcGVuQVBJLk5FVCBwcm9qZWN0IGhvbGRzIHRoZSBiYXNlIG9iamVjdCBtb2RlbCBmb3IgcmVwcmVzZW50aW5nIE9wZW5BUEkgZG9jdW1lbnRzIGFzIC5ORVQgb2JqZWN0cy4gU29tZSBkZXZlbG9wZXJzIGhhdmUgZm91bmQgdGhlIG5lZWQgdG8gd3JpdGUgcHJvY2Vzc29ycyB0aGF0IGNvbnZlcnQgb3RoZXIgZGF0YSBmb3JtYXRzIGludG8gdGhpcyBPcGVuQVBJLk5FVCBvYmplY3QgbW9kZWwuIFdlJ2QgbGlrZSB0byBjdXJhdGUgdGhhdCBsaXN0IG9mIHByb2Nlc3NvcnMgaW4gdGhpcyBzZWN0aW9uIG9mIHRoZSByZWFkbWUuIA0KDQpUaGUgYmFzZSBKU09OIGFuZCBZQU1MIHByb2Nlc3NvcnMgYXJlIGJ1aWx0IGludG8gdGhpcyBwcm9qZWN0LiBCZWxvdyBpcyB0aGUgbGlzdCBvZiB0aGUgb3RoZXIgc3VwcG9ydGVkIHByb2Nlc3NvciBwcm9qZWN0cy4NCg0KLSBbKipDIyBDb21tZW50IC8gQW5ub3RhdGlvbiBQcm9jZXNzb3IqKl0oaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9PcGVuQVBJLk5FVC5DU2hhcnBBbm5vdGF0aW9ucykgOiBDb252ZXJ0cyBzdGFuZGFyZCAuTkVUIGFubm90YXRpb25zICggLy8vIGNvbW1lbnRzICkgZW1pdHRlZCBmcm9tIHlvdXIgYnVpbGQgKE1TQnVpbGQuZXhlKSBpbnRvIE9wZW5BUEkuTkVUIGRvY3VtZW50IG9iamVjdC4gDQoNCi0gWyoqT0RhdGEgQ1NETCBQcm9jZXNzb3IqKl0oaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9PcGVuQVBJLk5FVC5PRGF0YSkgOiBDb252ZXJ0cyB0aGUgWE1MIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBFbnRpdHkgRGF0YSBNb2RlbCAoRURNKSBkZXNjcmliaW5nIGFuIE9EYXRhIFNlcnZpY2UgaW50byBPcGVuQVBJLk5FVCBkb2N1bWVudCBvYmplY3QuIA0KDQojIEV4YW1wbGUgVXNhZ2UNCg0KQ3JlYXRpbmcgYW4gT3BlbkFQSSBEb2N1bWVudA0KDQpgYGBDIw0KdmFyIGRvY3VtZW50ID0gbmV3IE9wZW5BcGlEb2N1bWVudA0Kew0KICAgIEluZm8gPSBuZXcgT3BlbkFwaUluZm8NCiAgICB7DQogICAgICAgIFZlcnNpb24gPSAiMS4wLjAiLA0KICAgICAgICBUaXRsZSA9ICJTd2FnZ2VyIFBldHN0b3JlIChTaW1wbGUpIiwNCiAgICB9LA0KICAgIFNlcnZlcnMgPSBuZXcgTGlzdDxPcGVuQXBpU2VydmVyPg0KICAgIHsNCiAgICAgICAgbmV3IE9wZW5BcGlTZXJ2ZXIgeyBVcmwgPSAiaHR0cDovL3BldHN0b3JlLnN3YWdnZXIuaW8vYXBpIiB9DQogICAgfSwNCiAgICBQYXRocyA9IG5ldyBPcGVuQXBpUGF0aHMNCiAgICB7DQogICAgICAgIFsiL3BldHMiXSA9IG5ldyBPcGVuQXBpUGF0aEl0ZW0NCiAgICAgICAgew0KICAgICAgICAgICAgT3BlcmF0aW9ucyA9IG5ldyBEaWN0aW9uYXJ5PE9wZXJhdGlvblR5cGUsIE9wZW5BcGlPcGVyYXRpb24+DQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgW09wZXJhdGlvblR5cGUuR2V0XSA9IG5ldyBPcGVuQXBpT3BlcmF0aW9uDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBEZXNjcmlwdGlvbiA9ICJSZXR1cm5zIGFsbCBwZXRzIGZyb20gdGhlIHN5c3RlbSB0aGF0IHRoZSB1c2VyIGhhcyBhY2Nlc3MgdG8iLA0KICAgICAgICAgICAgICAgICAgICBSZXNwb25zZXMgPSBuZXcgT3BlbkFwaVJlc3BvbnNlcw0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBbIjIwMCJdID0gbmV3IE9wZW5BcGlSZXNwb25zZQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlc2NyaXB0aW9uID0gIk9LIg0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KfTsNCmBgYA0KDQpSZWFkaW5nIGFuZCB3cml0aW5nIGEgT3BlbkFQSSBkZXNjcmlwdGlvbg0KDQpgYGBDIw0KdmFyIGh0dHBDbGllbnQgPSBuZXcgSHR0cENsaWVudA0Kew0KICAgIEJhc2VBZGRyZXNzID0gbmV3IFVyaSgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL09BSS9PcGVuQVBJLVNwZWNpZmljYXRpb24vIikNCn07DQoNCnZhciBzdHJlYW0gPSBhd2FpdCBodHRwQ2xpZW50LkdldFN0cmVhbUFzeW5jKCJtYXN0ZXIvZXhhbXBsZXMvdjMuMC9wZXRzdG9yZS55YW1sIik7DQoNCi8vIFJlYWQgVjMgYXMgWUFNTA0KdmFyIG9wZW5BcGlEb2N1bWVudCA9IG5ldyBPcGVuQXBpU3RyZWFtUmVhZGVyKCkuUmVhZChzdHJlYW0sIG91dCB2YXIgZGlhZ25vc3RpYyk7DQoNCi8vIFdyaXRlIFYyIGFzIEpTT04NCnZhciBvdXRwdXRTdHJpbmcgPSBvcGVuQXBpRG9jdW1lbnQuU2VyaWFsaXplKE9wZW5BcGlTcGVjVmVyc2lvbi5PcGVuQXBpMl8wLCBPcGVuQXBpRm9ybWF0Lkpzb24pOw0KDQpgYGANCg0KIyBCdWlsZCBTdGF0dXMNCg0KfCoqbWFzdGVyKip8DQp8LS18DQp8WyFbQnVpbGQgc3RhdHVzXShodHRwczovL2NpLmFwcHZleW9yLmNvbS9hcGkvcHJvamVjdHMvc3RhdHVzLzlsNmhseTN2amV1MHRtdHgvYnJhbmNoL21hc3Rlcj9zdmc9dHJ1ZSldKGh0dHBzOi8vY2kuYXBwdmV5b3IuY29tL3Byb2plY3QvTWljcm9zb2Z0T3BlbkFQSU5FVEFkbWluL29wZW5hcGktbmV0LTU0ZTdpL2JyYW5jaC9tYXN0ZXIpfA0KDQojIENvbnRyaWJ1dGluZw0KDQpUaGlzIHByb2plY3Qgd2VsY29tZXMgY29udHJpYnV0aW9ucyBhbmQgc3VnZ2VzdGlvbnMuICBNb3N0IGNvbnRyaWJ1dGlvbnMgcmVxdWlyZSB5b3UgdG8gYWdyZWUgdG8gYQ0KQ29udHJpYnV0b3IgTGljZW5zZSBBZ3JlZW1lbnQgKENMQSkgZGVjbGFyaW5nIHRoYXQgeW91IGhhdmUgdGhlIHJpZ2h0IHRvLCBhbmQgYWN0dWFsbHkgZG8sIGdyYW50IHVzDQp0aGUgcmlnaHRzIHRvIHVzZSB5b3VyIGNvbnRyaWJ1dGlvbi4gRm9yIGRldGFpbHMsIHZpc2l0IGh0dHBzOi8vY2xhLm1pY3Jvc29mdC5jb20uDQoNCldoZW4geW91IHN1Ym1pdCBhIHB1bGwgcmVxdWVzdCwgYSBDTEEtYm90IHdpbGwgYXV0b21hdGljYWxseSBkZXRlcm1pbmUgd2hldGhlciB5b3UgbmVlZCB0byBwcm92aWRlDQphIENMQSBhbmQgZGVjb3JhdGUgdGhlIFBSIGFwcHJvcHJpYXRlbHkgKGUuZy4sIGxhYmVsLCBjb21tZW50KS4gU2ltcGx5IGZvbGxvdyB0aGUgaW5zdHJ1Y3Rpb25zDQpwcm92aWRlZCBieSB0aGUgYm90LiBZb3Ugd2lsbCBvbmx5IG5lZWQgdG8gZG8gdGhpcyBvbmNlIGFjcm9zcyBhbGwgcmVwb3MgdXNpbmcgb3VyIENMQS4NCg0KVGhpcyBwcm9qZWN0IGhhcyBhZG9wdGVkIHRoZSBbTWljcm9zb2Z0IE9wZW4gU291cmNlIENvZGUgb2YgQ29uZHVjdF0oaHR0cHM6Ly9vcGVuc291cmNlLm1pY3Jvc29mdC5jb20vY29kZW9mY29uZHVjdC8pLg0KRm9yIG1vcmUgaW5mb3JtYXRpb24gc2VlIHRoZSBbQ29kZSBvZiBDb25kdWN0IEZBUV0oaHR0cHM6Ly9vcGVuc291cmNlLm1pY3Jvc29mdC5jb20vY29kZW9mY29uZHVjdC9mYXEvKSBvcg0KY29udGFjdCBbb3BlbmNvZGVAbWljcm9zb2Z0LmNvbV0obWFpbHRvOm9wZW5jb2RlQG1pY3Jvc29mdC5jb20pIHdpdGggYW55IGFkZGl0aW9uYWwgcXVlc3Rpb25zIG9yIGNvbW1lbnRzLg0KDQpUbyBwcm92aWRlIGZlZWRiYWNrIGFuZCBhc2sgcXVlc3Rpb25zIHlvdSBjYW4gdXNlIFN0YWNrIE92ZXJmbG93IHdpdGggdGhlIFtPcGVuQVBJLk5FVF0oaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvdGFnZ2VkL29wZW5hcGkubmV0KSB0YWcgb3IgdXNlIHRoZSBPcGVuQVBJLk5FVCBTbGFjayBjaGFubmVsIHdoaWNoIHlvdSBjYW4gam9pbiBieSByZWdpc3RlcmluZyBmb3IgdGhlIEhUVFAgQVBJcyB0ZWFtIGF0IGh0dHA6Ly9zbGFjay5odHRwYXBpcy5jb20uDQo=
        readmeEtag: '"b7bde59273ed6cbe369b619531bdf02db228fb99eeac268ff8fb6155b389f9b6"'
        readmeLastModified: Tue, 19 Apr 2022 23:46:22 GMT
        description: >-
          The OpenAPI.NET SDK contains a useful object model for OpenAPI
          documents in .NET along with common serializers to extract raw OpenAPI
          JSON and YAML documents from the model.
        created: '2017-07-14T00:24:14Z'
        updated: '2022-04-29T05:14:02Z'
        language: C#
        archived: false
        stars: 960
        watchers: 960
        forks: 158
        owner: microsoft
        logo: https://avatars.githubusercontent.com/u/6154722?v=4
        license: MIT
        repoEtag: '"c4019337a54cfa5e1cd48985351e388572718a94a2bf493b308b99866c97cf07"'
        repoLastModified: Fri, 29 Apr 2022 05:14:02 GMT
      id: f3215034d64cfcbcc28a4bdb0205a075
      swagger: 'No'
      version30: 'No'
      version31: 'No'
      moreDetails: true
      owner: microsoft
      stars: 960
      watchers: 960
      forks: 158
      created: '2017-07-14T00:24:14Z'
      lastUpdated: '2022-04-29T05:14:02Z'
      archived: 'No'
    - source:
        - IMPLEMENTATIONS.md
        - https://openapi.tools/
      name:
        - odata-openapi
        - OData OpenAPI
      homepage: https://github.com/oasis-tcs/odata-openapi
      language: XSLT
      source_description:
        - OData 4.0 to OpenAPI 3.0.0 converter
        - OData 4.0, 3.0, and 2.0 to OpenAPI v3.1, v3.0, and v2.0 converter
      category:
        - Low-level Tooling
        - Converters
        - All
      repository: https://github.com/oasis-tcs/odata-openapi
      v2: true
      v3: true
      repositoryMetadata:
        base64Readme: >-
          PGRpdj4KPGgyPlJFQURNRTwvaDI+Cgo8cD5NZW1iZXJzIG9mIHRoZSA8YSBocmVmPSJodHRwczovL3d3dy5vYXNpcy1vcGVuLm9yZy9jb21taXR0ZWVzL29kYXRhLyI+T0FTSVMgT3BlbiBEYXRhIFByb3RvY29sIChPRGF0YSkgVGVjaG5pY2FsIENvbW1pdHRlZTwvYT4gY3JlYXRlIGFuZCBtYW5hZ2UgdGVjaG5pY2FsIGNvbnRlbnQgaW4gdGhpcyBUQyBHaXRIdWIgcmVwb3NpdG9yeSAoIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9vYXNpcy10Y3Mvb2RhdGEtb3BlbmFwaSI+aHR0cHM6Ly9naXRodWIuY29tL29hc2lzLXRjcy9vZGF0YS1vcGVuYXBpPC9hPiApIGFzIHBhcnQgb2YgdGhlIFRDJ3MgY2hhcnRlcmVkIHdvcmsgKDxpPmkuZS48L2k+LCB0aGUgcHJvZ3JhbSBvZiB3b3JrIGFuZCBkZWxpdmVyYWJsZXMgZGVzY3JpYmVkIGluIGl0cyA8YSBocmVmPSJodHRwczovL3d3dy5vYXNpcy1vcGVuLm9yZy9jb21taXR0ZWVzL29kYXRhL2NoYXJ0ZXIucGhwIj5jaGFydGVyPC9hPikuPC9wPgoKPHA+T0FTSVMgVEMgR2l0SHViIHJlcG9zaXRvcmllcywgYXMgZGVzY3JpYmVkIGluIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9hc2lzLW9wZW4ub3JnL3Jlc291cmNlcy90Y2FkbWluL2dpdGh1Yi1yZXBvc2l0b3JpZXMtZm9yLW9hc2lzLXRjLW1lbWJlcnMtY2hhcnRlcmVkLXdvcmsiPkdpdEh1YiBSZXBvc2l0b3JpZXMgZm9yIE9BU0lTIFRDIE1lbWJlcnMnIENoYXJ0ZXJlZCBXb3JrPC9hPiwgYXJlIGdvdmVybmVkIGJ5IHRoZSBPQVNJUyA8YSBocmVmPSJodHRwczovL3d3dy5vYXNpcy1vcGVuLm9yZy9wb2xpY2llcy1ndWlkZWxpbmVzL3RjLXByb2Nlc3MiPlRDIFByb2Nlc3M8L2E+LCA8YSBocmVmPSJodHRwczovL3d3dy5vYXNpcy1vcGVuLm9yZy9wb2xpY2llcy1ndWlkZWxpbmVzL2lwciI+SVBSIFBvbGljeTwvYT4sIGFuZCBvdGhlciBwb2xpY2llcywgc2ltaWxhciB0byBUQyBXaWtpcywgVEMgSklSQSBpc3N1ZXMgdHJhY2tpbmcgaW5zdGFuY2VzLCBUQyBTVk4vU3VidmVyc2lvbiByZXBvc2l0b3JpZXMsIGV0Yy4gIFdoaWxlIHRoZXkgbWFrZSB1c2Ugb2YgcHVibGljIEdpdEh1YiByZXBvc2l0b3JpZXMsIHRoZXNlIFRDIEdpdEh1YiByZXBvc2l0b3JpZXMgYXJlIGRpc3RpbmN0IGZyb20gPGEgaHJlZj0iaHR0cHM6Ly93d3cub2FzaXMtb3Blbi5vcmcvcmVzb3VyY2VzL29wZW4tcmVwb3NpdG9yaWVzIj5PQVNJUyBPcGVuIFJlcG9zaXRvcmllczwvYT4sIHdoaWNoIGFyZSB1c2VkIGZvciBkZXZlbG9wbWVudCBvZiBvcGVuIHNvdXJjZSA8YSBocmVmPSJodHRwczovL3d3dy5vYXNpcy1vcGVuLm9yZy9yZXNvdXJjZXMvb3Blbi1yZXBvc2l0b3JpZXMvbGljZW5zZXMiPmxpY2Vuc2VkPC9hPiBjb250ZW50LjwvcD4KPC9kaXY+Cgo8ZGl2Pgo8aDM+RGVzY3JpcHRpb248L2gzPgoKPHA+VGhlIHB1cnBvc2Ugb2YgdGhpcyByZXBvc2l0b3J5IGlzIHRvIHN1cHBvcnQgZGV2ZWxvcG1lbnQgb2YgdG9vbHMgZm9yIHByb2R1Y2luZyA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vT0FJL09wZW5BUEktU3BlY2lmaWNhdGlvbiI+T3BlbkFQSTwvYT4gZGVzY3JpcHRpb25zIGZvciBPRGF0YSBzZXJ2aWNlcy48L3A+CjxwPlBsYW5uZWQgd29yayBpdGVtcyBpbmNsdWRlOgo8dWw+CjxsaT5jb252ZXJ0IE9EYXRhIENTREwgSlNPTiBvciBPRGF0YSBDU0RMIFhNTCB0byBPcGVuQVBJIEpTT048L2xpPgo8bGk+ZXhhbXBsZSBYTUwgZmlsZXM8L2xpPgo8bGk+ZXhhbXBsZSBvcGVuYXBpLmpzb24gZmlsZXM8L2xpPgo8bGk+ZXhhbXBsZSBmaWxlcyBmb3IgdGhlIGxpdmUgb2RhdGEub3JnIHNlcnZpY2VzPC9saT4KPC91bD48L3A+Cgo8L2Rpdj4KCjxkaXY+CjxoMz5Db250cmlidXRpb25zPC9oMz4KPHA+QXMgc3RhdGVkIGluIHRoaXMgcmVwb3NpdG9yeSdzIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9vYXNpcy10Y3Mvb2RhdGEtb3BlbmFwaS9ibG9iL21hc3Rlci9DT05UUklCVVRJTkcubWQiPkNPTlRSSUJVVElORyBmaWxlPC9hPiwgY29udHJpYnV0b3JzIHRvIHRoaXMgcmVwb3NpdG9yeSBhcmUgZXhwZWN0ZWQgdG8gYmUgTWVtYmVycyBvZiB0aGUgT0FTSVMgT0RhdGEgVEMsIGZvciBhbnkgc3Vic3RhbnRpdmUgY2hhbmdlIHJlcXVlc3RzLiAgQW55b25lIHdpc2hpbmcgdG8gY29udHJpYnV0ZSB0byB0aGlzIEdpdEh1YiBwcm9qZWN0IGFuZCA8YSBocmVmPSJodHRwczovL3d3dy5vYXNpcy1vcGVuLm9yZy9qb2luL3BhcnRpY2lwYXRpb24taW5zdHJ1Y3Rpb25zIj5wYXJ0aWNpcGF0ZTwvYT4gaW4gdGhlIFRDJ3MgdGVjaG5pY2FsIGFjdGl2aXR5IGlzIGludml0ZWQgdG8gam9pbiBhcyBhbiBPQVNJUyBUQyBNZW1iZXIuICBQdWJsaWMgZmVlZGJhY2sgaXMgYWxzbyBhY2NlcHRlZCwgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9hc2lzLW9wZW4ub3JnL3BvbGljaWVzLWd1aWRlbGluZXMvaXByI2FwcGVuZGl4YSI+T0FTSVMgRmVlZGJhY2sgTGljZW5zZTwvYT4uPC9wPgo8L2Rpdj4KCjxkaXY+CjxoMz5MaWNlbnNpbmc8L2gzPgo8cD5QbGVhc2Ugc2VlIHRoZSA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vb2FzaXMtdGNzL29kYXRhLW9wZW5hcGkvYmxvYi9tYXN0ZXIvTElDRU5TRS5tZCI+TElDRU5TRTwvYT4gZmlsZSBmb3IgZGVzY3JpcHRpb24gb2YgdGhlIGxpY2Vuc2UgdGVybXMgYW5kIE9BU0lTIHBvbGljaWVzIGFwcGxpY2FibGUgdG8gdGhlIFRDJ3Mgd29yayBpbiB0aGlzIEdpdEh1YiBwcm9qZWN0LiBDb250ZW50IGluIHRoaXMgcmVwb3NpdG9yeSBpcyBpbnRlbmRlZCB0byBiZSBwYXJ0IG9mIHRoZSBPRGF0YSBUQydzIHBlcm1hbmVudCByZWNvcmQgb2YgYWN0aXZpdHksIHZpc2libGUgYW5kIGZyZWVseSBhdmFpbGFibGUgZm9yIGFsbCB0byB1c2UsIHN1YmplY3QgdG8gYXBwbGljYWJsZSBPQVNJUyBwb2xpY2llcywgYXMgcHJlc2VudGVkIGluIHRoZSByZXBvc2l0b3J5IDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9vYXNpcy10Y3Mvb2RhdGEtb3BlbmFwaS9ibG9iL21hc3Rlci9MSUNFTlNFLm1kIj5MSUNFTlNFPC9hPiBmaWxlLjwvcD4KPC9kaXY+CgoKPGgzPkZ1cnRoZXIgRGVzY3JpcHRpb24gb2YgdGhpcyBSZXBvc2l0b3J5PC9oMz4KClRoZSBPRGF0YSBUQyBoYXMgcHVibGlzaGVkIHRoZSBbT0RhdGEgdG8gT3BlbkFQSSBNYXBwaW5nIFZlcnNpb24gMS4wXShodHRwOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy9vZGF0YS9vZGF0YS1vcGVuYXBpL3YxLjAvb2RhdGEtb3BlbmFwaS12MS4wLmh0bWwpLCBhIHJlY29tbWVuZGF0aW9uIG9uIGhvdyB0byBjcmVhdGUgT3BlbkFQSSBkZXNjcmlwdGlvbnMgZm9yIE9EYXRhIHNlcnZpY2VzLiBUaGlzIHByb2plY3QgY29udGFpbnMgdHdvIHByb29mLW9mLWNvbmNlcHQgaW1wbGVtZW50YXRpb25zIG9mIHRoYXQgbWFwcGluZywgW29uZSB1c2luZyBKYXZhU2NyaXB0XShsaWIpLCBhbmQgW29uZSB1c2luZyBYU0xUXSh0b29scykuCgpUaGUgW2BleGFtcGxlc2AgZm9sZGVyXShleGFtcGxlcykgY29udGFpbnMgW09wZW5BUEkgMy4wLjJdKGh0dHBzOi8vZ2l0aHViLmNvbS9PQUkvT3BlbkFQSS1TcGVjaWZpY2F0aW9uKSBkZXNjcmlwdGlvbnMgdGhhdCBoYXZlIGJlZW4gY3JlYXRlZCBmcm9tIHRoZSBYTUwgYCRtZXRhZGF0YWAgZG9jdW1lbnRzIG9mIGxpdmUgYW5kIGV4YW1wbGUgT0RhdGEgc2VydmljZXMgd2l0aCB0aGVzZSBwcm9vZi1vZi1jb25jZXB0IGltcGxlbWVudGF0aW9ucy4gCgpUaGUgZW50aXR5LXJlbGF0aW9uc2hpcCBkaWFncmFtcyB2aXN1YWxpemluZyB0aGUgcmVzb3VyY2UgbW9kZWxzIG9mIGVhY2ggc2VydmljZSBhcmUgZ2VuZXJhdGVkIG9uLXRoZS1mbHkgd2l0aCBbeVVNTF0oaHR0cDovL3l1bWwubWUvKS4KCk9wZW5BUEkgZGVzY3JpcHRpb25zIGZvciBsaXZlIGV4YW1wbGUgT0RhdGEgc2VydmljZXMgYXQgW3d3dy5vZGF0YS5vcmddKGh0dHA6Ly93d3cub2RhdGEub3JnLykKIC0gW1RyaXBQaW4gKHJlYWQvd3JpdGUpXShodHRwOi8vcGV0c3RvcmUuc3dhZ2dlci5pby8/dXJsPWh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9vYXNpcy10Y3Mvb2RhdGEtb3BlbmFwaS9tYXN0ZXIvZXhhbXBsZXMvVHJpcFBpbi5vcGVuYXBpMy5qc29uKQogLSBbU2ltcGxlIHJlYWQvd3JpdGUgc2VydmljZV0oaHR0cDovL3BldHN0b3JlLnN3YWdnZXIuaW8vP3VybD1odHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vb2FzaXMtdGNzL29kYXRhLW9wZW5hcGkvbWFzdGVyL2V4YW1wbGVzL2V4YW1wbGUub3BlbmFwaTMuanNvbikKIC0gW05vcnRod2luZCAocmVhZCldKGh0dHA6Ly9wZXRzdG9yZS5zd2FnZ2VyLmlvLz91cmw9aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL29hc2lzLXRjcy9vZGF0YS1vcGVuYXBpL21hc3Rlci9leGFtcGxlcy9Ob3J0aHdpbmQub3BlbmFwaTMuanNvbikKCk9wZW5BUEkgZGVzY3JpcHRpb25zIGZvciBPRGF0YSBzZXJ2aWNlcyB0aGF0IHJlZmVyZW5jZSBlYWNoIG90aGVyIChjcm9zcy1zZXJ2aWNlIHJlZmVyZW5jZXMpCiAtIFtQZW9wbGVdKGh0dHA6Ly9wZXRzdG9yZS5zd2FnZ2VyLmlvLz91cmw9aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL29hc2lzLXRjcy9vZGF0YS1vcGVuYXBpL21hc3Rlci9leGFtcGxlcy9QZW9wbGUub3BlbmFwaTMuanNvbikKIC0gW1Byb2R1Y3RzXShodHRwOi8vcGV0c3RvcmUuc3dhZ2dlci5pby8/dXJsPWh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9vYXNpcy10Y3Mvb2RhdGEtb3BlbmFwaS9tYXN0ZXIvZXhhbXBsZXMvUHJvZHVjdHMub3BlbmFwaTMuanNvbikKCjxkaXY+CjxoMz5Db250YWN0PC9oMz4KPHA+UGxlYXNlIHNlbmQgcXVlc3Rpb25zIG9yIGNvbW1lbnRzIGFib3V0IDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9hc2lzLW9wZW4ub3JnL3Jlc291cmNlcy90Y2FkbWluL2dpdGh1Yi1yZXBvc2l0b3JpZXMtZm9yLW9hc2lzLXRjLW1lbWJlcnMtY2hhcnRlcmVkLXdvcmsiPk9BU0lTIFRDIEdpdEh1YiByZXBvc2l0b3JpZXM8L2E+IHRvIHRoZSBPQVNJUyA8YSBocmVmPSJtYWlsdG86dGMtYWRtaW5Ab2FzaXMtb3Blbi5vcmciPlRDIEFkbWluaXN0cmF0b3I8L2E+LiAgRm9yIHF1ZXN0aW9ucyBhYm91dCBjb250ZW50IGluIHRoaXMgcmVwb3NpdG9yeSwgcGxlYXNlIGNvbnRhY3QgdGhlIFRDIENoYWlyIG9yIENvLUNoYWlycyBhcyBsaXN0ZWQgb24gdGhlIHRoZSBPRGF0YSBUQydzIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9hc2lzLW9wZW4ub3JnL2NvbW1pdHRlZXMvb2RhdGEvIj5ob21lIHBhZ2U8L2E+LjwvcD4KPC9kaXY+Cg==
        readmeEtag: '"4688bebb62d8eac0d103d205eba4240046456df2c542b2c463db0700539af0db"'
        readmeLastModified: Mon, 11 Apr 2022 07:17:27 GMT
        description: >-
          OASIS OData TC: Tools for producing API descriptions for OData
          services that adhere to the OpenAPI Specification
        created: '2016-11-17T21:11:22Z'
        updated: '2022-04-13T09:09:28Z'
        language: XSLT
        archived: false
        stars: 135
        watchers: 135
        forks: 59
        owner: oasis-tcs
        logo: https://avatars.githubusercontent.com/u/20116735?v=4
        license: NOASSERTION
        repoEtag: '"f50941e39f8085571f1608b9df2abe800fba17648a9d29bd670c0468d4a06c70"'
        repoLastModified: Wed, 13 Apr 2022 09:09:28 GMT
      foundInMaster: true
      v3_1: true
      id: 9039f84e8e8b63849cbf15578564033e
      swagger: 'Yes'
      version30: 'Yes'
      version31: 'Yes'
      moreDetails: true
      owner: oasis-tcs
      stars: 135
      watchers: 135
      forks: 59
      created: '2016-11-17T21:11:22Z'
      lastUpdated: '2022-04-13T09:09:28Z'
      archived: 'No'
    - source:
        - IMPLEMENTATIONS.md
        - https://openapi.tools/
      name: openapi3_parser
      homepage: https://github.com/kevindew/openapi3_parser
      language: Ruby
      source_description:
        - >-
          A Ruby implementation of parser and validator for the OpenAPI 3
          Specification
        - >-
          A Ruby implementation of parser and validator for the OpenAPI 3
          Specification.
      category:
        - Low-level Tooling
        - Parsers
        - All
      repository: https://github.com/kevindew/openapi3_parser
      v2: false
      v3: true
      repositoryMetadata:
        base64Readme: >-
          IyBPcGVuQVBJIDMgUGFyc2VyCgpbIVtCdWlsZCBTdGF0dXNdKGh0dHBzOi8vdHJhdmlzLWNpLm9yZy9rZXZpbmRldy9vcGVuYXBpM19wYXJzZXIuc3ZnP2JyYW5jaD1tYWluKV0oaHR0cHM6Ly90cmF2aXMtY2kub3JnL2tldmluZGV3L29wZW5hcGkzX3BhcnNlcikKClRoaXMgYSBSdWJ5IGJhc2VkIHBhcnNlci92YWxpZGF0b3IgZm9yIFtPcGVuQVBJIDNdW29wZW5hcGktM10uIEl0IGlzIHVzZWQgdG8KY29udmVydCBhbiBPcGVuQVBJIGZpbGUgKGNhbiBiZSBhIGxvY2FsIGZpbGUsIGEgVVJMLCBhIHN0cmluZyBvciBldmVuIGEgUnVieQpoYXNoKSBpbnRvIGFuIG9iamVjdCBncmFwaCB3aXRoIGEgc2ltcGxlIEFQSSB0aGF0IGZvbGxvd3MgdGhlIFtPcGVuQVBJCnNwZWNpZmljYXRpb25dW29wZW5hcGktMy1zcGVjXS4KCkJhc2ljIGV4YW1wbGU6CgpgYGBydWJ5CnJlcXVpcmUgIm9wZW5hcGkzX3BhcnNlciIKCmRvY3VtZW50ID0gT3BlbmFwaTNQYXJzZXIubG9hZF91cmwoImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9PQUkvT3BlbkFQSS1TcGVjaWZpY2F0aW9uL21hc3Rlci9leGFtcGxlcy92My4wL3BldHN0b3JlLnlhbWwiKQoKZG9jdW1lbnQucGF0aHNbIi9wZXRzIl0uZ2V0LnN1bW1hcnkKIyA9PiAiTGlzdCBhbGwgcGV0cyIKYGBgCgpJdCBhaW1zIHRvIHN1cHBvcnQgMTAwJSBvZiB0aGUgT3BlbkFQSSAzLjAgc3BlY2lmaWNhdGlvbiwgd2l0aCBrZXkgZmVhdHVyZXMKYmVpbmc6CgotIFN1cHBvcnRzIGxvYWRpbmcgYSBzcGVjaWZpY2F0aW9uIGJ5IHBhdGggdG8gYSBmaWxlLCBVUkwsIFJ1YnkgZmlsZSBvYmplY3RzLAogIGFuZCBzdHJpbmdzIGluIFlBTUwgYW5kIEpTT04gZm9ybWF0cywgaXQgZXZlbiBzdXBwb3J0cyBsb2FkaW5nIHZpYSBhIFJ1YnkgaGFzaDsKLSBTdXBwb3J0IGZvciBsb2FkaW5nIHJlZmVyZW5jZXMgZnJvbSBleHRlcm5hbCBmaWxlcyBpbmNsdWRpbmcgVVJMczsKLSBIYW5kbGVzIHJlY3Vyc2l2ZSByZWZlcmVuY2VzOwotIEFsbCBvZiBPcGVuQVBJIHNwZWNpZmljYXRpb24gbWFwcGVkIHRvIFJ1Ynkgb2JqZWN0cywgcHJvdmlkaW5nIGEgbmF0dXJhbAogIFJ1YnkgaW50ZXJmYWNlIHRoYXQgbWFwcyBjbGVhcmx5IHRvIHRoZSBzcGVjaWZpY2F0aW9uOwotIE9wZW5BUEkgZmlsZXMgdmFsaWRhdGVkIHdpdGggYSBzaW1wbGUgQVBJIHRvIHF1aWNrbHkgYW5kIHNpbXBseSBzZWUgYWxsCiAgcHJvYmxlbXMgd2l0aCBhIGZpbGUKLSBCdWlsdC1pbiBNYXJrZG93biB0byBIVE1MIGNvbnZlcnNpb247Ci0gRG9jdW1lbnRhdGlvbiBmb3IgdGhlIEFQSSB0byBuYXZpZ2F0ZSB0aGUgT3BlbkFQSSBub2RlcyBpcyBhdmFpbGFibGUgb24KICBbcnVieWRvYy5pbmZvXVtkb2NzXS4KCkkndmUgd3JvdGUgYSBibG9nIHBvc3QgcmVmbGVjdGluZyBvbiB0aGUgZGVjaXNpb25zIGludm9sdmVkIGluIGJ1aWxkaW5nIHRoaXMKcGFyc2VyIGluIFtIb3cgdG8gd3JpdGUgYW4gT3BlbkFQSSAzIHBhcnNlcl1bYmxvZ10uCgpbb3BlbmFwaS0zXTogaHR0cHM6Ly9naXRodWIuY29tL09BSS9PcGVuQVBJLVNwZWNpZmljYXRpb24KW29wZW5hcGktMy1zcGVjXTogaHR0cHM6Ly9naXRodWIuY29tL09BSS9PcGVuQVBJLVNwZWNpZmljYXRpb24vYmxvYi9tYXN0ZXIvdmVyc2lvbnMvMy4wLjIubWQjc3BlY2lmaWNhdGlvbgpbZG9jc106IGh0dHA6Ly93d3cucnVieWRvYy5pbmZvL2dpdGh1Yi9rZXZpbmRldy9vcGVuYXBpM19wYXJzZXIvT3BlbmFwaTNQYXJzZXIvTm9kZS9PcGVuYXBpCltibG9nXTogaHR0cHM6Ly9rZXZpbmRldy5tZS9wb3N0LzE4ODYxMTQyMzIzMS9ob3ctdG8td3JpdGUtYW4tb3BlbmFwaS0zLXBhcnNlcgoKIyMgVXNhZ2UKCiMjIyBMb2FkaW5nIGEgc3BlY2lmaWNhdGlvbgoKYGBgcnVieQojIGJ5IFVSTApPcGVuYXBpM1BhcnNlci5sb2FkX3VybCgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2tldmluZGV3L29wZW5hcGkzX3BhcnNlci9tYWluL3NwZWMvc3VwcG9ydC9leGFtcGxlcy9wZXRzdG9yZS1leHBhbmRlZC55YW1sIikKCiMgYnkgcGF0aCB0byBmaWxlCk9wZW5hcGkzUGFyc2VyLmxvYWRfZmlsZSgic3BlYy9zdXBwb3J0L2V4YW1wbGVzL3ViZXIueWFtbCIpCgojIGJ5IEZpbGUKT3BlbmFwaTNQYXJzZXIubG9hZChGaWxlLm9wZW4oInNwZWMvc3VwcG9ydC9leGFtcGxlcy91YmVyLnlhbWwiKSkKCiMgYnkgU3RyaW5nCk9wZW5hcGkzUGFyc2VyLmxvYWQoJ3sgIm9wZW5hcGkiOiAiMy4wLjAiLCAiaW5mbyI6IHsgInRpdGxlIjogIkFQSSIsICJ2ZXJzaW9uIjogIjEuMC4wIiB9LCAicGF0aHMiOiB7fSAgfScpCgojIGJ5IEhhc2gKT3BlbmFwaTNQYXJzZXIubG9hZChvcGVuYXBpOiAiMy4wLjAiLCBpbmZvOiB7IHRpdGxlOiAiQVBJIiwgdmVyc2lvbjogIjEuMC4wIiB9LCBwYXRoczoge30pCgpgYGAKCiMjIyBWYWxpZGF0aW5nCgpgYGBydWJ5CmRvY3VtZW50ID0gT3BlbmFwaTNQYXJzZXIubG9hZChvcGVuYXBpOiAiMy4wLjAiLCBpbmZvOiB7fSwgcGF0aHM6IHt9KQpkb2N1bWVudC52YWxpZD8KIyA9PiBmYWxzZQpkb2N1bWVudC5lcnJvcnMKI8KgPT4gT3BlbmFwaTNQYXJzZXI6OlZhbGlkYXRpb246OkVycm9yQ29sbGVjdGlvbihlcnJvcnM6IHsiIy9pbmZvIj0+WyJNaXNzaW5nIHJlcXVpcmVkIGZpZWxkczogdGl0bGUgYW5kIHZlcnNpb24iXX0pCmBgYAoKIyMjIFRyYXZlcnNpbmcKCmBgYHJ1YnkKZG9jdW1lbnQgPSBPcGVuYXBpM1BhcnNlci5sb2FkX3VybCgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2tldmluZGV3L29wZW5hcGkzX3BhcnNlci9tYWluL3NwZWMvc3VwcG9ydC9leGFtcGxlcy9wZXRzdG9yZS1leHBhbmRlZC55YW1sIikKCiMgYnkgb2JqZWN0cwoKZG9jdW1lbnQuaW5mby50ZXJtc19vZl9zZXJ2aWNlCiMgPT4gImh0dHA6Ly9zd2FnZ2VyLmlvL3Rlcm1zLyIKCmRvY3VtZW50LnBhdGhzLmtleXMKIyA9PiBbIi9wZXRzIiwgIi9wZXRzL3tpZH0iXQoKZG9jdW1lbnQucGF0aHNbIi9wZXRzIl0uZ2V0LnBhcmFtZXRlcnMubWFwKCY6bmFtZSkKIyA9PiBbInRhZ3MiLCAibGltaXQiXQoKIyBieSBoYXNoIHN5bnRheAoKZG9jdW1lbnRbImluZm8iXVsidGVybXNPZlNlcnZpY2UiXQo9PiAiaHR0cDovL3N3YWdnZXIuaW8vdGVybXMvIgoKZG9jdW1lbnRbInBhdGhzIl0ua2V5cwojID0+IFsiL3BldHMiLCAiL3BldHMve2lkfSJdCgpkb2N1bWVudFsicGF0aHMiXVsiL3BldHMiXVsiZ2V0Il1bInBhcmFtZXRlcnMiXS5tYXAoJjpuYW1lKQojID0+IFsidGFncyIsICJsaW1pdCJdCgojIGJ5IGEgcGF0aCB0byBhIG5vZGUKZG9jdW1lbnQubm9kZV9hdCgiIy9wYXRocy8lMkZwZXRzL2dldC9vcGVyYXRpb25JZCIpCj0+ICJmaW5kUGV0cyIKCmRvY3VtZW50Lm5vZGVfYXQoIiMvY29tcG9uZW50cy9zY2hlbWFzL1BldC9hbGxPZi8wL3JlcXVpcmVkLzAiKQo9PiAibmFtZSIKCiMgb3IgY29tYmluaW5nCgpkb2N1bWVudC5jb21wb25lbnRzLnNjaGVtYXNbIlBldCJdLm5vZGVfYXQoIiMuLi9OZXdQZXQiKQo9PiBPcGVuYXBpM1BhcnNlcjo6Tm9kZTo6U2NoZW1hKCMvY29tcG9uZW50cy9zY2hlbWFzL05ld1BldCkKYGBgCgpZb3UgY2FuIGxlYXJuIG1vcmUgYWJvdXQgdGhlIEFQSSBvbiBbcnVieWRvYy5pbmZvXVtkb2NzXQoKIyMgSW5zdGFsbGF0aW9uCgpZb3UgY2FuIGluc3RhbGwgdGhpcyBnZW0gaW50byB5b3VyIGJ1bmRsZXIgYXBwbGljYXRpb24gYnkgYWRkaW5nIHRoaXMgbGluZSB0bwp5b3VyIEdlbWZpbGU6CgpgYGAKZ2VtICJvcGVuYXBpM19wYXJzZXIiLCAifj4gMC45LjAiCmBgYAoKYW5kIHRoZW4gcnVubmluZyBgJCBidW5kbGUgaW5zdGFsbGAKCk9yIGluc3RhbGwgdGhlIGdlbSBvbnRvIHlvdXIgbWFjaGluZSB2aWEgYCQgZ2VtIGluc3RhbGwgb3BlbmFwaTNfcGFyc2VyYAoKIyMgU3RhdHVzCgpUaGlzIGlzIGN1cnJlbnRseSBhIHdvcmsgaW4gcHJvZ3Jlc3MgYW5kIHdpbGwgcmVtYWluIHNvIHVudGlsIGl0IHJlYWNoZXMgMS4wLgoKU2VlIFtUT0RPXShUT0RPLm1kKSBmb3IgZGV0YWlscyBvZiB0aGUgZmVhdHVyZXMgc3RpbGwgdG8gaW1wbGVtZW50LgoKIyMgTGljZW5jZQoKW01JVCBMaWNlbnNlXShMSUNFTkNFKQo=
        readmeEtag: '"dd9f9975ac0af5e29d1c5676b1b13cc1850ee64255170754291a0a7912e785ad"'
        readmeLastModified: Mon, 21 Mar 2022 01:53:24 GMT
        description: Open API 3 Parser/Validator for Ruby
        created: '2017-10-19T23:33:52Z'
        updated: '2022-04-19T11:38:26Z'
        language: Ruby
        archived: false
        stars: 68
        watchers: 68
        forks: 11
        owner: kevindew
        logo: https://avatars.githubusercontent.com/u/282717?v=4
        license: MIT
        repoEtag: '"42c4c00d3369f7d9e7db20151c9b33d1c75a511ef171cf2572e77b6ab92411a6"'
        repoLastModified: Tue, 19 Apr 2022 11:38:26 GMT
      foundInMaster: true
      id: 609fe191ac5d7b1b89c772e47fd2deb8
      swagger: 'No'
      version30: 'Yes'
      version31: 'No'
      moreDetails: true
      owner: kevindew
      stars: 68
      watchers: 68
      forks: 11
      created: '2017-10-19T23:33:52Z'
      lastUpdated: '2022-04-19T11:38:26Z'
      archived: 'No'
- category: Parsers
  tools:
    - source:
        - IMPLEMENTATIONS.md
        - https://openapi.tools/
        - openapi3 tags
      name: swagger-parser
      homepage: https://github.com/swagger-api/swagger-parser
      language: Java
      source_description:
        - Swagger 1.0, 1.1, 1.2, 2.0 to OpenAPI Specification converter
        - Swagger Parser reads OpenAPI definitions into current Java POJOs.
      category:
        - Low-level Tooling
        - Parsers
        - All
      repository: https://github.com/swagger-api/swagger-parser
      v2: true
      v3: true
      repositoryMetadata:
        base64Readme: >-
          IyBTd2FnZ2VyIFBhcnNlciA8aW1nIHNyYz0iaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3N3YWdnZXItYXBpL3N3YWdnZXIuaW8vd29yZHByZXNzL2ltYWdlcy9hc3NldHMvU1ctbG9nby1jbHIucG5nIiBoZWlnaHQ9IjUwIiBhbGlnbj0icmlnaHQiPgoKKipOT1RFOioqIElmIHlvdSdyZSBsb29raW5nIGZvciBgc3dhZ2dlci1wYXJzZXJgIDEuWCBhbmQgT3BlbkFQSSAyLjAsIHBsZWFzZSByZWZlciB0byBbdjEgYnJhbmNoXShodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1wYXJzZXIvdHJlZS92MSkKCiFbQnVpbGQgTWFzdGVyIC0gSmF2YSA4LCAxMSwgYW5kIDE0XShodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1wYXJzZXIvd29ya2Zsb3dzL0J1aWxkJTIwVGVzdCUyMERlcGxveSUyMG1hc3Rlci9iYWRnZS5zdmc/YnJhbmNoPW1hc3RlcikKCiMgVGFibGUgb2YgY29udGVudHMKCiAgLSBbT3ZlcnZpZXddKCNvdmVydmlldykKICAtIFtUYWJsZSBvZiBDb250ZW50c10oI3RhYmxlLW9mLWNvbnRlbnRzKQogIC0gW1VzYWdlXSgjdXNhZ2UpCiAgLSBbQWRkaW5nIHRvIHlvdXIgcHJvamVjdF0oI2FkZGluZy10by15b3VyLXByb2plY3QpCiAgICAtIFtQcmVyZXF1aXNpdGVzXSgjcHJlcmVxdWlzaXRlcykKICAtIFtBdXRoZW50aWNhdGlvbl0oI2F1dGhlbnRpY2F0aW9uKSAgCiAgLSBbT3B0aW9uc10oI29wdGlvbnMpCiAgICAtIFtSZXNvbHZlXSgjMS1yZXNvbHZlKQogICAgLSBbUmVzb2x2ZUZ1bGx5XSgjMi1yZXNvbHZlZnVsbHkpCiAgICAtIFtGbGF0dGVuXSgjMy1mbGF0dGVuKQogICAgLSBbUmVzb2x2ZUNvbWJpbmF0b3JzXSgjNC1yZXNvbHZlY29tYmluYXRvcnMpCiAgLSBbRXh0ZW5zaW9uc10oI2V4dGVuc2lvbnMpCiAgLSBbTGljZW5zZV0oI2xpY2Vuc2UpCiAgIAojIyBPdmVydmlldyAKClRoaXMgaXMgdGhlIFN3YWdnZXIgUGFyc2VyIHByb2plY3QsIHdoaWNoIHBhcnNlcyBPcGVuQVBJIGRlZmluaXRpb25zIGluIEpTT04gb3IgWUFNTCBmb3JtYXQgaW50byBbc3dhZ2dlci1jb3JlXShodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1jb3JlKSByZXByZXNlbnRhdGlvbiBhcyBbSmF2YSBQT0pPXShodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1jb3JlL2Jsb2IvbWFzdGVyL21vZHVsZXMvc3dhZ2dlci1tb2RlbHMvc3JjL21haW4vamF2YS9pby9zd2FnZ2VyL3YzL29hcy9tb2RlbHMvT3BlbkFQSS5qYXZhI0wzNiksIHJldHVybmluZyBhbnkgdmFsaWRhdGlvbiB3YXJuaW5ncy9lcnJvcnMuICAKCkl0IGFsc28gcHJvdmlkZXMgYSBzaW1wbGUgZnJhbWV3b3JrIHRvIGFkZCBhZGRpdGlvbmFsIGNvbnZlcnRlcnMgZnJvbSBkaWZmZXJlbnQgZm9ybWF0cyBpbnRvIHRoZSBTd2FnZ2VyIG9iamVjdHMsIG1ha2luZyB0aGUgZW50aXJlIHRvb2xjaGFpbiBhdmFpbGFibGUuCgoKIyMjIFVzYWdlClVzaW5nIHRoZSBTd2FnZ2VyIFBhcnNlciBpcyBzaW1wbGUuICBPbmNlIGluY2x1ZGVkIGluIHlvdXIgcHJvamVjdCwgeW91IGNhbiByZWFkIGEgT3BlbkFQSSBTcGVjaWZpY2F0aW9uIGZyb20gYW55IGxvY2F0aW9uOgoKYGBgamF2YQppbXBvcnQgaW8uc3dhZ2dlci5wYXJzZXIuT3BlbkFQSVBhcnNlcjsKaW1wb3J0IGlvLnN3YWdnZXIudjMucGFyc2VyLk9wZW5BUElWM1BhcnNlcjsKaW1wb3J0IGlvLnN3YWdnZXIudjMucGFyc2VyLmNvcmUubW9kZWxzLlN3YWdnZXJQYXJzZVJlc3VsdDsKaW1wb3J0IGlvLnN3YWdnZXIudjMub2FzLm1vZGVscy5PcGVuQVBJOwoKLy8gLi4uIHlvdXIgY29kZQoKICAvLyBwYXJzZSBhIHN3YWdnZXIgZGVzY3JpcHRpb24gZnJvbSB0aGUgcGV0c3RvcmUgYW5kIGdldCB0aGUgcmVzdWx0CiAgU3dhZ2dlclBhcnNlUmVzdWx0IHJlc3VsdCA9IG5ldyBPcGVuQVBJUGFyc2VyKCkucmVhZExvY2F0aW9uKCJodHRwczovL3BldHN0b3JlMy5zd2FnZ2VyLmlvL2FwaS92My9vcGVuYXBpLmpzb24iLCBudWxsLCBudWxsKTsKICAKICAvLyBvciBmcm9tIGEgZmlsZQogIC8vICAgU3dhZ2dlclBhcnNlUmVzdWx0IHJlc3VsdCA9IG5ldyBPcGVuQVBJUGFyc2VyKCkucmVhZExvY2F0aW9uKCIuL3BhdGgvdG8vb3BlbmFwaS55YW1sIiwgbnVsbCwgbnVsbCk7CiAgCiAgLy8gdGhlIHBhcnNlZCBQT0pPCiAgT3BlbkFQSSBvcGVuQVBJID0gcmVzdWx0LmdldE9wZW5BUEkoKTsKICAKICBpZiAocmVzdWx0LmdldE1lc3NhZ2VzKCkgIT0gbnVsbCkgcmVzdWx0LmdldE1lc3NhZ2VzKCkuZm9yRWFjaChTeXN0ZW0uZXJyOjpwcmludGxuKTsgLy8gdmFsaWRhdGlvbiBlcnJvcnMgYW5kIHdhcm5pbmdzCiAgCiAgaWYgKG9wZW5BUEkgIT0gbnVsbCkgewogICAgLi4uCiAgfQogIApgYGAKCm9yIGZyb20gYSBzdHJpbmc6CgpgYGBqYXZhCmltcG9ydCBpby5zd2FnZ2VyLnBhcnNlci5PcGVuQVBJUGFyc2VyOwppbXBvcnQgaW8uc3dhZ2dlci52My5wYXJzZXIuT3BlbkFQSVYzUGFyc2VyOwppbXBvcnQgaW8uc3dhZ2dlci52My5wYXJzZXIuY29yZS5tb2RlbHMuU3dhZ2dlclBhcnNlUmVzdWx0OwppbXBvcnQgaW8uc3dhZ2dlci52My5vYXMubW9kZWxzLk9wZW5BUEk7CgovLyAuLi4geW91ciBjb2RlCgogIC8vIHBhcnNlIGEgc3dhZ2dlciBkZXNjcmlwdGlvbiBmcm9tIHRoZSBwZXRzdG9yZSBhbmQgZ2V0IHRoZSByZXN1bHQKICBTd2FnZ2VyUGFyc2VSZXN1bHQgcmVzdWx0ID0gbmV3IE9wZW5BUElQYXJzZXIoKS5yZWFkQ29udGVudHMoImh0dHBzOi8vcGV0c3RvcmUzLnN3YWdnZXIuaW8vYXBpL3YzL29wZW5hcGkuanNvbiIsIG51bGwsIG51bGwpOwogIAogIC8vIG9yIGZyb20gYSBmaWxlCiAgLy8gICBTd2FnZ2VyUGFyc2VSZXN1bHQgcmVzdWx0ID0gbmV3IE9wZW5BUElQYXJzZXIoKS5yZWFkQ29udGVudHMoIi4vcGF0aC90by9vcGVuYXBpLnlhbWwiLCBudWxsLCBudWxsKTsKICAKICAvLyB0aGUgcGFyc2VkIFBPSk8KICBPcGVuQVBJIG9wZW5BUEkgPSByZXN1bHQuZ2V0T3BlbkFQSSgpOwogIAogIGlmIChyZXN1bHQuZ2V0TWVzc2FnZXMoKSAhPSBudWxsKSByZXN1bHQuZ2V0TWVzc2FnZXMoKS5mb3JFYWNoKFN5c3RlbS5lcnI6OnByaW50bG4pOyAvLyB2YWxpZGF0aW9uIGVycm9ycyBhbmQgd2FybmluZ3MKICAKICBpZiAob3BlbkFQSSAhPSBudWxsKSB7CiAgICAuLi4KICB9CiAgCmBgYAoKSWYgeW91IGFyZSBwcm92aWRpbmcgYSBTd2FnZ2VyL09wZW5BUEkgMi4wIGRvY3VtZW50IHRvIHRoZSBwYXJzZXIgLCBlLmcuOgoKYGBgamF2YQpTd2FnZ2VyUGFyc2VSZXN1bHQgcmVzdWx0ID0gbmV3IE9wZW5BUElQYXJzZXIoKS5yZWFkQ29udGVudHMoIi4vcGF0aC90by9zd2FnZ2VyLnlhbWwiLCBudWxsLCBudWxsKTsKYGBgCgp0aGUgU3dhZ2dlci9PcGVuQVBJIDIuMCBkb2N1bWVudCB3aWxsIGJlIGZpcnN0IGNvbnZlcnRlZCBpbnRvIGEgY29tcGFyYWJsZSBPcGVuQVBJIDMuMCBvbmUuCgpZb3UgY2FuIGFsc28gZGlyZWN0bHkgdXNlIGBPcGVuQVBJVjNQYXJzZXJgIHdoaWNoIG9ubHkgaGFuZGxlcyBPcGVuQVBJIDMuMCBkb2N1bWVudHMsIGFuZCBwcm92aWRlcyBhIGNvbnZlbmllbmNlIG1ldGhvZCB0byBnZXQgZGlyZWN0bHkgdGhlIHBhcnNlZCBgT3BlbkFQSSBvYmplY3Q6CgpgYGBqYXZhCmltcG9ydCBpby5zd2FnZ2VyLnYzLnBhcnNlci5PcGVuQVBJVjNQYXJzZXI7CmltcG9ydCBpby5zd2FnZ2VyLnYzLm9hcy5tb2RlbHMuT3BlbkFQSTsKCi8vIC4uLiB5b3VyIGNvZGUKCiAgLy8gcmVhZCBhIHN3YWdnZXIgZGVzY3JpcHRpb24gZnJvbSB0aGUgcGV0c3RvcmUKICAgIAogIE9wZW5BUEkgb3BlbkFQSSA9IG5ldyBPcGVuQVBJVjNQYXJzZXIoKS5yZWFkKCJodHRwczovL3BldHN0b3JlMy5zd2FnZ2VyLmlvL2FwaS92My9vcGVuYXBpLmpzb24iKTsKICAKYGBgCgojIyMgQWRkaW5nIHRvIHlvdXIgcHJvamVjdApZb3UgY2FuIGluY2x1ZGUgdGhpcyBsaWJyYXJ5IGZyb20gU29uYXR5cGUgT1NTIGZvciBTTkFQU0hPVFMsIG9yIE1hdmVuIGNlbnRyYWwgZm9yIHJlbGVhc2VzLiAgSW4geW91ciBkZXBlbmRlbmNpZXM6CgpgYGB4bWwKPGRlcGVuZGVuY3k+CiAgPGdyb3VwSWQ+aW8uc3dhZ2dlci5wYXJzZXIudjM8L2dyb3VwSWQ+CiAgPGFydGlmYWN0SWQ+c3dhZ2dlci1wYXJzZXI8L2FydGlmYWN0SWQ+CiAgPHZlcnNpb24+Mi4wLjMyPC92ZXJzaW9uPgo8L2RlcGVuZGVuY3k+CmBgYAoKIyMjIyBQcmVyZXF1aXNpdGVzCllvdSBuZWVkIHRoZSBmb2xsb3dpbmcgaW5zdGFsbGVkIGFuZCBhdmFpbGFibGUgaW4geW91ciAkUEFUSDoKCiogW0phdmEgMS44XShodHRwOi8vamF2YS5vcmFjbGUuY29tKQoqIFtBcGFjaGUgbWF2ZW4gMy54XShodHRwOi8vbWF2ZW4uYXBhY2hlLm9yZy8pCgpBZnRlciBjbG9uaW5nIHRoZSBwcm9qZWN0LCB5b3UgY2FuIGJ1aWxkIGl0IGZyb20gc291cmNlIHdpdGggdGhpcyBjb21tYW5kOgoKYGBgCm12biBwYWNrYWdlCmBgYAoKIyMjIEF1dGhlbnRpY2F0aW9uCgpJZiB5b3VyIE9wZW5BUEkgZGVmaW5pdGlvbiBpcyBwcm90ZWN0ZWQsIHlvdSBjYW4gcGFzcyBoZWFkZXJzIGluIHRoZSByZXF1ZXN0OgpgYGBqYXZhCmltcG9ydCBpby5zd2FnZ2VyLnYzLnBhcnNlci5jb3JlLm1vZGVscy5BdXRob3JpemF0aW9uVmFsdWU7CgovLyAuLi4geW91ciBjb2RlCgogIC8vIGJ1aWxkIGEgYXV0aG9yaXphdGlvbiB2YWx1ZQogIEF1dGhvcml6YXRpb25WYWx1ZSBteVNwZWNpYWxIZWFkZXIgPSBuZXcgQXV0aG9yaXphdGlvblZhbHVlKCkKICAgIC5rZXlOYW1lKCJ4LXNwZWNpYWwtYWNjZXNzIikgIC8vICB0aGUgbmFtZSBvZiB0aGUgYXV0aG9yaXphdGlvbiB0byBwYXNzCiAgICAudmFsdWUoImktYW0tc3BlY2lhbCIpICAgICAgICAvLyAgdGhlIHZhbHVlIG9mIHRoZSBhdXRob3JpemF0aW9uCiAgICAudHlwZSgiaGVhZGVyIik7ICAgICAgICAgICAgICAvLyAgdGhlIGxvY2F0aW9uLCBhcyBlaXRoZXIgYGhlYWRlcmAgb3IgYHF1ZXJ5YAoKICAvLyBvciBpbiBhIHNpbmdsZSBjb25zdHJ1Y3RvcgogIEF1dGhvcml6YXRpb25WYWx1ZSBhcGlLZXkgPSBuZXcgQXV0aG9yaXphdGlvblZhbHVlKCJhcGlfa2V5IiwgInNwZWNpYWwta2V5IiwgImhlYWRlciIpOwogIE9wZW5BUEkgb3BlbkFQSSA9IG5ldyBPcGVuQVBJVjNQYXJzZXIoKS5yZWFkV2l0aEluZm8oCiAgICAiaHR0cHM6Ly9wZXRzdG9yZTMuc3dhZ2dlci5pby9hcGkvdjMvb3BlbmFwaS5qc29uIiwKICAgIEFycmF5cy5hc0xpc3QobXlTcGVjaWFsSGVhZGVyLCBhcGlLZXkpCiAgKTsKYGBgCgojIyMjIERlYWxpbmcgd2l0aCBzZWxmLXNpZ25lZCBTU0wgY2VydGlmaWNhdGVzCklmIHlvdSdyZSBkZWFsaW5nIHdpdGggc2VsZi1zaWduZWQgU1NMIGNlcnRpZmljYXRlcywgb3IgdGhvc2Ugc2lnbmVkIGJ5IEdvRGFkZHksIHlvdSdsbCBuZWVkIHRvIGRpc2FibGUgU1NMIFRydXN0IApNYW5hZ2VyLiAgVGhhdCdzIGRvbmUgYnkgc2V0dGluZyBhIHN5c3RlbSBlbnZpcm9ubWVudCB2YXJpYWJsZSBhcyBzdWNoOgoKYGBgCmV4cG9ydCBUUlVTVF9BTEw9dHJ1ZQpgYGAKCkFuZCB0aGVuIHRoZSBTd2FnZ2VyIFBhcnNlciB3aWxsIF9pZ25vcmVfIGludmFsaWQgY2VydGlmaWNhdGVzLiAgT2YgY291cnNlIHRoaXMgaXMgZ2VuZXJhbGx5IGEgYmFkIGlkZWEsIGJ1dCBpZiB5b3UncmUgCndvcmtpbmcgaW5zaWRlIGEgZmlyZXdhbGwgb3IgcmVhbGx5IGtub3cgd2hhdCB5b3UncmUgZG9pbmcsIHdlbGwsIHRoZXJlJ3MgeW91ciByb3BlLgoKIyMjIyBEZWFsaW5nIHdpdGggTGV0J3MgRW5jcnlwdApEZXBlbmRpbmcgb24gdGhlIHZlcnNpb24gb2YgSmF2YSB0aGF0IHlvdSB1c2UsIGNlcnRpZmljYXRlcyBzaWduZWQgYnkgdGhlIFtMZXQncyBFbmNyeXB0XShodHRwczovL2xldHNlbmNyeXB0Lm9yZykgY2VydGlmaWNhdGUgYXV0aG9yaXR5IF9tYXkgbm90IHdvcmtfIGJ5IGRlZmF1bHQuICBJZiB5b3UgYXJlIHVzaW5nIGFueSB2ZXJzaW9uIG9mIEphdmEgcHJpb3IgdG8gMS44dTEwMSwgeW91IG1vc3QgbGlrZWx5IF9tdXN0XyBpbnN0YWxsIGFuIGFkZGl0aW9uYWwgQ0EgaW4geW91cgpKVk0uICBBbHNvIG5vdGUgdGhhdCAxLjh1MTAxIG1heSBfbm90XyBiZSBzdWZmaWNpZW50IG9uIGl0J3Mgb3duLiAgU29tZSB1c2VycyBoYXZlIHJlcG9ydGVkIHRoYXQgY2VydGFpbiBvcGVyYXRpbmcgc3lzdGVtcyBhcmUgCm5vdCBhY2NlcHRpbmcgTGV0J3MgRW5jcnlwdCBzaWduZWQgY2VydGlmaWNhdGVzLgoKWW91ciBvcHRpb25zIGluY2x1ZGU6CgoqIEFjY2VwdGluZyBhbGwgY2VydGlmaWNhdGVzIHBlciBhYm92ZQoqIEluc3RhbGxpbmcgdGhlIGNlcnRpZmljYXRlIG1hbnVhbGx5IGluIHlvdXIgSlZNIHVzaW5nIHRoZSBrZXlzdG9yZSB1c2luZyB0aGUgYGtleXRvb2xgIGNvbW1hbmQKKiBDb25maWd1cmluZyB0aGUgSlZNIG9uIHN0YXJ0dXAgdG8gbG9hZCB5b3VyIGNlcnRpZmljYXRlCgpCdXQuLi4gdGhpcyBpcyBhbGwgc3RhbmRhcmQgU1NMIGNvbmZpZ3VyYXRpb24gc3R1ZmYgYW5kIGlzIHdlbGwgZG9jdW1lbnRlZCBhY3Jvc3MgdGhlIHdlYi4KCgojIyMgT3B0aW9ucwpQYXJzZXIgdXNlcyBvcHRpb25zIGFzIGEgd2F5IHRvIGN1c3RvbWl6ZSB0aGUgYmVoYXZpb3Igd2hpbGUgcGFyc2luZzoKCiMjIyMgMS4gcmVzb2x2ZToKCmBgYGphdmEKUGFyc2VPcHRpb25zIHBhcnNlT3B0aW9ucyA9IG5ldyBQYXJzZU9wdGlvbnMoKTsKcGFyc2VPcHRpb25zLnNldFJlc29sdmUodHJ1ZSk7IApmaW5hbCBPcGVuQVBJIG9wZW5BUEkgPSBuZXcgT3BlbkFQSVYzUGFyc2VyKCkucmVhZCgiYS55YW1sIiwgbnVsbCwgcGFyc2VPcHRpb25zKTsKYGBgCgoKLSBXaGVuIHJlbW90ZSBvciByZWxhdGl2ZSByZWZlcmVuY2VzIGFyZSBmb3VuZCBpbiB0aGUgcGFyc2VkIGRvY3VtZW50LCBwYXJzZXIgd2lsbCBhdHRlbXB0IHRvOgoKMS4gcmVzb2x2ZSB0aGUgcmVmZXJlbmNlIGluIHRoZSByZW1vdGUgb3IgcmVsYXRpdmUgbG9jYXRpb24gCjEuIHBhcnNlIHRoZSByZXNvbHZlZCByZWZlcmVuY2UKMS4gYWRkIHRoZSByZXNvbHZlZCAiY29tcG9uZW50IiAoZS5nLiBwYXJhbWV0ZXIsIHNjaGVtYSwgcmVzcG9uc2UsIGV0Yy4pIHRvIHRoZSByZXNvbHZlZCBgT3BlbkFQSWAgUE9KTyBjb21wb25lbnRzIHNlY3Rpb24KMS4gcmVwbGFjZSB0aGUgcmVtb3RlL3JlbGF0aXZlIHJlZmVyZW5jZSB3aXRoIGEgbG9jYWwgcmVmZXJlbmNlLCAgZS5nLiA6IGAjL2NvbXBvbmVudHMvc2NoZW1hcy9OYW1lT2ZSZW1vdGVTY2hlbWFgLiAKClRoaXMgYXBwbGllcyB0byBzY2hlbWFzLCBwYXJhbWV0ZXJzLCByZXNwb25zZXMsIHByZXR0eSBtdWNoIGV2ZXJ5dGhpbmcgY29udGFpbmluZyBhIHJlZi4KCiMjIyMgMi4gcmVzb2x2ZUZ1bGx5OgoKYGBgamF2YQpQYXJzZU9wdGlvbnMgcGFyc2VPcHRpb25zID0gbmV3IFBhcnNlT3B0aW9ucygpOwpwYXJzZU9wdGlvbnMuc2V0UmVzb2x2ZSh0cnVlKTsgLy8gaW1wbGljaXQKcGFyc2VPcHRpb25zLnNldFJlc29sdmVGdWxseSh0cnVlKTsKZmluYWwgT3BlbkFQSSBvcGVuQVBJID0gbmV3IE9wZW5BUElWM1BhcnNlcigpLnJlYWQoImEueWFtbCIsIG51bGwsIHBhcnNlT3B0aW9ucyk7CmBgYAoKLSBJbiBzb21lIHNjZW5hcmlvcywgYWZ0ZXIgcmVmZXJlbmNlcyBhcmUgcmVzb2x2ZWQgKHdpdGggYHJlc29sdmVgLCBzZWUgYWJvdmUpLCB5b3UgbWlnaHQgbmVlZCB0byBoYXZlIGFsbCBsb2NhbCByZWZlcmVuY2VzIHJlbW92ZWQgcmVwbGFjaW5nIHRoZSByZWZlcmVuY2Ugd2l0aCB0aGUgY29udGVudCBvZiB0aGUgcmVmZXJlbmNlZCBlbGVtZW50LiBUaGlzIGlzIGZvciBleGFtcGxlIHVzZWQgaW4gW1N3YWdnZXIgSW5mbGVjdG9yXShodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1pbmZsZWN0b3IpLiBCZSBhd2FyZSB0aGF0IHRoZSByZXN1bHQgY291bGQgYmUgbW9yZSBoZWF2eS9sb25nIGR1ZSB0byBkdXBsaWNhdGlvbgogICAgCk9yaWdpbmFsIGRvY3VtZW50OgoKYGEueWFtbGAgCmBgYApvcGVuYXBpOiAzLjAuMQpwYXRoczoKICAiL25ld1BlcnNvbiI6CiAgICBwb3N0OgogICAgICBzdW1tYXJ5OiBDcmVhdGUgbmV3IHBlcnNvbgogICAgICBkZXNjcmlwdGlvbjogQ3JlYXRlIG5ldyBwZXJzb24KICAgICAgcmVzcG9uc2VzOgogICAgICAgICcyMDAnOgogICAgICAgICAgZGVzY3JpcHRpb246IG9rCiAgICAgICAgICBjb250ZW50OgogICAgICAgICAgICAiKi8qIjoKICAgICAgICAgICAgICBzY2hlbWE6CiAgICAgICAgICAgICAgICAiJHJlZiI6ICIuL3JlZi13aXRob3V0LWNvbXBvbmVudC9iLnlhbWwjL2NvbXBvbmVudHMvc2NoZW1hcy9DdXN0b21lclR5cGUiCmBgYApgYi55YW1sYApgYGAKb3BlbmFwaTogMy4wLjEKY29tcG9uZW50czoKICBzY2hlbWFzOgogICAgQ3VzdG9tZXJUeXBlOgogICAgICB0eXBlOiBzdHJpbmcKICAgICAgZXhhbXBsZTogRXhhbXBsZSB2YWx1ZQpgYGAKClNlcmlhbGl6ZWQgcmVzdWx0IGFmdGVyIHBhcnNpbmcgd2l0aCBvcHRpb24gYHJlc29sdmVGdWxseSh0cnVlKWAKCmBhLnlhbWxgCmBgYApvcGVuYXBpOiAzLjAuMQpzZXJ2ZXJzOgotIHVybDogLwpwYXRoczoKICAvbmV3UGVyc29uOgogICAgcG9zdDoKICAgICAgc3VtbWFyeTogQ3JlYXRlIG5ldyBwZXJzb24KICAgICAgZGVzY3JpcHRpb246IENyZWF0ZSBuZXcgcGVyc29uCiAgICAgIHJlc3BvbnNlczoKICAgICAgICAyMDA6CiAgICAgICAgICBkZXNjcmlwdGlvbjogb2sKICAgICAgICAgIGNvbnRlbnQ6CiAgICAgICAgICAgICcqLyonOgogICAgICAgICAgICAgIHNjaGVtYToKICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgZXhhbXBsZTogRXhhbXBsZSB2YWx1ZQpjb21wb25lbnRzOgogIHNjaGVtYXM6CiAgICBDdXN0b21lclR5cGU6CiAgICAgIHR5cGU6IHN0cmluZwogICAgICBleGFtcGxlOiBFeGFtcGxlIHZhbHVlCmBgYAoKIyMjIyAzLiBmbGF0dGVuOiAKCmBgYGphdmEKUGFyc2VPcHRpb25zIHBhcnNlT3B0aW9ucyA9IG5ldyBQYXJzZU9wdGlvbnMoKTsKcGFyc2VPcHRpb25zLnNldEZsYXR0ZW4odHJ1ZSk7IApmaW5hbCBPcGVuQVBJIG9wZW5BUEkgPSBuZXcgT3BlbkFQSVYzUGFyc2VyKCkucmVhZCgiYS55YW1sIiwgbnVsbCwgcGFyc2VPcHRpb25zKTsKYGBgCgoKVGhpcyBpcyBraW5kIG9mIHRoZSBvcHBvc2l0ZSBvZiByZXNvbHZlRnVsbHksIGxpbWl0ZWQgdG8gZGVmaW5lZCBzY2hlbWFzLgoKSW4gc29tZSBzY2VuYXJpb3MsIHlvdSBtaWdodCBuZWVkIHRvIGhhdmUgYWxsIHNjaGVtYXMgZGVmaW5lZCBpbmxpbmUgKGUuZy4gYSByZXNwb25zZSBzY2hlbWEpIG1vdmVkIHRvIHRoZSBgY29tcG9uZW50cy9zY2hlbWFzYCBzZWN0aW9uIGFuZCByZXBsYWNlZCB3aXRoIGEgcmVmZXJlbmNlIHRvIHRoZSBuZXdseSBhZGRlZCBzY2hlbWEgd2l0aGluIGBjb21wb25lbnRzL3NjaGVtYXNgLiBUaGlzIGlzIGZvciBleGFtcGxlIHVzZWQgaW4gW1N3YWdnZXIgQ29kZWdlbl0oaHR0cHM6Ly9naXRodWIuY29tL3N3YWdnZXItYXBpL3N3YWdnZXItY29kZWdlbikuCgpPcmlnaW5hbCBkb2N1bWVudDoKCmBmbGF0dGVuLnlhbWxgCgpgYGAKb3BlbmFwaTogMy4wLjAKaW5mbzoKICB2ZXJzaW9uOiAxLjAuMAogIHRpdGxlOiBTd2FnZ2VyIFBldHN0b3JlCiAgbGljZW5zZToKICAgIG5hbWU6IE1JVApwYXRoczoKICAvcGV0czoKICAgIGdldDoKICAgICAgc3VtbWFyeTogTGlzdCBhbGwgcGV0cwogICAgICBvcGVyYXRpb25JZDogbGlzdFBldHMKICAgICAgcmVzcG9uc2VzOgogICAgICAgICcyMDAnOgogICAgICAgICAgZGVzY3JpcHRpb246IEFuIHBhZ2VkIGFycmF5IG9mIHBldHMKICAgICAgICAgIGhlYWRlcnM6CiAgICAgICAgICAgIHgtbmV4dDoKICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogQSBsaW5rIHRvIHRoZSBuZXh0IHBhZ2Ugb2YgcmVzcG9uc2VzCiAgICAgICAgICAgICAgc2NoZW1hOgogICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBjb250ZW50OgogICAgICAgICAgICBhcHBsaWNhdGlvbi9qc29uOgogICAgICAgICAgICAgIHNjaGVtYToKICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgIGlkOgogICAgICAgICAgICAgICAgICAgICAgdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgICAgICAgICAgZm9ybWF0OiBpbnQ2NAogICAgICAgICAgICAgICAgICAgIG5hbWU6CiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICB0YWc6CiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKYGBgCgpTZXJpYWxpemVkIHJlc3VsdCBhZnRlciBwYXJzaW5nIHdpdGggb3B0aW9uIGBmbGF0dGVuKHRydWUpYAoKYGBgCm9wZW5hcGk6IDMuMC4wCmluZm86CiAgdGl0bGU6IFN3YWdnZXIgUGV0c3RvcmUKICBsaWNlbnNlOgogICAgbmFtZTogTUlUCiAgdmVyc2lvbjogMS4wLjAKc2VydmVyczoKLSB1cmw6IC8KcGF0aHM6CiAgL3BldHM6CiAgICBnZXQ6CiAgICAgIHRhZ3M6CiAgICAgIC0gcGV0cwogICAgICBzdW1tYXJ5OiBMaXN0IGFsbCBwZXRzCiAgICAgIHJlc3BvbnNlczoKICAgICAgICAyMDA6CiAgICAgICAgICBkZXNjcmlwdGlvbjogQW4gcGFnZWQgYXJyYXkgb2YgcGV0cwogICAgICAgICAgaGVhZGVyczoKICAgICAgICAgICAgeC1uZXh0OgogICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBBIGxpbmsgdG8gdGhlIG5leHQgcGFnZSBvZiByZXNwb25zZXMKICAgICAgICAgICAgICBzdHlsZTogc2ltcGxlCiAgICAgICAgICAgICAgZXhwbG9kZTogZmFsc2UKICAgICAgICAgICAgICBzY2hlbWE6CiAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGNvbnRlbnQ6CiAgICAgICAgICAgIGFwcGxpY2F0aW9uL2pzb246CiAgICAgICAgICAgICAgc2NoZW1hOgogICAgICAgICAgICAgICAgJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL2lubGluZV9yZXNwb25zZV8yMDAnCmNvbXBvbmVudHM6CiAgc2NoZW1hczoKICAgIGlubGluZV9yZXNwb25zZV8yMDA6CiAgICAgIHR5cGU6IG9iamVjdAogICAgICBwcm9wZXJ0aWVzOgogICAgICAgIGlkOgogICAgICAgICAgdHlwZTogaW50ZWdlcgogICAgICAgICAgZm9ybWF0OiBpbnQ2NAogICAgICAgIG5hbWU6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICB0YWc6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKYGBgCgojIyMjIDQuIHJlc29sdmVDb21iaW5hdG9yczogCgpgYGBqYXZhClBhcnNlT3B0aW9ucyBwYXJzZU9wdGlvbnMgPSBuZXcgUGFyc2VPcHRpb25zKCk7CnBhcnNlT3B0aW9ucy5zZXRSZXNvbHZlKHRydWUpOyAvLyBpbXBsaWNpdApwYXJzZU9wdGlvbnMuc2V0UmVzb2x2ZUZ1bGx5KHRydWUpOwpwYXJzZU9wdGlvbnMuc2V0UmVzb2x2ZUNvbWJpbmF0b3JzKGZhbHNlKTsgLy8gZGVmYXVsdCBpcyB0cnVlIApmaW5hbCBPcGVuQVBJIG9wZW5BUEkgPSBuZXcgT3BlbkFQSVYzUGFyc2VyKCkucmVhZCgiYS55YW1sIiwgbnVsbCwgcGFyc2VPcHRpb25zKTsKYGBgCgpUaGlzIG9wdGlvbiAob25seSBhdmFpbGFibGUgd2l0aCBgcmVzb2x2ZUZ1bGx5ID0gdHJ1ZWApIGFsbG93cyB0byBjdXN0b21pemUgYmVoYXZpb3VyIHJlbGF0ZWQgdG8gYGFsbE9mL2FueU9mL29uZU9mYCAoY29tcG9zZWQgc2NoZW1hcykgIHByb2Nlc3NpbmcuIFdpdGggb3B0aW9uIHNldCB0byBgdHJ1ZWAgKGRlZmF1bHQpLCBjb21wb3NlZCBzY2hlbWFzIGFyZSB0cmFuc2Zvcm1lZCBpbnRvICJub24gY29tcG9zZWQiIG9uZXMsIGJ5IGhhdmluZyBhbGwgcHJvcGVydGllcyBtZXJnZWQgaW50byBhIHNpbmdsZSByZXN1bHRpbmcgc2NoZW1hIChzZWUgZXhhbXBsZSBiZWxvdykuCklmIG9wdGlvbiBpcyBzZXQgdG8gYGZhbHNlYCwgdGhlIHJlc3VsdGluZyBzY2hlbWEgd2lsbCBpbnN0ZWFkIG1haW50YWluIGl0cyAiY29tcG9zZWQiIG5hdHVyZSwga2VlcGluZyBwcm9wZXJ0aWVzIHdpdGhpbiBlLmcuIHRoZSBgYWxsT2ZgIG1lbWJlcnMuCgpQbGVhc2Ugc2VlIGV4YW1wbGVzIGJlbG93OgoKKipVbnJlc29sdmVkIHlhbWwqKgoKYGBgCm9wZW5hcGk6IDMuMC4xCnNlcnZlcnM6Ci0gdXJsOiBodHRwOi8vcGV0c3RvcmUuc3dhZ2dlci5pby9hcGkKCmluZm86CiAgZGVzY3JpcHRpb246ICdUaGlzIGlzIGEgc2FtcGxlIHNlcnZlciBQZXRzdG9yZScKICB2ZXJzaW9uOiAxLjAuMAogIHRpdGxlOiB0ZXN0aW5nIHNvdXJjZSBmaWxlCiAgdGVybXNPZlNlcnZpY2U6IGh0dHA6Ly9zd2FnZ2VyLmlvL3Rlcm1zLwoKcGF0aHM6CiAgIi93aXRoSW52YWxpZENvbXBvc2VkTW9kZWwiOgogICAgcG9zdDoKICAgICAgb3BlcmF0aW9uSWQ6IHdpdGhJbnZhbGlkQ29tcG9zZWRNb2RlbAogICAgICByZXF1ZXN0Qm9keToKICAgICAgICBjb250ZW50OgogICAgICAgICAgImFwcGxpY2F0aW9uL2pzb24iOgogICAgICAgICAgICBzY2hlbWE6CiAgICAgICAgICAgICAgIiRyZWYiOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvRXh0ZW5kZWRBZGRyZXNzIgogICAgICAgIHJlcXVpcmVkOiBmYWxzZQogICAgICByZXNwb25zZXM6CiAgICAgICAgJzIwMCc6CiAgICAgICAgICBkZXNjcmlwdGlvbjogc3VjY2VzcyEKY29tcG9uZW50czoKICBzY2hlbWFzOgogICAgRXh0ZW5kZWRBZGRyZXNzOgogICAgICB0eXBlOiBvYmplY3QKICAgICAgYWxsT2Y6CiAgICAgICAgLSAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvQWRkcmVzcycKICAgICAgICAtIHR5cGU6IG9iamVjdAogICAgICAgICAgcmVxdWlyZWQ6CiAgICAgICAgICAtIGdwcwogICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgZ3BzOgogICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgQWRkcmVzczoKICAgICAgcmVxdWlyZWQ6CiAgICAgIC0gc3RyZWV0CiAgICAgIHR5cGU6IG9iamVjdAogICAgICBwcm9wZXJ0aWVzOgogICAgICAgIHN0cmVldDoKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgZXhhbXBsZTogMTIzNDUgRWwgTW9udGUgUm9hZAogICAgICAgIGNpdHk6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGV4YW1wbGU6IExvcyBBbHRvcyBIaWxscwogICAgICAgIHN0YXRlOgogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBleGFtcGxlOiBDQQogICAgICAgIHppcDoKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgZXhhbXBsZTogJzk0MDIyJwpgYGAKCioqcmVzb2x2ZWRDb21iaW5hdG9yID0gdHJ1ZSAoZGVmYXVsdCkgLSBUZXN0IGNhc2UqKgoKYGBgCkBUZXN0CiAgICBwdWJsaWMgdm9pZCByZXNvbHZlQWxsT2ZXaXRob3V0QWdncmVnYXRpbmdQYXJhbWV0ZXJzKEBJbmplY3RhYmxlIGZpbmFsIExpc3Q8QXV0aG9yaXphdGlvblZhbHVlPiBhdXRocykgewogICAgICAgIFBhcnNlT3B0aW9ucyBvcHRpb25zID0gbmV3IFBhcnNlT3B0aW9ucygpOwogICAgICAgIG9wdGlvbnMuc2V0UmVzb2x2ZUZ1bGx5KHRydWUpOwogICAgICAgIG9wdGlvbnMuc2V0UmVzb2x2ZUNvbWJpbmF0b3JzKHRydWUpOwoKICAgICAgICAvLyBUZXN0aW5nIGNvbXBvbmVudHMvc2NoZW1hcwogICAgICAgIE9wZW5BUEkgb3BlbkFQSSA9IG5ldyBPcGVuQVBJVjNQYXJzZXIoKS5yZWFkTG9jYXRpb24oInNyYy90ZXN0L3Jlc291cmNlcy9jb21wb3NlZC55YW1sIixhdXRocyxvcHRpb25zKS5nZXRPcGVuQVBJKCk7CiAgICAgICAgCiAgICAgICAgQ29tcG9zZWRTY2hlbWEgYWxsT2YgPSAoQ29tcG9zZWRTY2hlbWEpIG9wZW5BUEkuZ2V0Q29tcG9uZW50cygpLmdldFNjaGVtYXMoKS5nZXQoIkV4dGVuZGVkQWRkcmVzcyIpOwogICAgICAgIGFzc2VydEVxdWFscyhhbGxPZi5nZXRBbGxPZigpLnNpemUoKSwgMik7CgogICAgICAgIGFzc2VydFRydWUoYWxsT2YuZ2V0QWxsT2YoKS5nZXQoMCkuZ2V0JHJlZigpICE9IG51bGwpOwogICAgICAgIGFzc2VydFRydWUoYWxsT2YuZ2V0QWxsT2YoKS5nZXQoMSkuZ2V0UHJvcGVydGllcygpLmNvbnRhaW5zS2V5KCJncHMiKSk7CgoKICAgICAgICAvLyBUZXN0aW5nIHBhdGggaXRlbQogICAgICAgIE9iamVjdFNjaGVtYSBzY2hlbWEgPSAoT2JqZWN0U2NoZW1hKSBvcGVuQVBJLmdldFBhdGhzKCkuZ2V0KCIvd2l0aEludmFsaWRDb21wb3NlZE1vZGVsIikuZ2V0UG9zdCgpLmdldFJlcXVlc3RCb2R5KCkuZ2V0Q29udGVudCgpLmdldCgiYXBwbGljYXRpb24vanNvbiIpLmdldFNjaGVtYSgpOwoKICAgICAgICBhc3NlcnRFcXVhbHMoc2NoZW1hLmdldFByb3BlcnRpZXMoKS5zaXplKCksIDUpOwogICAgICAgIGFzc2VydFRydWUoc2NoZW1hLmdldFByb3BlcnRpZXMoKS5jb250YWluc0tleSgic3RyZWV0IikpOwogICAgICAgIGFzc2VydFRydWUoc2NoZW1hLmdldFByb3BlcnRpZXMoKS5jb250YWluc0tleSgiZ3BzIikpOwoKICAgIH0KYGBgCgoqKnJlc29sdmVkQ29tYmluYXRvciA9IHRydWUgKGRlZmF1bHQpIC0gUmVzb2x2ZWQgWWFtbCoqCgpgYGAKb3BlbmFwaTogMy4wLjEKaW5mbzoKICB0aXRsZTogdGVzdGluZyBzb3VyY2UgZmlsZQogIGRlc2NyaXB0aW9uOiBUaGlzIGlzIGEgc2FtcGxlIHNlcnZlciBQZXRzdG9yZQogIHRlcm1zT2ZTZXJ2aWNlOiBodHRwOi8vc3dhZ2dlci5pby90ZXJtcy8KICB2ZXJzaW9uOiAxLjAuMApzZXJ2ZXJzOgotIHVybDogaHR0cDovL3BldHN0b3JlLnN3YWdnZXIuaW8vYXBpCnBhdGhzOgogIC93aXRoSW52YWxpZENvbXBvc2VkTW9kZWw6CiAgICBwb3N0OgogICAgICBvcGVyYXRpb25JZDogd2l0aEludmFsaWRDb21wb3NlZE1vZGVsCiAgICAgIHJlcXVlc3RCb2R5OgogICAgICAgIGNvbnRlbnQ6CiAgICAgICAgICBhcHBsaWNhdGlvbi9qc29uOgogICAgICAgICAgICBzY2hlbWE6CiAgICAgICAgICAgICAgcmVxdWlyZWQ6CiAgICAgICAgICAgICAgLSBncHMKICAgICAgICAgICAgICAtIHN0cmVldAogICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICBzdHJlZXQ6CiAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICBleGFtcGxlOiAxMjM0NSBFbCBNb250ZSBSb2FkCiAgICAgICAgICAgICAgICBjaXR5OgogICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgZXhhbXBsZTogTG9zIEFsdG9zIEhpbGxzCiAgICAgICAgICAgICAgICBzdGF0ZToKICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgIGV4YW1wbGU6IENBCiAgICAgICAgICAgICAgICB6aXA6CiAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICBleGFtcGxlOiAiOTQwMjIiCiAgICAgICAgICAgICAgICBncHM6CiAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIHJlcXVpcmVkOiBmYWxzZQogICAgICByZXNwb25zZXM6CiAgICAgICAgMjAwOgogICAgICAgICAgZGVzY3JpcHRpb246IHN1Y2Nlc3MhCmNvbXBvbmVudHM6CiAgc2NoZW1hczoKICAgIEV4dGVuZGVkQWRkcmVzczoKICAgICAgdHlwZTogb2JqZWN0CiAgICAgIGFsbE9mOgogICAgICAtICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9BZGRyZXNzJwogICAgICAtIHJlcXVpcmVkOgogICAgICAgIC0gZ3BzCiAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgIGdwczoKICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICBBZGRyZXNzOgogICAgICByZXF1aXJlZDoKICAgICAgLSBzdHJlZXQKICAgICAgdHlwZTogb2JqZWN0CiAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgc3RyZWV0OgogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBleGFtcGxlOiAxMjM0NSBFbCBNb250ZSBSb2FkCiAgICAgICAgY2l0eToKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgZXhhbXBsZTogTG9zIEFsdG9zIEhpbGxzCiAgICAgICAgc3RhdGU6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGV4YW1wbGU6IENBCiAgICAgICAgemlwOgogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBleGFtcGxlOiAiOTQwMjIiCiBgYGAKIAogKipyZXNvbHZlZENvbWJpbmF0b3IgPSBmYWxzZSAtIFRlc3QgY2FzZSoqCiAKIGBgYAogQFRlc3QKICAgIHB1YmxpYyB2b2lkIHJlc29sdmVBbGxPZldpdGhvdXRBZ2dyZWdhdGluZ1BhcmFtZXRlcnMoQEluamVjdGFibGUgZmluYWwgTGlzdDxBdXRob3JpemF0aW9uVmFsdWU+IGF1dGhzKSB7CiAgICAgICAgUGFyc2VPcHRpb25zIG9wdGlvbnMgPSBuZXcgUGFyc2VPcHRpb25zKCk7CiAgICAgICAgb3B0aW9ucy5zZXRSZXNvbHZlRnVsbHkodHJ1ZSk7CiAgICAgICAgb3B0aW9ucy5zZXRSZXNvbHZlQ29tYmluYXRvcnMoZmFsc2UpOwoKICAgICAgICAvLyBUZXN0aW5nIGNvbXBvbmVudHMvc2NoZW1hcwogICAgICAgIE9wZW5BUEkgb3BlbkFQSSA9IG5ldyBPcGVuQVBJVjNQYXJzZXIoKS5yZWFkTG9jYXRpb24oInNyYy90ZXN0L3Jlc291cmNlcy9jb21wb3NlZC55YW1sIixhdXRocyxvcHRpb25zKS5nZXRPcGVuQVBJKCk7CiAgICAgICAKICAgICAgICBDb21wb3NlZFNjaGVtYSBhbGxPZiA9IChDb21wb3NlZFNjaGVtYSkgb3BlbkFQSS5nZXRDb21wb25lbnRzKCkuZ2V0U2NoZW1hcygpLmdldCgiRXh0ZW5kZWRBZGRyZXNzIik7CiAgICAgICAgYXNzZXJ0RXF1YWxzKGFsbE9mLmdldEFsbE9mKCkuc2l6ZSgpLCAyKTsKICAgICAgICBhc3NlcnRUcnVlKGFsbE9mLmdldEFsbE9mKCkuZ2V0KDApLmdldFByb3BlcnRpZXMoKS5jb250YWluc0tleSgic3RyZWV0IikpOwogICAgICAgIGFzc2VydFRydWUoYWxsT2YuZ2V0QWxsT2YoKS5nZXQoMSkuZ2V0UHJvcGVydGllcygpLmNvbnRhaW5zS2V5KCJncHMiKSk7CgogICAgICAgIC8vIFRlc3RpbmcgcGF0aCBpdGVtCiAgICAgICAgQ29tcG9zZWRTY2hlbWEgc2NoZW1hID0gKENvbXBvc2VkU2NoZW1hKSBvcGVuQVBJLmdldFBhdGhzKCkuZ2V0KCIvd2l0aEludmFsaWRDb21wb3NlZE1vZGVsIikuZ2V0UG9zdCgpLmdldFJlcXVlc3RCb2R5KCkuZ2V0Q29udGVudCgpLmdldCgiYXBwbGljYXRpb24vanNvbiIpLmdldFNjaGVtYSgpOwogICAgICAgIC8vIEluIGZhY3QgdGhlIHNjaGVtYSByZXNvbHZlZCBwcmV2aW91c2x5IGlzIHRoZSBzYW1lIG9mIC93aXRoSW52YWxpZENvbXBvc2VkTW9kZWwKICAgICAgICBhc3NlcnRFcXVhbHMoc2NoZW1hLCBhbGxPZik7CiAgICAgICAgYXNzZXJ0RXF1YWxzKHNjaGVtYS5nZXRBbGxPZigpLnNpemUoKSwgMik7CiAgICAgICAgYXNzZXJ0VHJ1ZShzY2hlbWEuZ2V0QWxsT2YoKS5nZXQoMCkuZ2V0UHJvcGVydGllcygpLmNvbnRhaW5zS2V5KCJzdHJlZXQiKSk7CiAgICAgICAgYXNzZXJ0VHJ1ZShzY2hlbWEuZ2V0QWxsT2YoKS5nZXQoMSkuZ2V0UHJvcGVydGllcygpLmNvbnRhaW5zS2V5KCJncHMiKSk7CgogICAgfQogIGBgYAogIAogICoqcmVzb2x2ZWRDb21iaW5hdG9yID0gZmFsc2UgLSBSZXNvbHZlZCBZYW1sKioKICAKICBgYGAKb3BlbmFwaTogMy4wLjEKaW5mbzoKICB0aXRsZTogdGVzdGluZyBzb3VyY2UgZmlsZQogIGRlc2NyaXB0aW9uOiBUaGlzIGlzIGEgc2FtcGxlIHNlcnZlciBQZXRzdG9yZQogIHRlcm1zT2ZTZXJ2aWNlOiBodHRwOi8vc3dhZ2dlci5pby90ZXJtcy8KICB2ZXJzaW9uOiAxLjAuMApzZXJ2ZXJzOgotIHVybDogaHR0cDovL3BldHN0b3JlLnN3YWdnZXIuaW8vYXBpCnBhdGhzOgogIC93aXRoSW52YWxpZENvbXBvc2VkTW9kZWw6CiAgICBwb3N0OgogICAgICBvcGVyYXRpb25JZDogd2l0aEludmFsaWRDb21wb3NlZE1vZGVsCiAgICAgIHJlcXVlc3RCb2R5OgogICAgICAgIGNvbnRlbnQ6CiAgICAgICAgICBhcHBsaWNhdGlvbi9qc29uOgogICAgICAgICAgICBzY2hlbWE6CiAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgYWxsT2Y6CiAgICAgICAgICAgICAgLSByZXF1aXJlZDoKICAgICAgICAgICAgICAgIC0gc3RyZWV0CiAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgIHN0cmVldDoKICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICBleGFtcGxlOiAxMjM0NSBFbCBNb250ZSBSb2FkCiAgICAgICAgICAgICAgICAgIGNpdHk6CiAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgZXhhbXBsZTogTG9zIEFsdG9zIEhpbGxzCiAgICAgICAgICAgICAgICAgIHN0YXRlOgogICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgIGV4YW1wbGU6IENBCiAgICAgICAgICAgICAgICAgIHppcDoKICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICBleGFtcGxlOiAiOTQwMjIiCiAgICAgICAgICAgICAgLSByZXF1aXJlZDoKICAgICAgICAgICAgICAgIC0gZ3BzCiAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgIGdwczoKICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICByZXF1aXJlZDogZmFsc2UKICAgICAgcmVzcG9uc2VzOgogICAgICAgIDIwMDoKICAgICAgICAgIGRlc2NyaXB0aW9uOiBzdWNjZXNzIQpjb21wb25lbnRzOgogIHNjaGVtYXM6CiAgICBFeHRlbmRlZEFkZHJlc3M6CiAgICAgIHR5cGU6IG9iamVjdAogICAgICBhbGxPZjoKICAgICAgLSByZXF1aXJlZDoKICAgICAgICAtIHN0cmVldAogICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICBzdHJlZXQ6CiAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICBleGFtcGxlOiAxMjM0NSBFbCBNb250ZSBSb2FkCiAgICAgICAgICBjaXR5OgogICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgZXhhbXBsZTogTG9zIEFsdG9zIEhpbGxzCiAgICAgICAgICBzdGF0ZToKICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgIGV4YW1wbGU6IENBCiAgICAgICAgICB6aXA6CiAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICBleGFtcGxlOiAiOTQwMjIiCiAgICAgIC0gcmVxdWlyZWQ6CiAgICAgICAgLSBncHMKICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgZ3BzOgogICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgIEFkZHJlc3M6CiAgICAgIHJlcXVpcmVkOgogICAgICAtIHN0cmVldAogICAgICB0eXBlOiBvYmplY3QKICAgICAgcHJvcGVydGllczoKICAgICAgICBzdHJlZXQ6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGV4YW1wbGU6IDEyMzQ1IEVsIE1vbnRlIFJvYWQKICAgICAgICBjaXR5OgogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBleGFtcGxlOiBMb3MgQWx0b3MgSGlsbHMKICAgICAgICBzdGF0ZToKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgZXhhbXBsZTogQ0EKICAgICAgICB6aXA6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGV4YW1wbGU6ICI5NDAyMiIKYGBgCgojIyMgRXh0ZW5zaW9ucwpUaGlzIHByb2plY3QgaGFzIGEgY29yZSBhcnRpZmFjdC0tYHN3YWdnZXItcGFyc2VyYCwgd2hpY2ggdXNlcyBKYXZhIFNlcnZpY2UgUHJvdmlkZXIgSW50ZXJmYWNlIChTUEkpIHNvIGFkZGl0aW9uYWwgZXh0ZW5zaW9ucyBjYW4gYmUgYWRkZWQuIAoKVG8gYnVpbGQgeW91ciBvd24gZXh0ZW5zaW9uLCB5b3Ugc2ltcGx5IG5lZWQgdG8gY3JlYXRlIGEgYHNyYy9tYWluL3Jlc291cmNlcy9NRVRBLUlORi9zZXJ2aWNlcy9pby5zd2FnZ2VyLnYzLnBhcnNlci5jb3JlLmV4dGVuc2lvbnMuU3dhZ2dlclBhcnNlckV4dGVuc2lvbmAgZmlsZSB3aXRoIHRoZSBmdWxsIGNsYXNzbmFtZSBvZiB5b3VyIGltcGxlbWVudGF0aW9uLiAgWW91ciBjbGFzcyBtdXN0IGFsc28gaW1wbGVtZW50IHRoZSBgaW8uc3dhZ2dlci52My5wYXJzZXIuY29yZS5leHRlbnNpb25zLlN3YWdnZXJQYXJzZXJFeHRlbnNpb25gIGludGVyZmFjZS4gIFRoZW4sIGluY2x1ZGluZyB5b3VyIGxpYnJhcnkgd2l0aCB0aGUgYHN3YWdnZXItcGFyc2VyYCBtb2R1bGUgd2lsbCBjYXVzZSBpdCB0byBiZSB0cmlnZ2VyZWQgYXV0b21hdGljYWxseS4KCiMjIFNlY3VyaXR5IGNvbnRhY3QKClBsZWFzZSBkaXNjbG9zZSBhbnkgc2VjdXJpdHktcmVsYXRlZCBpc3N1ZXMgb3IgdnVsbmVyYWJpbGl0aWVzIGJ5IGVtYWlsaW5nIFtzZWN1cml0eUBzd2FnZ2VyLmlvXShtYWlsdG86c2VjdXJpdHlAc3dhZ2dlci5pbyksIGluc3RlYWQgb2YgdXNpbmcgdGhlIHB1YmxpYyBpc3N1ZSB0cmFja2VyLgo=
        readmeEtag: '"893e0a7f358342c960a2d8329a2d4f6d57161ad2006abc6286d80dce3023ef93"'
        readmeLastModified: Wed, 27 Apr 2022 16:49:25 GMT
        description: Swagger Spec to Java POJOs
        created: '2014-04-21T16:00:22Z'
        updated: '2022-04-25T08:33:55Z'
        language: Java
        archived: false
        stars: 568
        watchers: 568
        forks: 455
        owner: swagger-api
        logo: https://avatars.githubusercontent.com/u/7658037?v=4
        license: Apache-2.0
        repoEtag: '"8230b2eabe4563bba93dcf97ef7e8f45f856324d8abc5fa5d36e19f4effb9a4f"'
        repoLastModified: Mon, 25 Apr 2022 08:33:55 GMT
      foundInMaster: true
      id: 45f46a8f7ac698cfe3926303bf3dff9d
      swagger: 'Yes'
      version30: 'Yes'
      version31: 'No'
      moreDetails: true
      owner: swagger-api
      stars: 568
      watchers: 568
      forks: 455
      created: '2014-04-21T16:00:22Z'
      lastUpdated: '2022-04-25T08:33:55Z'
      archived: 'No'
    - source:
        - IMPLEMENTATIONS.md
        - https://openapi.tools/
        - openapi3 tags
      name: KaiZen OpenAPI Parser
      repository: https://github.com/reprezen/kaizen-openapi-parser
      owner: RepreZen
      category:
        - Low-level Tooling
        - Parsers
        - All
      language: Java
      source_description: >-
        High-performance Parser, Validator, and Java Object Model for OpenAPI
        3.x
      v3: true
      repositoryMetadata:
        base64Readme: >-
          
        readmeEtag: '"b726f629bf836bd2ac47731213481aa1e9ac7f3820062aa0a498bb475c79540a"'
        readmeLastModified: Wed, 17 Jul 2019 13:54:46 GMT
        description: >-
          High-performance Parser, Validator, and Java Object Model for OpenAPI
          3.x
        created: '2017-03-28T02:00:01Z'
        updated: '2022-04-27T04:58:15Z'
        language: Java
        archived: false
        stars: 119
        watchers: 119
        forks: 33
        owner: RepreZen
        logo: https://avatars.githubusercontent.com/u/15205934?v=4
        repoEtag: '"d0e952752ea8bc776dd94cddb7690c551d2036cccac0cd8f78de233fe7699605"'
        repoLastModified: Wed, 27 Apr 2022 04:58:15 GMT
      foundInMaster: true
      homepage: https://github.com/RepreZen/KaiZen-OpenAPI-Parser
      id: f542543d6021da9cbce2c66599690853
      swagger: 'No'
      version30: 'Yes'
      version31: 'No'
      moreDetails: true
      stars: 119
      watchers: 119
      forks: 33
      created: '2017-03-28T02:00:01Z'
      lastUpdated: '2022-04-27T04:58:15Z'
      archived: 'No'
    - source:
        - IMPLEMENTATIONS.md
        - https://openapi.tools/
      name:
        - openapi3-ts
        - OpenAPI-TS
      homepage: https://github.com/metadevpro/openapi3-ts
      language: TypeScript
      source_description: TS Model & utils for OpenAPI 3.0.x contracts
      category:
        - Low-level Tooling
        - Parsers
        - All
      repository: https://github.com/metadevpro/openapi3-ts
      v3: true
      repositoryMetadata:
        base64Readme: >-
          IyBPcGVuQXBpMy1UUwoKVHlwZVNjcmlwdCBsaWJyYXJ5IHRvIGhlbHAgYnVpbGRpbmcgT3BlbkFQSSAzLnggY29tcGxpYW50IEFQSSBjb250cmFjdHMuCgpbIVtCdWlsZCBTdGF0dXNdKGh0dHBzOi8vdHJhdmlzLWNpLm9yZy9tZXRhZGV2cHJvL29wZW5hcGkzLXRzLnN2Zz9icmFuY2g9bWFzdGVyKV0oaHR0cHM6Ly90cmF2aXMtY2kub3JnL21ldGFkZXZwcm8vb3BlbmFwaTMtdHMpClshW0NvdmVyYWdlIFN0YXR1c10oaHR0cHM6Ly9jb3ZlcmFsbHMuaW8vcmVwb3MvZ2l0aHViL21ldGFkZXZwcm8vb3BlbmFwaTMtdHMvYmFkZ2Uuc3ZnP2JyYW5jaD1tYXN0ZXIpXShodHRwczovL2NvdmVyYWxscy5pby9naXRodWIvbWV0YWRldnByby9vcGVuYXBpMy10cz9icmFuY2g9bWFzdGVyKQpbIVtLbm93biBWdWxuZXJhYmlsaXRpZXNdKGh0dHBzOi8vc255ay5pby90ZXN0L2dpdGh1Yi9tZXRhZGV2cHJvL29wZW5hcGkzLXRzL2JhZGdlLnN2Zz90YXJnZXRGaWxlPXBhY2thZ2UuanNvbildKGh0dHBzOi8vc255ay5pby90ZXN0L2dpdGh1Yi9tZXRhZGV2cHJvL29wZW5hcGkzLXRzP3RhcmdldEZpbGU9cGFja2FnZS5qc29uKQpbIVtucG0gdmVyc2lvbl0oaHR0cHM6Ly9iYWRnZS5mdXJ5LmlvL2pzL29wZW5hcGkzLXRzLnN2ZyldKGh0dHA6Ly9iYWRnZS5mdXJ5LmlvL2pzL29wZW5hcGkzLXRzKQoKWyFbTlBNXShodHRwczovL25vZGVpLmNvL25wbS9vcGVuYXBpMy10cy5wbmc/ZG93bmxvYWRzPXRydWUmZG93bmxvYWRSYW5rPXRydWUmc3RhcnM9dHJ1ZSldKGh0dHBzOi8vbm9kZWkuY28vbnBtL29wZW5hcGkzLXRzLykKCiMjIEluY2x1ZGVzCgoqIGAvc3JjL21vZGVsYCBUUyB0eXBlZCBpbnRlcmZhY2VzIGZvciBoZWxwaW5nIGJ1aWxkaW5nIGEgY29udHJhY3QuCiogYC9zcmMvZHNsYCBGbHVlbnQgRFNMIGZvciBidWlsZGluZyBhIGNvbnRyYWN0LgoKIyMgSW5zdGFsbAoKSW5zdGFsbCBwYWNrYWdlIHZpYSAqKm5wbSoqOgoKYGBgYmFzaApucG0gaSAtLXNhdmUgb3BlbmFwaTMtdHMKYGBgCgojIyBWZXJzaW9ucyBhbmQgQ2hhbmdlbG9nCgpTZWUgW2NoYW5nZWxvZ10oQ2hhbmdlbG9nLm1kKS4KCiMjIFJlZmVyZW5jZXMKCiogT3BlbkFQSSBzcGVjIDMuMS4wLiBbaHR0cHM6Ly9naXRodWIuY29tL09BSS9PcGVuQVBJLVNwZWNpZmljYXRpb24vYmxvYi9tYXN0ZXIvdmVyc2lvbnMvMy4xLjAubWRdKGh0dHBzOi8vZ2l0aHViLmNvbS9PQUkvT3BlbkFQSS1TcGVjaWZpY2F0aW9uL2Jsb2IvbWFzdGVyL3ZlcnNpb25zLzMuMS4wLm1kKQoKIyMgTGljZW5zZQoKTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLgoKIyMgQ3JlZGl0cwoKKipDb250YWN0OioqIFBlZHJvIEouIE1vbGluYSB8IGdpdGh1YjogW3BqbW9saW5hXShodHRwczovL2dpdGh1Yi5jb20vcGptb2xpbmEpIHwgdHdpdHRlcjogW3Btb2xpbmFtXShodHRwczovL3R3aXR0ZXIuY29tL3Btb2xpbmFtKQoKKGMpIDIwMTctMjAyMi4gW1BlZHJvIEouIE1vbGluYV0oaHR0cDovL3BqbW9saW5hLmNvbSkgYXQgTWV0YWRldiBTLkwuIFtodHRwczovL21ldGFkZXYucHJvXShodHRwczovL21ldGFkZXYucHJvKSAmIGNvbnRyaWJ1dG9ycy4K
        readmeEtag: '"499bb41664454e09a1cfab64d047f500fab7f33b191461ab419f25703b19cb1c"'
        readmeLastModified: Thu, 21 Apr 2022 07:20:23 GMT
        description: TS Model & utils for creating and exposing OpenAPI 3.x contracts.
        created: '2017-03-06T18:47:56Z'
        updated: '2022-04-24T11:05:31Z'
        language: TypeScript
        archived: false
        stars: 270
        watchers: 270
        forks: 47
        owner: metadevpro
        logo: https://avatars.githubusercontent.com/u/24300914?v=4
        license: MIT
        repoEtag: '"a62bd90627b9616c75bdd78422501f6a4d1c5c172da79ddd04164a77c65b1812"'
        repoLastModified: Sun, 24 Apr 2022 11:05:31 GMT
      foundInMaster: true
      id: 390339b2a28f2e5660519a2422c29196
      swagger: 'No'
      version30: 'Yes'
      version31: 'No'
      moreDetails: true
      owner: metadevpro
      stars: 270
      watchers: 270
      forks: 47
      created: '2017-03-06T18:47:56Z'
      lastUpdated: '2022-04-24T11:05:31Z'
      archived: 'No'
    - source: IMPLEMENTATIONS.md
      name: Microsoft.OpenApi.net
      homepage: https://github.com/microsoft/openapi.net/
      language: C#
      source_description: C# based parser with definition validation and migration support from V2
      category:
        - Low-level Tooling
        - Parsers
        - All
      foundInMaster: true
      repository: https://github.com/microsoft/openapi.net/
      repositoryMetadata:
        base64Readme: >-
          IVtDYXRlZ29yeSBvdmVydmlldyBzY3JlZW5zaG90XShkb2NzL2ltYWdlcy9vYWluZXQucG5nICJNaWNyb3NvZnQgKyBPcGVuQVBJID0gTG92ZSIpDQoNCiMgT3BlbkFQSS5ORVQgDQoNCnxQYWNrYWdlfE51Z2V0fA0KfC0tfC0tfA0KfE1vZGVscyBhbmQgV3JpdGVyc3xbIVtudWdldF0oaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9udWdldC92L01pY3Jvc29mdC5PcGVuQXBpLnN2ZyldKGh0dHBzOi8vd3d3Lm51Z2V0Lm9yZy9wYWNrYWdlcy9NaWNyb3NvZnQuT3BlbkFwaS8pIHwNCnxSZWFkZXJzIHwgWyFbbnVnZXRdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vbnVnZXQvdi9NaWNyb3NvZnQuT3BlbkFwaS5SZWFkZXJzLnN2ZyldKGh0dHBzOi8vd3d3Lm51Z2V0Lm9yZy9wYWNrYWdlcy9NaWNyb3NvZnQuT3BlbkFwaS5SZWFkZXJzLykgfA0KDQoNClRoZSAqKk9wZW5BUEkuTkVUKiogU0RLIGNvbnRhaW5zIGEgdXNlZnVsIG9iamVjdCBtb2RlbCBmb3IgT3BlbkFQSSBkb2N1bWVudHMgaW4gLk5FVCBhbG9uZyB3aXRoIGNvbW1vbiBzZXJpYWxpemVycyB0byBleHRyYWN0IHJhdyBPcGVuQVBJIEpTT04gYW5kIFlBTUwgZG9jdW1lbnRzIGZyb20gdGhlIG1vZGVsLg0KDQoqKlNlZSBtb3JlIGluZm9ybWF0aW9uIG9uIHRoZSBPcGVuQVBJIHNwZWNpZmljYXRpb24gYW5kIGl0cyBoaXN0b3J5IGhlcmU6IDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9wZW5hcGlzLm9yZyI+T3BlbkFQSSBJbml0aWF0aXZlPC9hPioqDQoNClByb2plY3QgT2JqZWN0aXZlcyANCg0KLSBQcm92aWRlIGEgc2luZ2xlIHNoYXJlZCBvYmplY3QgbW9kZWwgaW4gLk5FVCBmb3IgT3BlbkFQSSBkZXNjcmlwdGlvbnMuDQotIEluY2x1ZGUgdGhlIG1vc3QgcHJpbWl0aXZlIFJlYWRlciBmb3IgaW5nZXN0aW5nIE9wZW5BUEkgSlNPTiBhbmQgWUFNTCBkb2N1bWVudHMgaW4gYm90aCBWMiBhbmQgVjMgZm9ybWF0cy4NCi0gUHJvdmlkZSBPcGVuQVBJIGRlc2NyaXB0aW9uIHdyaXRlcnMgZm9yIGJvdGggVjIgYW5kIFYzIHNwZWNpZmljYXRpb24gZm9ybWF0cy4NCi0gRW5hYmxlIGRldmVsb3BlcnMgdG8gY3JlYXRlIFJlYWRlcnMgdGhhdCB0cmFuc2xhdGUgZGlmZmVyZW50IGRhdGEgZm9ybWF0cyBpbnRvIE9wZW5BUEkgZGVzY3JpcHRpb25zLiANCg0KIyBJbnN0YWxsYXRpb24NCg0KLSBJbnN0YWxsIGNvcmUgTnVnZXQgcGFja2FnZSBgTWljcm9zb2Z0Lk9wZW5BcGlgDQotIEluc3RhbGwgcmVhZGVycyBOdWdldCBwYWNrYWdlIGBNaWNyb3NvZnQuT3BlbkFwaS5SZWFkZXJzYA0KDQojIFByb2Nlc3NvcnMNClRoZSBPcGVuQVBJLk5FVCBwcm9qZWN0IGhvbGRzIHRoZSBiYXNlIG9iamVjdCBtb2RlbCBmb3IgcmVwcmVzZW50aW5nIE9wZW5BUEkgZG9jdW1lbnRzIGFzIC5ORVQgb2JqZWN0cy4gU29tZSBkZXZlbG9wZXJzIGhhdmUgZm91bmQgdGhlIG5lZWQgdG8gd3JpdGUgcHJvY2Vzc29ycyB0aGF0IGNvbnZlcnQgb3RoZXIgZGF0YSBmb3JtYXRzIGludG8gdGhpcyBPcGVuQVBJLk5FVCBvYmplY3QgbW9kZWwuIFdlJ2QgbGlrZSB0byBjdXJhdGUgdGhhdCBsaXN0IG9mIHByb2Nlc3NvcnMgaW4gdGhpcyBzZWN0aW9uIG9mIHRoZSByZWFkbWUuIA0KDQpUaGUgYmFzZSBKU09OIGFuZCBZQU1MIHByb2Nlc3NvcnMgYXJlIGJ1aWx0IGludG8gdGhpcyBwcm9qZWN0LiBCZWxvdyBpcyB0aGUgbGlzdCBvZiB0aGUgb3RoZXIgc3VwcG9ydGVkIHByb2Nlc3NvciBwcm9qZWN0cy4NCg0KLSBbKipDIyBDb21tZW50IC8gQW5ub3RhdGlvbiBQcm9jZXNzb3IqKl0oaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9PcGVuQVBJLk5FVC5DU2hhcnBBbm5vdGF0aW9ucykgOiBDb252ZXJ0cyBzdGFuZGFyZCAuTkVUIGFubm90YXRpb25zICggLy8vIGNvbW1lbnRzICkgZW1pdHRlZCBmcm9tIHlvdXIgYnVpbGQgKE1TQnVpbGQuZXhlKSBpbnRvIE9wZW5BUEkuTkVUIGRvY3VtZW50IG9iamVjdC4gDQoNCi0gWyoqT0RhdGEgQ1NETCBQcm9jZXNzb3IqKl0oaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9PcGVuQVBJLk5FVC5PRGF0YSkgOiBDb252ZXJ0cyB0aGUgWE1MIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBFbnRpdHkgRGF0YSBNb2RlbCAoRURNKSBkZXNjcmliaW5nIGFuIE9EYXRhIFNlcnZpY2UgaW50byBPcGVuQVBJLk5FVCBkb2N1bWVudCBvYmplY3QuIA0KDQojIEV4YW1wbGUgVXNhZ2UNCg0KQ3JlYXRpbmcgYW4gT3BlbkFQSSBEb2N1bWVudA0KDQpgYGBDIw0KdmFyIGRvY3VtZW50ID0gbmV3IE9wZW5BcGlEb2N1bWVudA0Kew0KICAgIEluZm8gPSBuZXcgT3BlbkFwaUluZm8NCiAgICB7DQogICAgICAgIFZlcnNpb24gPSAiMS4wLjAiLA0KICAgICAgICBUaXRsZSA9ICJTd2FnZ2VyIFBldHN0b3JlIChTaW1wbGUpIiwNCiAgICB9LA0KICAgIFNlcnZlcnMgPSBuZXcgTGlzdDxPcGVuQXBpU2VydmVyPg0KICAgIHsNCiAgICAgICAgbmV3IE9wZW5BcGlTZXJ2ZXIgeyBVcmwgPSAiaHR0cDovL3BldHN0b3JlLnN3YWdnZXIuaW8vYXBpIiB9DQogICAgfSwNCiAgICBQYXRocyA9IG5ldyBPcGVuQXBpUGF0aHMNCiAgICB7DQogICAgICAgIFsiL3BldHMiXSA9IG5ldyBPcGVuQXBpUGF0aEl0ZW0NCiAgICAgICAgew0KICAgICAgICAgICAgT3BlcmF0aW9ucyA9IG5ldyBEaWN0aW9uYXJ5PE9wZXJhdGlvblR5cGUsIE9wZW5BcGlPcGVyYXRpb24+DQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgW09wZXJhdGlvblR5cGUuR2V0XSA9IG5ldyBPcGVuQXBpT3BlcmF0aW9uDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBEZXNjcmlwdGlvbiA9ICJSZXR1cm5zIGFsbCBwZXRzIGZyb20gdGhlIHN5c3RlbSB0aGF0IHRoZSB1c2VyIGhhcyBhY2Nlc3MgdG8iLA0KICAgICAgICAgICAgICAgICAgICBSZXNwb25zZXMgPSBuZXcgT3BlbkFwaVJlc3BvbnNlcw0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBbIjIwMCJdID0gbmV3IE9wZW5BcGlSZXNwb25zZQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlc2NyaXB0aW9uID0gIk9LIg0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KfTsNCmBgYA0KDQpSZWFkaW5nIGFuZCB3cml0aW5nIGEgT3BlbkFQSSBkZXNjcmlwdGlvbg0KDQpgYGBDIw0KdmFyIGh0dHBDbGllbnQgPSBuZXcgSHR0cENsaWVudA0Kew0KICAgIEJhc2VBZGRyZXNzID0gbmV3IFVyaSgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL09BSS9PcGVuQVBJLVNwZWNpZmljYXRpb24vIikNCn07DQoNCnZhciBzdHJlYW0gPSBhd2FpdCBodHRwQ2xpZW50LkdldFN0cmVhbUFzeW5jKCJtYXN0ZXIvZXhhbXBsZXMvdjMuMC9wZXRzdG9yZS55YW1sIik7DQoNCi8vIFJlYWQgVjMgYXMgWUFNTA0KdmFyIG9wZW5BcGlEb2N1bWVudCA9IG5ldyBPcGVuQXBpU3RyZWFtUmVhZGVyKCkuUmVhZChzdHJlYW0sIG91dCB2YXIgZGlhZ25vc3RpYyk7DQoNCi8vIFdyaXRlIFYyIGFzIEpTT04NCnZhciBvdXRwdXRTdHJpbmcgPSBvcGVuQXBpRG9jdW1lbnQuU2VyaWFsaXplKE9wZW5BcGlTcGVjVmVyc2lvbi5PcGVuQXBpMl8wLCBPcGVuQXBpRm9ybWF0Lkpzb24pOw0KDQpgYGANCg0KIyBCdWlsZCBTdGF0dXMNCg0KfCoqbWFzdGVyKip8DQp8LS18DQp8WyFbQnVpbGQgc3RhdHVzXShodHRwczovL2NpLmFwcHZleW9yLmNvbS9hcGkvcHJvamVjdHMvc3RhdHVzLzlsNmhseTN2amV1MHRtdHgvYnJhbmNoL21hc3Rlcj9zdmc9dHJ1ZSldKGh0dHBzOi8vY2kuYXBwdmV5b3IuY29tL3Byb2plY3QvTWljcm9zb2Z0T3BlbkFQSU5FVEFkbWluL29wZW5hcGktbmV0LTU0ZTdpL2JyYW5jaC9tYXN0ZXIpfA0KDQojIENvbnRyaWJ1dGluZw0KDQpUaGlzIHByb2plY3Qgd2VsY29tZXMgY29udHJpYnV0aW9ucyBhbmQgc3VnZ2VzdGlvbnMuICBNb3N0IGNvbnRyaWJ1dGlvbnMgcmVxdWlyZSB5b3UgdG8gYWdyZWUgdG8gYQ0KQ29udHJpYnV0b3IgTGljZW5zZSBBZ3JlZW1lbnQgKENMQSkgZGVjbGFyaW5nIHRoYXQgeW91IGhhdmUgdGhlIHJpZ2h0IHRvLCBhbmQgYWN0dWFsbHkgZG8sIGdyYW50IHVzDQp0aGUgcmlnaHRzIHRvIHVzZSB5b3VyIGNvbnRyaWJ1dGlvbi4gRm9yIGRldGFpbHMsIHZpc2l0IGh0dHBzOi8vY2xhLm1pY3Jvc29mdC5jb20uDQoNCldoZW4geW91IHN1Ym1pdCBhIHB1bGwgcmVxdWVzdCwgYSBDTEEtYm90IHdpbGwgYXV0b21hdGljYWxseSBkZXRlcm1pbmUgd2hldGhlciB5b3UgbmVlZCB0byBwcm92aWRlDQphIENMQSBhbmQgZGVjb3JhdGUgdGhlIFBSIGFwcHJvcHJpYXRlbHkgKGUuZy4sIGxhYmVsLCBjb21tZW50KS4gU2ltcGx5IGZvbGxvdyB0aGUgaW5zdHJ1Y3Rpb25zDQpwcm92aWRlZCBieSB0aGUgYm90LiBZb3Ugd2lsbCBvbmx5IG5lZWQgdG8gZG8gdGhpcyBvbmNlIGFjcm9zcyBhbGwgcmVwb3MgdXNpbmcgb3VyIENMQS4NCg0KVGhpcyBwcm9qZWN0IGhhcyBhZG9wdGVkIHRoZSBbTWljcm9zb2Z0IE9wZW4gU291cmNlIENvZGUgb2YgQ29uZHVjdF0oaHR0cHM6Ly9vcGVuc291cmNlLm1pY3Jvc29mdC5jb20vY29kZW9mY29uZHVjdC8pLg0KRm9yIG1vcmUgaW5mb3JtYXRpb24gc2VlIHRoZSBbQ29kZSBvZiBDb25kdWN0IEZBUV0oaHR0cHM6Ly9vcGVuc291cmNlLm1pY3Jvc29mdC5jb20vY29kZW9mY29uZHVjdC9mYXEvKSBvcg0KY29udGFjdCBbb3BlbmNvZGVAbWljcm9zb2Z0LmNvbV0obWFpbHRvOm9wZW5jb2RlQG1pY3Jvc29mdC5jb20pIHdpdGggYW55IGFkZGl0aW9uYWwgcXVlc3Rpb25zIG9yIGNvbW1lbnRzLg0KDQpUbyBwcm92aWRlIGZlZWRiYWNrIGFuZCBhc2sgcXVlc3Rpb25zIHlvdSBjYW4gdXNlIFN0YWNrIE92ZXJmbG93IHdpdGggdGhlIFtPcGVuQVBJLk5FVF0oaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvdGFnZ2VkL29wZW5hcGkubmV0KSB0YWcgb3IgdXNlIHRoZSBPcGVuQVBJLk5FVCBTbGFjayBjaGFubmVsIHdoaWNoIHlvdSBjYW4gam9pbiBieSByZWdpc3RlcmluZyBmb3IgdGhlIEhUVFAgQVBJcyB0ZWFtIGF0IGh0dHA6Ly9zbGFjay5odHRwYXBpcy5jb20uDQo=
        readmeEtag: '"b7bde59273ed6cbe369b619531bdf02db228fb99eeac268ff8fb6155b389f9b6"'
        readmeLastModified: Tue, 19 Apr 2022 23:46:22 GMT
        description: >-
          The OpenAPI.NET SDK contains a useful object model for OpenAPI
          documents in .NET along with common serializers to extract raw OpenAPI
          JSON and YAML documents from the model.
        created: '2017-07-14T00:24:14Z'
        updated: '2022-04-29T05:14:02Z'
        language: C#
        archived: false
        stars: 960
        watchers: 960
        forks: 158
        owner: microsoft
        logo: https://avatars.githubusercontent.com/u/6154722?v=4
        license: MIT
        repoEtag: '"c4019337a54cfa5e1cd48985351e388572718a94a2bf493b308b99866c97cf07"'
        repoLastModified: Fri, 29 Apr 2022 05:14:02 GMT
      id: f3215034d64cfcbcc28a4bdb0205a075
      swagger: 'No'
      version30: 'No'
      version31: 'No'
      moreDetails: true
      owner: microsoft
      stars: 960
      watchers: 960
      forks: 158
      created: '2017-07-14T00:24:14Z'
      lastUpdated: '2022-04-29T05:14:02Z'
      archived: 'No'
    - source:
        - IMPLEMENTATIONS.md
        - https://openapi.tools/
      name: openapi3_parser
      homepage: https://github.com/kevindew/openapi3_parser
      language: Ruby
      source_description:
        - >-
          A Ruby implementation of parser and validator for the OpenAPI 3
          Specification
        - >-
          A Ruby implementation of parser and validator for the OpenAPI 3
          Specification.
      category:
        - Low-level Tooling
        - Parsers
        - All
      repository: https://github.com/kevindew/openapi3_parser
      v2: false
      v3: true
      repositoryMetadata:
        base64Readme: >-
          IyBPcGVuQVBJIDMgUGFyc2VyCgpbIVtCdWlsZCBTdGF0dXNdKGh0dHBzOi8vdHJhdmlzLWNpLm9yZy9rZXZpbmRldy9vcGVuYXBpM19wYXJzZXIuc3ZnP2JyYW5jaD1tYWluKV0oaHR0cHM6Ly90cmF2aXMtY2kub3JnL2tldmluZGV3L29wZW5hcGkzX3BhcnNlcikKClRoaXMgYSBSdWJ5IGJhc2VkIHBhcnNlci92YWxpZGF0b3IgZm9yIFtPcGVuQVBJIDNdW29wZW5hcGktM10uIEl0IGlzIHVzZWQgdG8KY29udmVydCBhbiBPcGVuQVBJIGZpbGUgKGNhbiBiZSBhIGxvY2FsIGZpbGUsIGEgVVJMLCBhIHN0cmluZyBvciBldmVuIGEgUnVieQpoYXNoKSBpbnRvIGFuIG9iamVjdCBncmFwaCB3aXRoIGEgc2ltcGxlIEFQSSB0aGF0IGZvbGxvd3MgdGhlIFtPcGVuQVBJCnNwZWNpZmljYXRpb25dW29wZW5hcGktMy1zcGVjXS4KCkJhc2ljIGV4YW1wbGU6CgpgYGBydWJ5CnJlcXVpcmUgIm9wZW5hcGkzX3BhcnNlciIKCmRvY3VtZW50ID0gT3BlbmFwaTNQYXJzZXIubG9hZF91cmwoImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9PQUkvT3BlbkFQSS1TcGVjaWZpY2F0aW9uL21hc3Rlci9leGFtcGxlcy92My4wL3BldHN0b3JlLnlhbWwiKQoKZG9jdW1lbnQucGF0aHNbIi9wZXRzIl0uZ2V0LnN1bW1hcnkKIyA9PiAiTGlzdCBhbGwgcGV0cyIKYGBgCgpJdCBhaW1zIHRvIHN1cHBvcnQgMTAwJSBvZiB0aGUgT3BlbkFQSSAzLjAgc3BlY2lmaWNhdGlvbiwgd2l0aCBrZXkgZmVhdHVyZXMKYmVpbmc6CgotIFN1cHBvcnRzIGxvYWRpbmcgYSBzcGVjaWZpY2F0aW9uIGJ5IHBhdGggdG8gYSBmaWxlLCBVUkwsIFJ1YnkgZmlsZSBvYmplY3RzLAogIGFuZCBzdHJpbmdzIGluIFlBTUwgYW5kIEpTT04gZm9ybWF0cywgaXQgZXZlbiBzdXBwb3J0cyBsb2FkaW5nIHZpYSBhIFJ1YnkgaGFzaDsKLSBTdXBwb3J0IGZvciBsb2FkaW5nIHJlZmVyZW5jZXMgZnJvbSBleHRlcm5hbCBmaWxlcyBpbmNsdWRpbmcgVVJMczsKLSBIYW5kbGVzIHJlY3Vyc2l2ZSByZWZlcmVuY2VzOwotIEFsbCBvZiBPcGVuQVBJIHNwZWNpZmljYXRpb24gbWFwcGVkIHRvIFJ1Ynkgb2JqZWN0cywgcHJvdmlkaW5nIGEgbmF0dXJhbAogIFJ1YnkgaW50ZXJmYWNlIHRoYXQgbWFwcyBjbGVhcmx5IHRvIHRoZSBzcGVjaWZpY2F0aW9uOwotIE9wZW5BUEkgZmlsZXMgdmFsaWRhdGVkIHdpdGggYSBzaW1wbGUgQVBJIHRvIHF1aWNrbHkgYW5kIHNpbXBseSBzZWUgYWxsCiAgcHJvYmxlbXMgd2l0aCBhIGZpbGUKLSBCdWlsdC1pbiBNYXJrZG93biB0byBIVE1MIGNvbnZlcnNpb247Ci0gRG9jdW1lbnRhdGlvbiBmb3IgdGhlIEFQSSB0byBuYXZpZ2F0ZSB0aGUgT3BlbkFQSSBub2RlcyBpcyBhdmFpbGFibGUgb24KICBbcnVieWRvYy5pbmZvXVtkb2NzXS4KCkkndmUgd3JvdGUgYSBibG9nIHBvc3QgcmVmbGVjdGluZyBvbiB0aGUgZGVjaXNpb25zIGludm9sdmVkIGluIGJ1aWxkaW5nIHRoaXMKcGFyc2VyIGluIFtIb3cgdG8gd3JpdGUgYW4gT3BlbkFQSSAzIHBhcnNlcl1bYmxvZ10uCgpbb3BlbmFwaS0zXTogaHR0cHM6Ly9naXRodWIuY29tL09BSS9PcGVuQVBJLVNwZWNpZmljYXRpb24KW29wZW5hcGktMy1zcGVjXTogaHR0cHM6Ly9naXRodWIuY29tL09BSS9PcGVuQVBJLVNwZWNpZmljYXRpb24vYmxvYi9tYXN0ZXIvdmVyc2lvbnMvMy4wLjIubWQjc3BlY2lmaWNhdGlvbgpbZG9jc106IGh0dHA6Ly93d3cucnVieWRvYy5pbmZvL2dpdGh1Yi9rZXZpbmRldy9vcGVuYXBpM19wYXJzZXIvT3BlbmFwaTNQYXJzZXIvTm9kZS9PcGVuYXBpCltibG9nXTogaHR0cHM6Ly9rZXZpbmRldy5tZS9wb3N0LzE4ODYxMTQyMzIzMS9ob3ctdG8td3JpdGUtYW4tb3BlbmFwaS0zLXBhcnNlcgoKIyMgVXNhZ2UKCiMjIyBMb2FkaW5nIGEgc3BlY2lmaWNhdGlvbgoKYGBgcnVieQojIGJ5IFVSTApPcGVuYXBpM1BhcnNlci5sb2FkX3VybCgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2tldmluZGV3L29wZW5hcGkzX3BhcnNlci9tYWluL3NwZWMvc3VwcG9ydC9leGFtcGxlcy9wZXRzdG9yZS1leHBhbmRlZC55YW1sIikKCiMgYnkgcGF0aCB0byBmaWxlCk9wZW5hcGkzUGFyc2VyLmxvYWRfZmlsZSgic3BlYy9zdXBwb3J0L2V4YW1wbGVzL3ViZXIueWFtbCIpCgojIGJ5IEZpbGUKT3BlbmFwaTNQYXJzZXIubG9hZChGaWxlLm9wZW4oInNwZWMvc3VwcG9ydC9leGFtcGxlcy91YmVyLnlhbWwiKSkKCiMgYnkgU3RyaW5nCk9wZW5hcGkzUGFyc2VyLmxvYWQoJ3sgIm9wZW5hcGkiOiAiMy4wLjAiLCAiaW5mbyI6IHsgInRpdGxlIjogIkFQSSIsICJ2ZXJzaW9uIjogIjEuMC4wIiB9LCAicGF0aHMiOiB7fSAgfScpCgojIGJ5IEhhc2gKT3BlbmFwaTNQYXJzZXIubG9hZChvcGVuYXBpOiAiMy4wLjAiLCBpbmZvOiB7IHRpdGxlOiAiQVBJIiwgdmVyc2lvbjogIjEuMC4wIiB9LCBwYXRoczoge30pCgpgYGAKCiMjIyBWYWxpZGF0aW5nCgpgYGBydWJ5CmRvY3VtZW50ID0gT3BlbmFwaTNQYXJzZXIubG9hZChvcGVuYXBpOiAiMy4wLjAiLCBpbmZvOiB7fSwgcGF0aHM6IHt9KQpkb2N1bWVudC52YWxpZD8KIyA9PiBmYWxzZQpkb2N1bWVudC5lcnJvcnMKI8KgPT4gT3BlbmFwaTNQYXJzZXI6OlZhbGlkYXRpb246OkVycm9yQ29sbGVjdGlvbihlcnJvcnM6IHsiIy9pbmZvIj0+WyJNaXNzaW5nIHJlcXVpcmVkIGZpZWxkczogdGl0bGUgYW5kIHZlcnNpb24iXX0pCmBgYAoKIyMjIFRyYXZlcnNpbmcKCmBgYHJ1YnkKZG9jdW1lbnQgPSBPcGVuYXBpM1BhcnNlci5sb2FkX3VybCgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2tldmluZGV3L29wZW5hcGkzX3BhcnNlci9tYWluL3NwZWMvc3VwcG9ydC9leGFtcGxlcy9wZXRzdG9yZS1leHBhbmRlZC55YW1sIikKCiMgYnkgb2JqZWN0cwoKZG9jdW1lbnQuaW5mby50ZXJtc19vZl9zZXJ2aWNlCiMgPT4gImh0dHA6Ly9zd2FnZ2VyLmlvL3Rlcm1zLyIKCmRvY3VtZW50LnBhdGhzLmtleXMKIyA9PiBbIi9wZXRzIiwgIi9wZXRzL3tpZH0iXQoKZG9jdW1lbnQucGF0aHNbIi9wZXRzIl0uZ2V0LnBhcmFtZXRlcnMubWFwKCY6bmFtZSkKIyA9PiBbInRhZ3MiLCAibGltaXQiXQoKIyBieSBoYXNoIHN5bnRheAoKZG9jdW1lbnRbImluZm8iXVsidGVybXNPZlNlcnZpY2UiXQo9PiAiaHR0cDovL3N3YWdnZXIuaW8vdGVybXMvIgoKZG9jdW1lbnRbInBhdGhzIl0ua2V5cwojID0+IFsiL3BldHMiLCAiL3BldHMve2lkfSJdCgpkb2N1bWVudFsicGF0aHMiXVsiL3BldHMiXVsiZ2V0Il1bInBhcmFtZXRlcnMiXS5tYXAoJjpuYW1lKQojID0+IFsidGFncyIsICJsaW1pdCJdCgojIGJ5IGEgcGF0aCB0byBhIG5vZGUKZG9jdW1lbnQubm9kZV9hdCgiIy9wYXRocy8lMkZwZXRzL2dldC9vcGVyYXRpb25JZCIpCj0+ICJmaW5kUGV0cyIKCmRvY3VtZW50Lm5vZGVfYXQoIiMvY29tcG9uZW50cy9zY2hlbWFzL1BldC9hbGxPZi8wL3JlcXVpcmVkLzAiKQo9PiAibmFtZSIKCiMgb3IgY29tYmluaW5nCgpkb2N1bWVudC5jb21wb25lbnRzLnNjaGVtYXNbIlBldCJdLm5vZGVfYXQoIiMuLi9OZXdQZXQiKQo9PiBPcGVuYXBpM1BhcnNlcjo6Tm9kZTo6U2NoZW1hKCMvY29tcG9uZW50cy9zY2hlbWFzL05ld1BldCkKYGBgCgpZb3UgY2FuIGxlYXJuIG1vcmUgYWJvdXQgdGhlIEFQSSBvbiBbcnVieWRvYy5pbmZvXVtkb2NzXQoKIyMgSW5zdGFsbGF0aW9uCgpZb3UgY2FuIGluc3RhbGwgdGhpcyBnZW0gaW50byB5b3VyIGJ1bmRsZXIgYXBwbGljYXRpb24gYnkgYWRkaW5nIHRoaXMgbGluZSB0bwp5b3VyIEdlbWZpbGU6CgpgYGAKZ2VtICJvcGVuYXBpM19wYXJzZXIiLCAifj4gMC45LjAiCmBgYAoKYW5kIHRoZW4gcnVubmluZyBgJCBidW5kbGUgaW5zdGFsbGAKCk9yIGluc3RhbGwgdGhlIGdlbSBvbnRvIHlvdXIgbWFjaGluZSB2aWEgYCQgZ2VtIGluc3RhbGwgb3BlbmFwaTNfcGFyc2VyYAoKIyMgU3RhdHVzCgpUaGlzIGlzIGN1cnJlbnRseSBhIHdvcmsgaW4gcHJvZ3Jlc3MgYW5kIHdpbGwgcmVtYWluIHNvIHVudGlsIGl0IHJlYWNoZXMgMS4wLgoKU2VlIFtUT0RPXShUT0RPLm1kKSBmb3IgZGV0YWlscyBvZiB0aGUgZmVhdHVyZXMgc3RpbGwgdG8gaW1wbGVtZW50LgoKIyMgTGljZW5jZQoKW01JVCBMaWNlbnNlXShMSUNFTkNFKQo=
        readmeEtag: '"dd9f9975ac0af5e29d1c5676b1b13cc1850ee64255170754291a0a7912e785ad"'
        readmeLastModified: Mon, 21 Mar 2022 01:53:24 GMT
        description: Open API 3 Parser/Validator for Ruby
        created: '2017-10-19T23:33:52Z'
        updated: '2022-04-19T11:38:26Z'
        language: Ruby
        archived: false
        stars: 68
        watchers: 68
        forks: 11
        owner: kevindew
        logo: https://avatars.githubusercontent.com/u/282717?v=4
        license: MIT
        repoEtag: '"42c4c00d3369f7d9e7db20151c9b33d1c75a511ef171cf2572e77b6ab92411a6"'
        repoLastModified: Tue, 19 Apr 2022 11:38:26 GMT
      foundInMaster: true
      id: 609fe191ac5d7b1b89c772e47fd2deb8
      swagger: 'No'
      version30: 'Yes'
      version31: 'No'
      moreDetails: true
      owner: kevindew
      stars: 68
      watchers: 68
      forks: 11
      created: '2017-10-19T23:33:52Z'
      lastUpdated: '2022-04-19T11:38:26Z'
      archived: 'No'
- category: Code Generators
  tools:
    - source: IMPLEMENTATIONS.md
      name: swagger-models
      homepage: >-
        https://github.com/swagger-api/swagger-core/tree/master/modules/swagger-models
      language: Java
      source_description: OpenAPI 3.0 Java Pojos
      category:
        - Low-level Tooling
        - Code Generators
        - All
      foundInMaster: true
      repository: >-
        https://github.com/swagger-api/swagger-core/tree/master/modules/swagger-models
      repositoryMetadata:
        base64Readme: >-
          
        readmeEtag: '"98bc89d482d68119986f3131f16310ce12e8e2884a0aedfe502915818b5b9c60"'
        readmeLastModified: Mon, 04 Apr 2022 16:09:24 GMT
        description: >-
          Examples and server integrations for generating the Swagger API
          Specification, which enables easy access to your REST API
        created: '2011-07-05T23:44:11Z'
        updated: '2022-04-29T13:28:08Z'
        language: Java
        archived: false
        stars: 6972
        watchers: 6972
        forks: 2107
        owner: swagger-api
        logo: https://avatars.githubusercontent.com/u/7658037?v=4
        license: Apache-2.0
        repoEtag: '"719a0d4c2107223a733e1ed4b1e77a186957f81d27bb6ba07d90340a30d6c7f2"'
        repoLastModified: Fri, 29 Apr 2022 13:28:08 GMT
      id: 266d60df2d48ad8a47539de3c1071f3a
      swagger: 'No'
      version30: 'No'
      version31: 'No'
      moreDetails: true
      owner: swagger-api
      stars: 6972
      watchers: 6972
      forks: 2107
      created: '2011-07-05T23:44:11Z'
      lastUpdated: '2022-04-29T13:28:08Z'
      archived: 'No'
- category: Converters
  tools:
    - source:
        - IMPLEMENTATIONS.md
        - https://openapi.tools/
      name: swagger2openapi
      category:
        - Low-level Tooling
        - Converters
        - All
      language: JavaScript
      link: https://mermade.org.uk/openapi-converter
      repository: https://github.com/mermade/swagger2openapi
      source_description:
        - An OpenAPI / Swagger 2.0 to OpenAPI 3.0.x converter and validator
        - >-
          Upgrade files from OpenAPI v2.0 to v3.0, bundling into one mega file
          or respecting $refs. Part of oas-kit.
      v2: true
      v3: true
      repositoryMetadata:
        base64Readme: >-
          IyBPQVMtS2l0CgpUaGlzIGlzIHRoZSBtb25vLXJlcG8gZm9yIHRoZSBmb2xsb3dpbmcgcmVsYXRlZCBwcm9qZWN0cwoKKiBbc3dhZ2dlcjJvcGVuYXBpXShwYWNrYWdlcy9zd2FnZ2VyMm9wZW5hcGkvUkVBRE1FLm1kKQoqIFtvYXMtdmFsaWRhdG9yXShwYWNrYWdlcy9vYXMtdmFsaWRhdG9yL1JFQURNRS5tZCkKKiBbb2FzLWxpbnRlcl0ocGFja2FnZXMvb2FzLWxpbnRlci9SRUFETUUubWQpCiogW29hcy1yZXNvbHZlcl0ocGFja2FnZXMvb2FzLXJlc29sdmVyL1JFQURNRS5tZCkKKiBbb2FzLXNjaGVtYS13YWxrZXJdKHBhY2thZ2VzL29hcy1zY2hlbWEtd2Fsa2VyL1JFQURNRS5tZCkKKiBbb2FzLWtpdC1jb21tb25dKHBhY2thZ2VzL29hcy1raXQtY29tbW9uL1JFQURNRS5tZCkKKiBbcmVmdG9vbHNdKHBhY2thZ2VzL3JlZnRvb2xzL1JFQURNRS5tZCkKCiMjIERvY3VtZW50YXRpb24KCiogW01haW4gc2l0ZV0oaHR0cHM6Ly9tZXJtYWRlLmdpdGh1Yi5pby9vYXMta2l0KQoqIFtDSEFOR0VMT0ddKGh0dHBzOi8vZ2l0aHViLmNvbS9NZXJtYWRlL29hcy1raXQvYmxvYi9tYXN0ZXIvQ0hBTkdFTE9HLm1kI2NoYW5nZS1sb2cpCgojIyBPbmxpbmUgY29udmVydGVyL3ZhbGlkYXRvcgoKKiBbT3BlbkFQSS13ZWJjb252ZXJ0ZXJdKGh0dHBzOi8vbWVybWFkZS5vcmcudWsvb3BlbmFwaS1jb252ZXJ0ZXIpCgojIyBTdXBwb3J0ZWQgTm9kZS5qcyB2ZXJzaW9ucwoKQW55IExUUyB2ZXJzaW9uLiBJdCBpcyAqKm5vdCoqIHJlY29tbWVuZGVkIHRvIHVzZSBOb2RlLmpzIDEyLjE3LngsMTIuMTgueCBvciAxMi4xOS54IGR1ZSB0byBhbiBbaHR0cDIgYnVnXShodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvaXNzdWVzLzI4MDAxKS4KCiMjIERldmVsb3BtZW50CgoqIGNsb25lIHRoZSByZXBvc2l0b3J5CiogYG5wbSBpYCBpbiB0aGUgdG9wIGxldmVsIGRpcmVjdG9yeQoqIGBucHggbGVybmEgYm9vdHN0cmFwYAoKUGxlYXNlIHRyeSBhbmQga2VlcCBjb21taXRzIHJlbGF0ZWQgdG8gYSBzaW5nbGUgcGFja2FnZSBvciBwaWVjZSBvZiBmdW5jdGlvbmFsaXR5LiBQbGVhc2UgcmV2aWV3IHRoZQpbQ09OVFJJQlVUSU5HLm1kXShDT05UUklCVVRJTkcubWQpIGZvciBhZGRpdGlvbmFsIGRldGFpbHMuCgojIyBTdXBwb3J0aW5nIGRldmVsb3BtZW50CgoqIFtBUElzLmd1cnUgb3Blbi1jb2xsZWN0aXZlXShodHRwczovL29wZW5jb2xsZWN0aXZlLmNvbS9vcGVuYXBpLWRpcmVjdG9yeSkKKiBbTGlub2RlIFZQUyByZWZlcnJhbCBsaW5rXShodHRwczovL3d3dy5saW5vZGUuY29tLz9yPTU3MzRiZTQ2N2NjNTAxYjIzMjY3Y2Y2NmQ0NTFiYzMzOTA0MmRkZmEpCg==
        readmeEtag: '"2204f5a47e36a0f28553f57b55877f2baf4cfd11734d07f0910c878360eb99b6"'
        readmeLastModified: Wed, 07 Jul 2021 12:13:38 GMT
        description: >-
          Convert Swagger 2.0 definitions to OpenAPI 3.0 and
          resolve/validate/lint
        created: '2016-10-20T13:17:42Z'
        updated: '2022-04-21T02:22:25Z'
        language: JavaScript
        archived: false
        stars: 598
        watchers: 598
        forks: 107
        owner: Mermade
        logo: https://avatars.githubusercontent.com/u/15950345?v=4
        license: BSD-3-Clause
        repoEtag: '"3de6c4e4a845a05559726850a966eb738a97aab9be43351bdd9a8df3faf663a1"'
        repoLastModified: Thu, 21 Apr 2022 02:22:25 GMT
      foundInMaster: true
      homepage: https://github.com/mermade/swagger2openapi
      id: 48c5505c3c024f64480d123af42fdd97
      swagger: 'Yes'
      version30: 'Yes'
      version31: 'No'
      moreDetails: true
      owner: Mermade
      stars: 598
      watchers: 598
      forks: 107
      created: '2016-10-20T13:17:42Z'
      lastUpdated: '2022-04-21T02:22:25Z'
      archived: 'No'
    - source:
        - IMPLEMENTATIONS.md
        - https://openapi.tools/
      name:
        - odata-openapi
        - OData OpenAPI
      homepage: https://github.com/oasis-tcs/odata-openapi
      language: XSLT
      source_description:
        - OData 4.0 to OpenAPI 3.0.0 converter
        - OData 4.0, 3.0, and 2.0 to OpenAPI v3.1, v3.0, and v2.0 converter
      category:
        - Low-level Tooling
        - Converters
        - All
      repository: https://github.com/oasis-tcs/odata-openapi
      v2: true
      v3: true
      repositoryMetadata:
        base64Readme: >-
          PGRpdj4KPGgyPlJFQURNRTwvaDI+Cgo8cD5NZW1iZXJzIG9mIHRoZSA8YSBocmVmPSJodHRwczovL3d3dy5vYXNpcy1vcGVuLm9yZy9jb21taXR0ZWVzL29kYXRhLyI+T0FTSVMgT3BlbiBEYXRhIFByb3RvY29sIChPRGF0YSkgVGVjaG5pY2FsIENvbW1pdHRlZTwvYT4gY3JlYXRlIGFuZCBtYW5hZ2UgdGVjaG5pY2FsIGNvbnRlbnQgaW4gdGhpcyBUQyBHaXRIdWIgcmVwb3NpdG9yeSAoIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9vYXNpcy10Y3Mvb2RhdGEtb3BlbmFwaSI+aHR0cHM6Ly9naXRodWIuY29tL29hc2lzLXRjcy9vZGF0YS1vcGVuYXBpPC9hPiApIGFzIHBhcnQgb2YgdGhlIFRDJ3MgY2hhcnRlcmVkIHdvcmsgKDxpPmkuZS48L2k+LCB0aGUgcHJvZ3JhbSBvZiB3b3JrIGFuZCBkZWxpdmVyYWJsZXMgZGVzY3JpYmVkIGluIGl0cyA8YSBocmVmPSJodHRwczovL3d3dy5vYXNpcy1vcGVuLm9yZy9jb21taXR0ZWVzL29kYXRhL2NoYXJ0ZXIucGhwIj5jaGFydGVyPC9hPikuPC9wPgoKPHA+T0FTSVMgVEMgR2l0SHViIHJlcG9zaXRvcmllcywgYXMgZGVzY3JpYmVkIGluIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9hc2lzLW9wZW4ub3JnL3Jlc291cmNlcy90Y2FkbWluL2dpdGh1Yi1yZXBvc2l0b3JpZXMtZm9yLW9hc2lzLXRjLW1lbWJlcnMtY2hhcnRlcmVkLXdvcmsiPkdpdEh1YiBSZXBvc2l0b3JpZXMgZm9yIE9BU0lTIFRDIE1lbWJlcnMnIENoYXJ0ZXJlZCBXb3JrPC9hPiwgYXJlIGdvdmVybmVkIGJ5IHRoZSBPQVNJUyA8YSBocmVmPSJodHRwczovL3d3dy5vYXNpcy1vcGVuLm9yZy9wb2xpY2llcy1ndWlkZWxpbmVzL3RjLXByb2Nlc3MiPlRDIFByb2Nlc3M8L2E+LCA8YSBocmVmPSJodHRwczovL3d3dy5vYXNpcy1vcGVuLm9yZy9wb2xpY2llcy1ndWlkZWxpbmVzL2lwciI+SVBSIFBvbGljeTwvYT4sIGFuZCBvdGhlciBwb2xpY2llcywgc2ltaWxhciB0byBUQyBXaWtpcywgVEMgSklSQSBpc3N1ZXMgdHJhY2tpbmcgaW5zdGFuY2VzLCBUQyBTVk4vU3VidmVyc2lvbiByZXBvc2l0b3JpZXMsIGV0Yy4gIFdoaWxlIHRoZXkgbWFrZSB1c2Ugb2YgcHVibGljIEdpdEh1YiByZXBvc2l0b3JpZXMsIHRoZXNlIFRDIEdpdEh1YiByZXBvc2l0b3JpZXMgYXJlIGRpc3RpbmN0IGZyb20gPGEgaHJlZj0iaHR0cHM6Ly93d3cub2FzaXMtb3Blbi5vcmcvcmVzb3VyY2VzL29wZW4tcmVwb3NpdG9yaWVzIj5PQVNJUyBPcGVuIFJlcG9zaXRvcmllczwvYT4sIHdoaWNoIGFyZSB1c2VkIGZvciBkZXZlbG9wbWVudCBvZiBvcGVuIHNvdXJjZSA8YSBocmVmPSJodHRwczovL3d3dy5vYXNpcy1vcGVuLm9yZy9yZXNvdXJjZXMvb3Blbi1yZXBvc2l0b3JpZXMvbGljZW5zZXMiPmxpY2Vuc2VkPC9hPiBjb250ZW50LjwvcD4KPC9kaXY+Cgo8ZGl2Pgo8aDM+RGVzY3JpcHRpb248L2gzPgoKPHA+VGhlIHB1cnBvc2Ugb2YgdGhpcyByZXBvc2l0b3J5IGlzIHRvIHN1cHBvcnQgZGV2ZWxvcG1lbnQgb2YgdG9vbHMgZm9yIHByb2R1Y2luZyA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vT0FJL09wZW5BUEktU3BlY2lmaWNhdGlvbiI+T3BlbkFQSTwvYT4gZGVzY3JpcHRpb25zIGZvciBPRGF0YSBzZXJ2aWNlcy48L3A+CjxwPlBsYW5uZWQgd29yayBpdGVtcyBpbmNsdWRlOgo8dWw+CjxsaT5jb252ZXJ0IE9EYXRhIENTREwgSlNPTiBvciBPRGF0YSBDU0RMIFhNTCB0byBPcGVuQVBJIEpTT048L2xpPgo8bGk+ZXhhbXBsZSBYTUwgZmlsZXM8L2xpPgo8bGk+ZXhhbXBsZSBvcGVuYXBpLmpzb24gZmlsZXM8L2xpPgo8bGk+ZXhhbXBsZSBmaWxlcyBmb3IgdGhlIGxpdmUgb2RhdGEub3JnIHNlcnZpY2VzPC9saT4KPC91bD48L3A+Cgo8L2Rpdj4KCjxkaXY+CjxoMz5Db250cmlidXRpb25zPC9oMz4KPHA+QXMgc3RhdGVkIGluIHRoaXMgcmVwb3NpdG9yeSdzIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9vYXNpcy10Y3Mvb2RhdGEtb3BlbmFwaS9ibG9iL21hc3Rlci9DT05UUklCVVRJTkcubWQiPkNPTlRSSUJVVElORyBmaWxlPC9hPiwgY29udHJpYnV0b3JzIHRvIHRoaXMgcmVwb3NpdG9yeSBhcmUgZXhwZWN0ZWQgdG8gYmUgTWVtYmVycyBvZiB0aGUgT0FTSVMgT0RhdGEgVEMsIGZvciBhbnkgc3Vic3RhbnRpdmUgY2hhbmdlIHJlcXVlc3RzLiAgQW55b25lIHdpc2hpbmcgdG8gY29udHJpYnV0ZSB0byB0aGlzIEdpdEh1YiBwcm9qZWN0IGFuZCA8YSBocmVmPSJodHRwczovL3d3dy5vYXNpcy1vcGVuLm9yZy9qb2luL3BhcnRpY2lwYXRpb24taW5zdHJ1Y3Rpb25zIj5wYXJ0aWNpcGF0ZTwvYT4gaW4gdGhlIFRDJ3MgdGVjaG5pY2FsIGFjdGl2aXR5IGlzIGludml0ZWQgdG8gam9pbiBhcyBhbiBPQVNJUyBUQyBNZW1iZXIuICBQdWJsaWMgZmVlZGJhY2sgaXMgYWxzbyBhY2NlcHRlZCwgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9hc2lzLW9wZW4ub3JnL3BvbGljaWVzLWd1aWRlbGluZXMvaXByI2FwcGVuZGl4YSI+T0FTSVMgRmVlZGJhY2sgTGljZW5zZTwvYT4uPC9wPgo8L2Rpdj4KCjxkaXY+CjxoMz5MaWNlbnNpbmc8L2gzPgo8cD5QbGVhc2Ugc2VlIHRoZSA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vb2FzaXMtdGNzL29kYXRhLW9wZW5hcGkvYmxvYi9tYXN0ZXIvTElDRU5TRS5tZCI+TElDRU5TRTwvYT4gZmlsZSBmb3IgZGVzY3JpcHRpb24gb2YgdGhlIGxpY2Vuc2UgdGVybXMgYW5kIE9BU0lTIHBvbGljaWVzIGFwcGxpY2FibGUgdG8gdGhlIFRDJ3Mgd29yayBpbiB0aGlzIEdpdEh1YiBwcm9qZWN0LiBDb250ZW50IGluIHRoaXMgcmVwb3NpdG9yeSBpcyBpbnRlbmRlZCB0byBiZSBwYXJ0IG9mIHRoZSBPRGF0YSBUQydzIHBlcm1hbmVudCByZWNvcmQgb2YgYWN0aXZpdHksIHZpc2libGUgYW5kIGZyZWVseSBhdmFpbGFibGUgZm9yIGFsbCB0byB1c2UsIHN1YmplY3QgdG8gYXBwbGljYWJsZSBPQVNJUyBwb2xpY2llcywgYXMgcHJlc2VudGVkIGluIHRoZSByZXBvc2l0b3J5IDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9vYXNpcy10Y3Mvb2RhdGEtb3BlbmFwaS9ibG9iL21hc3Rlci9MSUNFTlNFLm1kIj5MSUNFTlNFPC9hPiBmaWxlLjwvcD4KPC9kaXY+CgoKPGgzPkZ1cnRoZXIgRGVzY3JpcHRpb24gb2YgdGhpcyBSZXBvc2l0b3J5PC9oMz4KClRoZSBPRGF0YSBUQyBoYXMgcHVibGlzaGVkIHRoZSBbT0RhdGEgdG8gT3BlbkFQSSBNYXBwaW5nIFZlcnNpb24gMS4wXShodHRwOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy9vZGF0YS9vZGF0YS1vcGVuYXBpL3YxLjAvb2RhdGEtb3BlbmFwaS12MS4wLmh0bWwpLCBhIHJlY29tbWVuZGF0aW9uIG9uIGhvdyB0byBjcmVhdGUgT3BlbkFQSSBkZXNjcmlwdGlvbnMgZm9yIE9EYXRhIHNlcnZpY2VzLiBUaGlzIHByb2plY3QgY29udGFpbnMgdHdvIHByb29mLW9mLWNvbmNlcHQgaW1wbGVtZW50YXRpb25zIG9mIHRoYXQgbWFwcGluZywgW29uZSB1c2luZyBKYXZhU2NyaXB0XShsaWIpLCBhbmQgW29uZSB1c2luZyBYU0xUXSh0b29scykuCgpUaGUgW2BleGFtcGxlc2AgZm9sZGVyXShleGFtcGxlcykgY29udGFpbnMgW09wZW5BUEkgMy4wLjJdKGh0dHBzOi8vZ2l0aHViLmNvbS9PQUkvT3BlbkFQSS1TcGVjaWZpY2F0aW9uKSBkZXNjcmlwdGlvbnMgdGhhdCBoYXZlIGJlZW4gY3JlYXRlZCBmcm9tIHRoZSBYTUwgYCRtZXRhZGF0YWAgZG9jdW1lbnRzIG9mIGxpdmUgYW5kIGV4YW1wbGUgT0RhdGEgc2VydmljZXMgd2l0aCB0aGVzZSBwcm9vZi1vZi1jb25jZXB0IGltcGxlbWVudGF0aW9ucy4gCgpUaGUgZW50aXR5LXJlbGF0aW9uc2hpcCBkaWFncmFtcyB2aXN1YWxpemluZyB0aGUgcmVzb3VyY2UgbW9kZWxzIG9mIGVhY2ggc2VydmljZSBhcmUgZ2VuZXJhdGVkIG9uLXRoZS1mbHkgd2l0aCBbeVVNTF0oaHR0cDovL3l1bWwubWUvKS4KCk9wZW5BUEkgZGVzY3JpcHRpb25zIGZvciBsaXZlIGV4YW1wbGUgT0RhdGEgc2VydmljZXMgYXQgW3d3dy5vZGF0YS5vcmddKGh0dHA6Ly93d3cub2RhdGEub3JnLykKIC0gW1RyaXBQaW4gKHJlYWQvd3JpdGUpXShodHRwOi8vcGV0c3RvcmUuc3dhZ2dlci5pby8/dXJsPWh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9vYXNpcy10Y3Mvb2RhdGEtb3BlbmFwaS9tYXN0ZXIvZXhhbXBsZXMvVHJpcFBpbi5vcGVuYXBpMy5qc29uKQogLSBbU2ltcGxlIHJlYWQvd3JpdGUgc2VydmljZV0oaHR0cDovL3BldHN0b3JlLnN3YWdnZXIuaW8vP3VybD1odHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vb2FzaXMtdGNzL29kYXRhLW9wZW5hcGkvbWFzdGVyL2V4YW1wbGVzL2V4YW1wbGUub3BlbmFwaTMuanNvbikKIC0gW05vcnRod2luZCAocmVhZCldKGh0dHA6Ly9wZXRzdG9yZS5zd2FnZ2VyLmlvLz91cmw9aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL29hc2lzLXRjcy9vZGF0YS1vcGVuYXBpL21hc3Rlci9leGFtcGxlcy9Ob3J0aHdpbmQub3BlbmFwaTMuanNvbikKCk9wZW5BUEkgZGVzY3JpcHRpb25zIGZvciBPRGF0YSBzZXJ2aWNlcyB0aGF0IHJlZmVyZW5jZSBlYWNoIG90aGVyIChjcm9zcy1zZXJ2aWNlIHJlZmVyZW5jZXMpCiAtIFtQZW9wbGVdKGh0dHA6Ly9wZXRzdG9yZS5zd2FnZ2VyLmlvLz91cmw9aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL29hc2lzLXRjcy9vZGF0YS1vcGVuYXBpL21hc3Rlci9leGFtcGxlcy9QZW9wbGUub3BlbmFwaTMuanNvbikKIC0gW1Byb2R1Y3RzXShodHRwOi8vcGV0c3RvcmUuc3dhZ2dlci5pby8/dXJsPWh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9vYXNpcy10Y3Mvb2RhdGEtb3BlbmFwaS9tYXN0ZXIvZXhhbXBsZXMvUHJvZHVjdHMub3BlbmFwaTMuanNvbikKCjxkaXY+CjxoMz5Db250YWN0PC9oMz4KPHA+UGxlYXNlIHNlbmQgcXVlc3Rpb25zIG9yIGNvbW1lbnRzIGFib3V0IDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9hc2lzLW9wZW4ub3JnL3Jlc291cmNlcy90Y2FkbWluL2dpdGh1Yi1yZXBvc2l0b3JpZXMtZm9yLW9hc2lzLXRjLW1lbWJlcnMtY2hhcnRlcmVkLXdvcmsiPk9BU0lTIFRDIEdpdEh1YiByZXBvc2l0b3JpZXM8L2E+IHRvIHRoZSBPQVNJUyA8YSBocmVmPSJtYWlsdG86dGMtYWRtaW5Ab2FzaXMtb3Blbi5vcmciPlRDIEFkbWluaXN0cmF0b3I8L2E+LiAgRm9yIHF1ZXN0aW9ucyBhYm91dCBjb250ZW50IGluIHRoaXMgcmVwb3NpdG9yeSwgcGxlYXNlIGNvbnRhY3QgdGhlIFRDIENoYWlyIG9yIENvLUNoYWlycyBhcyBsaXN0ZWQgb24gdGhlIHRoZSBPRGF0YSBUQydzIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9hc2lzLW9wZW4ub3JnL2NvbW1pdHRlZXMvb2RhdGEvIj5ob21lIHBhZ2U8L2E+LjwvcD4KPC9kaXY+Cg==
        readmeEtag: '"4688bebb62d8eac0d103d205eba4240046456df2c542b2c463db0700539af0db"'
        readmeLastModified: Mon, 11 Apr 2022 07:17:27 GMT
        description: >-
          OASIS OData TC: Tools for producing API descriptions for OData
          services that adhere to the OpenAPI Specification
        created: '2016-11-17T21:11:22Z'
        updated: '2022-04-13T09:09:28Z'
        language: XSLT
        archived: false
        stars: 135
        watchers: 135
        forks: 59
        owner: oasis-tcs
        logo: https://avatars.githubusercontent.com/u/20116735?v=4
        license: NOASSERTION
        repoEtag: '"f50941e39f8085571f1608b9df2abe800fba17648a9d29bd670c0468d4a06c70"'
        repoLastModified: Wed, 13 Apr 2022 09:09:28 GMT
      foundInMaster: true
      v3_1: true
      id: 9039f84e8e8b63849cbf15578564033e
      swagger: 'Yes'
      version30: 'Yes'
      version31: 'Yes'
      moreDetails: true
      owner: oasis-tcs
      stars: 135
      watchers: 135
      forks: 59
      created: '2016-11-17T21:11:22Z'
      lastUpdated: '2022-04-13T09:09:28Z'
      archived: 'No'
